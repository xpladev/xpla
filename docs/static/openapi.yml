components:
  schemas:
    cosmos.auth.v1beta1.Params:
      description: Params defines the parameters for the auth module.
      properties:
        max_memo_characters:
          format: uint64
          type: string
        sig_verify_cost_ed25519:
          format: uint64
          type: string
        sig_verify_cost_secp256k1:
          format: uint64
          type: string
        tx_sig_limit:
          format: uint64
          type: string
        tx_size_cost_per_byte:
          format: uint64
          type: string
      type: object
    cosmos.auth.v1beta1.QueryAccountResponse:
      description: >-
        QueryAccountResponse is the response type for the Query/Account RPC
        method.
      properties:
        account:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          type: object
      type: object
    cosmos.auth.v1beta1.QueryAccountsResponse:
      description: >-
        QueryAccountsResponse is the response type for the Query/Accounts RPC
        method.


        Since: cosmos-sdk 0.43
      properties:
        accounts:
          items:
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            properties:
              type_url:
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
                type: string
              value:
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
                format: byte
                type: string
            type: object
          title: accounts are the existing accounts
          type: array
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      type: object
    cosmos.auth.v1beta1.QueryModuleAccountByNameResponse:
      description: >-
        QueryModuleAccountByNameResponse is the response type for the
        Query/ModuleAccountByName RPC method.
      properties:
        account:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          type: object
      type: object
    cosmos.auth.v1beta1.QueryParamsResponse:
      description: >-
        QueryParamsResponse is the response type for the Query/Params RPC
        method.
      properties:
        params:
          description: params defines the parameters of the module.
          properties:
            max_memo_characters:
              format: uint64
              type: string
            sig_verify_cost_ed25519:
              format: uint64
              type: string
            sig_verify_cost_secp256k1:
              format: uint64
              type: string
            tx_sig_limit:
              format: uint64
              type: string
            tx_size_cost_per_byte:
              format: uint64
              type: string
          type: object
      type: object
    cosmos.authz.v1beta1.Grant:
      description: |-
        Grant gives permissions to execute
        the provide method with expiration time.
      properties:
        authorization:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          type: object
        expiration:
          format: date-time
          type: string
      type: object
    cosmos.authz.v1beta1.GrantAuthorization:
      description: 'Since: cosmos-sdk 0.45.2'
      properties:
        authorization:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          type: object
        expiration:
          format: date-time
          type: string
        grantee:
          type: string
        granter:
          type: string
      title: >-
        GrantAuthorization extends a grant with both the addresses of the
        grantee and granter.

        It is used in genesis.proto and query.proto
      type: object
    cosmos.authz.v1beta1.QueryGranteeGrantsResponse:
      description: >-
        QueryGranteeGrantsResponse is the response type for the
        Query/GranteeGrants RPC method.
      properties:
        grants:
          description: grants is a list of grants granted to the grantee.
          items:
            description: 'Since: cosmos-sdk 0.45.2'
            properties:
              authorization:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
              expiration:
                format: date-time
                type: string
              grantee:
                type: string
              granter:
                type: string
            title: >-
              GrantAuthorization extends a grant with both the addresses of the
              grantee and granter.

              It is used in genesis.proto and query.proto
            type: object
          type: array
        pagination:
          description: pagination defines an pagination for the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      type: object
    cosmos.authz.v1beta1.QueryGranterGrantsResponse:
      description: >-
        QueryGranterGrantsResponse is the response type for the
        Query/GranterGrants RPC method.
      properties:
        grants:
          description: grants is a list of grants granted by the granter.
          items:
            description: 'Since: cosmos-sdk 0.45.2'
            properties:
              authorization:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
              expiration:
                format: date-time
                type: string
              grantee:
                type: string
              granter:
                type: string
            title: >-
              GrantAuthorization extends a grant with both the addresses of the
              grantee and granter.

              It is used in genesis.proto and query.proto
            type: object
          type: array
        pagination:
          description: pagination defines an pagination for the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      type: object
    cosmos.authz.v1beta1.QueryGrantsResponse:
      description: >-
        QueryGrantsResponse is the response type for the Query/Authorizations
        RPC method.
      properties:
        grants:
          description: authorizations is a list of grants granted for grantee by granter.
          items:
            description: |-
              Grant gives permissions to execute
              the provide method with expiration time.
            properties:
              authorization:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
              expiration:
                format: date-time
                type: string
            type: object
          type: array
        pagination:
          description: pagination defines an pagination for the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      type: object
    cosmos.bank.v1beta1.DenomUnit:
      description: |-
        DenomUnit represents a struct that describes a given
        denomination unit of the basic token.
      properties:
        aliases:
          items:
            type: string
          title: aliases is a list of string aliases for the given denom
          type: array
        denom:
          description: >-
            denom represents the string name of the given denom unit (e.g
            uatom).
          type: string
        exponent:
          description: >-
            exponent represents power of 10 exponent that one must

            raise the base_denom to in order to equal the given DenomUnit's
            denom

            1 denom = 1^exponent base_denom

            (e.g. with a base_denom of uatom, one can create a DenomUnit of
            'atom' with

            exponent = 6, thus: 1 atom = 10^6 uatom).
          format: int64
          type: integer
      type: object
    cosmos.bank.v1beta1.Metadata:
      description: |-
        Metadata represents a struct that describes
        a basic token.
      properties:
        base:
          description: >-
            base represents the base denom (should be the DenomUnit with
            exponent = 0).
          type: string
        denom_units:
          items:
            description: |-
              DenomUnit represents a struct that describes a given
              denomination unit of the basic token.
            properties:
              aliases:
                items:
                  type: string
                title: aliases is a list of string aliases for the given denom
                type: array
              denom:
                description: >-
                  denom represents the string name of the given denom unit (e.g
                  uatom).
                type: string
              exponent:
                description: >-
                  exponent represents power of 10 exponent that one must

                  raise the base_denom to in order to equal the given
                  DenomUnit's denom

                  1 denom = 1^exponent base_denom

                  (e.g. with a base_denom of uatom, one can create a DenomUnit
                  of 'atom' with

                  exponent = 6, thus: 1 atom = 10^6 uatom).
                format: int64
                type: integer
            type: object
          title: denom_units represents the list of DenomUnit's for a given coin
          type: array
        description:
          type: string
        display:
          description: |-
            display indicates the suggested denom that should be
            displayed in clients.
          type: string
        name:
          description: 'Since: cosmos-sdk 0.43'
          title: 'name defines the name of the token (eg: Cosmos Atom)'
          type: string
        symbol:
          description: >-
            symbol is the token symbol usually shown on exchanges (eg: ATOM).
            This can

            be the same as the display.


            Since: cosmos-sdk 0.43
          type: string
      type: object
    cosmos.bank.v1beta1.Params:
      description: Params defines the parameters for the bank module.
      properties:
        default_send_enabled:
          type: boolean
        send_enabled:
          items:
            description: >-
              SendEnabled maps coin denom to a send_enabled status (whether a
              denom is

              sendable).
            properties:
              denom:
                type: string
              enabled:
                type: boolean
            type: object
          type: array
      type: object
    cosmos.bank.v1beta1.QueryAllBalancesResponse:
      description: >-
        QueryAllBalancesResponse is the response type for the Query/AllBalances
        RPC

        method.
      properties:
        balances:
          description: balances is the balances of all the coins.
          items:
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          type: array
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      type: object
    cosmos.bank.v1beta1.QueryBalanceResponse:
      description: >-
        QueryBalanceResponse is the response type for the Query/Balance RPC
        method.
      properties:
        balance:
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
      type: object
    cosmos.bank.v1beta1.QueryDenomMetadataResponse:
      description: >-
        QueryDenomMetadataResponse is the response type for the
        Query/DenomMetadata RPC

        method.
      properties:
        metadata:
          description: |-
            Metadata represents a struct that describes
            a basic token.
          properties:
            base:
              description: >-
                base represents the base denom (should be the DenomUnit with
                exponent = 0).
              type: string
            denom_units:
              items:
                description: |-
                  DenomUnit represents a struct that describes a given
                  denomination unit of the basic token.
                properties:
                  aliases:
                    items:
                      type: string
                    title: aliases is a list of string aliases for the given denom
                    type: array
                  denom:
                    description: >-
                      denom represents the string name of the given denom unit
                      (e.g uatom).
                    type: string
                  exponent:
                    description: >-
                      exponent represents power of 10 exponent that one must

                      raise the base_denom to in order to equal the given
                      DenomUnit's denom

                      1 denom = 1^exponent base_denom

                      (e.g. with a base_denom of uatom, one can create a
                      DenomUnit of 'atom' with

                      exponent = 6, thus: 1 atom = 10^6 uatom).
                    format: int64
                    type: integer
                type: object
              title: denom_units represents the list of DenomUnit's for a given coin
              type: array
            description:
              type: string
            display:
              description: |-
                display indicates the suggested denom that should be
                displayed in clients.
              type: string
            name:
              description: 'Since: cosmos-sdk 0.43'
              title: 'name defines the name of the token (eg: Cosmos Atom)'
              type: string
            symbol:
              description: >-
                symbol is the token symbol usually shown on exchanges (eg:
                ATOM). This can

                be the same as the display.


                Since: cosmos-sdk 0.43
              type: string
          type: object
      type: object
    cosmos.bank.v1beta1.QueryDenomsMetadataResponse:
      description: >-
        QueryDenomsMetadataResponse is the response type for the
        Query/DenomsMetadata RPC

        method.
      properties:
        metadatas:
          description: >-
            metadata provides the client information for all the registered
            tokens.
          items:
            description: |-
              Metadata represents a struct that describes
              a basic token.
            properties:
              base:
                description: >-
                  base represents the base denom (should be the DenomUnit with
                  exponent = 0).
                type: string
              denom_units:
                items:
                  description: |-
                    DenomUnit represents a struct that describes a given
                    denomination unit of the basic token.
                  properties:
                    aliases:
                      items:
                        type: string
                      title: aliases is a list of string aliases for the given denom
                      type: array
                    denom:
                      description: >-
                        denom represents the string name of the given denom unit
                        (e.g uatom).
                      type: string
                    exponent:
                      description: >-
                        exponent represents power of 10 exponent that one must

                        raise the base_denom to in order to equal the given
                        DenomUnit's denom

                        1 denom = 1^exponent base_denom

                        (e.g. with a base_denom of uatom, one can create a
                        DenomUnit of 'atom' with

                        exponent = 6, thus: 1 atom = 10^6 uatom).
                      format: int64
                      type: integer
                  type: object
                title: >-
                  denom_units represents the list of DenomUnit's for a given
                  coin
                type: array
              description:
                type: string
              display:
                description: |-
                  display indicates the suggested denom that should be
                  displayed in clients.
                type: string
              name:
                description: 'Since: cosmos-sdk 0.43'
                title: 'name defines the name of the token (eg: Cosmos Atom)'
                type: string
              symbol:
                description: >-
                  symbol is the token symbol usually shown on exchanges (eg:
                  ATOM). This can

                  be the same as the display.


                  Since: cosmos-sdk 0.43
                type: string
            type: object
          type: array
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      type: object
    cosmos.bank.v1beta1.QueryParamsResponse:
      description: >-
        QueryParamsResponse defines the response type for querying x/bank
        parameters.
      properties:
        params:
          description: Params defines the parameters for the bank module.
          properties:
            default_send_enabled:
              type: boolean
            send_enabled:
              items:
                description: >-
                  SendEnabled maps coin denom to a send_enabled status (whether
                  a denom is

                  sendable).
                properties:
                  denom:
                    type: string
                  enabled:
                    type: boolean
                type: object
              type: array
          type: object
      type: object
    cosmos.bank.v1beta1.QuerySpendableBalancesResponse:
      description: >-
        QuerySpendableBalancesResponse defines the gRPC response structure for
        querying

        an account's spendable balances.
      properties:
        balances:
          description: balances is the spendable balances of all the coins.
          items:
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          type: array
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      type: object
    cosmos.bank.v1beta1.QuerySupplyOfResponse:
      description: >-
        QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC
        method.
      properties:
        amount:
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
      type: object
    cosmos.bank.v1beta1.QueryTotalSupplyResponse:
      properties:
        pagination:
          description: |-
            pagination defines the pagination in the response.

            Since: cosmos-sdk 0.43
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
        supply:
          items:
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          title: supply is the supply of the coins
          type: array
      title: >-
        QueryTotalSupplyResponse is the response type for the Query/TotalSupply
        RPC

        method
      type: object
    cosmos.bank.v1beta1.SendEnabled:
      description: |-
        SendEnabled maps coin denom to a send_enabled status (whether a denom is
        sendable).
      properties:
        denom:
          type: string
        enabled:
          type: boolean
      type: object
    cosmos.base.abci.v1beta1.ABCIMessageLog:
      description: >-
        ABCIMessageLog defines a structure containing an indexed tx ABCI message
        log.
      properties:
        events:
          description: >-
            Events contains a slice of Event objects that were emitted during
            some

            execution.
          items:
            description: >-
              StringEvent defines en Event object wrapper where all the
              attributes

              contain key/value pairs that are strings instead of raw bytes.
            properties:
              attributes:
                items:
                  description: >-
                    Attribute defines an attribute wrapper where the key and
                    value are

                    strings instead of raw bytes.
                  properties:
                    key:
                      type: string
                    value:
                      type: string
                  type: object
                type: array
              type:
                type: string
            type: object
          type: array
        log:
          type: string
        msg_index:
          format: int64
          type: integer
      type: object
    cosmos.base.abci.v1beta1.Attribute:
      description: |-
        Attribute defines an attribute wrapper where the key and value are
        strings instead of raw bytes.
      properties:
        key:
          type: string
        value:
          type: string
      type: object
    cosmos.base.abci.v1beta1.GasInfo:
      description: GasInfo defines tx execution gas context.
      properties:
        gas_used:
          description: GasUsed is the amount of gas actually consumed.
          format: uint64
          type: string
        gas_wanted:
          description: GasWanted is the maximum units of work we allow this tx to perform.
          format: uint64
          type: string
      type: object
    cosmos.base.abci.v1beta1.Result:
      description: Result is the union of ResponseFormat and ResponseCheckTx.
      properties:
        data:
          description: >-
            Data is any data returned from message or handler execution. It MUST
            be

            length prefixed in order to separate data from multiple message
            executions.
          format: byte
          type: string
        events:
          description: >-
            Events contains a slice of Event objects that were emitted during
            message

            or handler execution.
          items:
            description: >-
              Event allows application developers to attach additional
              information to

              ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
              ResponseDeliverTx.

              Later, transactions may be queried using these events.
            properties:
              attributes:
                items:
                  description: >-
                    EventAttribute is a single key-value pair, associated with
                    an event.
                  properties:
                    index:
                      type: boolean
                    key:
                      format: byte
                      type: string
                    value:
                      format: byte
                      type: string
                  type: object
                type: array
              type:
                type: string
            type: object
          type: array
        log:
          description: Log contains the log information from message or handler execution.
          type: string
      type: object
    cosmos.base.abci.v1beta1.StringEvent:
      description: |-
        StringEvent defines en Event object wrapper where all the attributes
        contain key/value pairs that are strings instead of raw bytes.
      properties:
        attributes:
          items:
            description: |-
              Attribute defines an attribute wrapper where the key and value are
              strings instead of raw bytes.
            properties:
              key:
                type: string
              value:
                type: string
            type: object
          type: array
        type:
          type: string
      type: object
    cosmos.base.abci.v1beta1.TxResponse:
      description: >-
        TxResponse defines a structure containing relevant tx data and metadata.
        The

        tags are stringified and the log is JSON decoded.
      properties:
        code:
          description: Response code.
          format: int64
          type: integer
        codespace:
          title: Namespace for the Code
          type: string
        data:
          description: Result bytes, if any.
          type: string
        events:
          description: >-
            Events defines all the events emitted by processing a transaction.
            Note,

            these events include those emitted by processing all the messages
            and those

            emitted from the ante handler. Whereas Logs contains the events,
            with

            additional metadata, emitted only by processing the messages.


            Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
          items:
            description: >-
              Event allows application developers to attach additional
              information to

              ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
              ResponseDeliverTx.

              Later, transactions may be queried using these events.
            properties:
              attributes:
                items:
                  description: >-
                    EventAttribute is a single key-value pair, associated with
                    an event.
                  properties:
                    index:
                      type: boolean
                    key:
                      format: byte
                      type: string
                    value:
                      format: byte
                      type: string
                  type: object
                type: array
              type:
                type: string
            type: object
          type: array
        gas_used:
          description: Amount of gas consumed by transaction.
          format: int64
          type: string
        gas_wanted:
          description: Amount of gas requested for transaction.
          format: int64
          type: string
        height:
          format: int64
          title: The block height
          type: string
        info:
          description: Additional information. May be non-deterministic.
          type: string
        logs:
          description: >-
            The output of the application's logger (typed). May be
            non-deterministic.
          items:
            description: >-
              ABCIMessageLog defines a structure containing an indexed tx ABCI
              message log.
            properties:
              events:
                description: >-
                  Events contains a slice of Event objects that were emitted
                  during some

                  execution.
                items:
                  description: >-
                    StringEvent defines en Event object wrapper where all the
                    attributes

                    contain key/value pairs that are strings instead of raw
                    bytes.
                  properties:
                    attributes:
                      items:
                        description: >-
                          Attribute defines an attribute wrapper where the key
                          and value are

                          strings instead of raw bytes.
                        properties:
                          key:
                            type: string
                          value:
                            type: string
                        type: object
                      type: array
                    type:
                      type: string
                  type: object
                type: array
              log:
                type: string
              msg_index:
                format: int64
                type: integer
            type: object
          type: array
        raw_log:
          description: |-
            The output of the application's logger (raw string). May be
            non-deterministic.
          type: string
        timestamp:
          description: >-
            Time of the previous block. For heights > 1, it's the weighted
            median of

            the timestamps of the valid votes in the block.LastCommit. For
            height == 1,

            it's genesis time.
          type: string
        tx:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          type: object
        txhash:
          description: The transaction hash.
          type: string
      type: object
    cosmos.base.node.v1beta1.ConfigResponse:
      description: ConfigResponse defines the response structure for the Config gRPC query.
      properties:
        minimum_gas_price:
          type: string
      type: object
    cosmos.base.query.v1beta1.PageRequest:
      description: |-
        message SomeRequest {
                 Foo some_parameter = 1;
                 PageRequest pagination = 2;
         }
      properties:
        count_total:
          description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          type: boolean
        key:
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
          type: string
        limit:
          description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          format: uint64
          type: string
        offset:
          description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          format: uint64
          type: string
        reverse:
          description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          type: boolean
      title: |-
        PageRequest is to be embedded in gRPC request messages for efficient
        pagination. Ex:
      type: object
    cosmos.base.query.v1beta1.PageResponse:
      description: |-
        PageResponse is to be embedded in gRPC response messages where the
        corresponding request message has used PageRequest.

         message SomeResponse {
                 repeated Bar results = 1;
                 PageResponse page = 2;
         }
      properties:
        next_key:
          format: byte
          title: |-
            next_key is the key to be passed to PageRequest.key to
            query the next page most efficiently
          type: string
        total:
          format: uint64
          title: >-
            total is total number of results available if
            PageRequest.count_total

            was set, its value is undefined otherwise
          type: string
      type: object
    cosmos.base.tendermint.v1beta1.GetBlockByHeightResponse:
      description: >-
        GetBlockByHeightResponse is the response type for the
        Query/GetBlockByHeight RPC method.
      properties:
        block:
          properties:
            data:
              properties:
                txs:
                  description: >-
                    Txs that will be applied by state @ block.Height+1.

                    NOTE: not all txs here are valid.  We're just agreeing on
                    the order first.

                    This means that block.AppHash does not include these txs.
                  items:
                    format: byte
                    type: string
                  type: array
              title: Data contains the set of transactions included in the block
              type: object
            evidence:
              properties:
                evidence:
                  items:
                    properties:
                      duplicate_vote_evidence:
                        description: >-
                          DuplicateVoteEvidence contains evidence of a validator
                          signed two conflicting votes.
                        properties:
                          timestamp:
                            format: date-time
                            type: string
                          total_voting_power:
                            format: int64
                            type: string
                          validator_power:
                            format: int64
                            type: string
                          vote_a:
                            description: >-
                              Vote represents a prevote, precommit, or commit
                              vote from validators for

                              consensus.
                            properties:
                              block_id:
                                properties:
                                  hash:
                                    format: byte
                                    type: string
                                  part_set_header:
                                    properties:
                                      hash:
                                        format: byte
                                        type: string
                                      total:
                                        format: int64
                                        type: integer
                                    title: PartsetHeader
                                    type: object
                                title: BlockID
                                type: object
                              height:
                                format: int64
                                type: string
                              round:
                                format: int32
                                type: integer
                              signature:
                                format: byte
                                type: string
                              timestamp:
                                format: date-time
                                type: string
                              type:
                                default: SIGNED_MSG_TYPE_UNKNOWN
                                description: >-
                                  SignedMsgType is a type of signed message in
                                  the consensus.

                                   - SIGNED_MSG_TYPE_PREVOTE: Votes
                                   - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                enum:
                                  - SIGNED_MSG_TYPE_UNKNOWN
                                  - SIGNED_MSG_TYPE_PREVOTE
                                  - SIGNED_MSG_TYPE_PRECOMMIT
                                  - SIGNED_MSG_TYPE_PROPOSAL
                                type: string
                              validator_address:
                                format: byte
                                type: string
                              validator_index:
                                format: int32
                                type: integer
                            type: object
                          vote_b:
                            description: >-
                              Vote represents a prevote, precommit, or commit
                              vote from validators for

                              consensus.
                            properties:
                              block_id:
                                properties:
                                  hash:
                                    format: byte
                                    type: string
                                  part_set_header:
                                    properties:
                                      hash:
                                        format: byte
                                        type: string
                                      total:
                                        format: int64
                                        type: integer
                                    title: PartsetHeader
                                    type: object
                                title: BlockID
                                type: object
                              height:
                                format: int64
                                type: string
                              round:
                                format: int32
                                type: integer
                              signature:
                                format: byte
                                type: string
                              timestamp:
                                format: date-time
                                type: string
                              type:
                                default: SIGNED_MSG_TYPE_UNKNOWN
                                description: >-
                                  SignedMsgType is a type of signed message in
                                  the consensus.

                                   - SIGNED_MSG_TYPE_PREVOTE: Votes
                                   - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                enum:
                                  - SIGNED_MSG_TYPE_UNKNOWN
                                  - SIGNED_MSG_TYPE_PREVOTE
                                  - SIGNED_MSG_TYPE_PRECOMMIT
                                  - SIGNED_MSG_TYPE_PROPOSAL
                                type: string
                              validator_address:
                                format: byte
                                type: string
                              validator_index:
                                format: int32
                                type: integer
                            type: object
                        type: object
                      light_client_attack_evidence:
                        description: >-
                          LightClientAttackEvidence contains evidence of a set
                          of validators attempting to mislead a light client.
                        properties:
                          byzantine_validators:
                            items:
                              properties:
                                address:
                                  format: byte
                                  type: string
                                proposer_priority:
                                  format: int64
                                  type: string
                                pub_key:
                                  properties:
                                    ed25519:
                                      format: byte
                                      type: string
                                    secp256k1:
                                      format: byte
                                      type: string
                                  title: >-
                                    PublicKey defines the keys available for use
                                    with Validators
                                  type: object
                                voting_power:
                                  format: int64
                                  type: string
                              type: object
                            type: array
                          common_height:
                            format: int64
                            type: string
                          conflicting_block:
                            properties:
                              signed_header:
                                properties:
                                  commit:
                                    description: >-
                                      Commit contains the evidence that a block
                                      was committed by a set of validators.
                                    properties:
                                      block_id:
                                        properties:
                                          hash:
                                            format: byte
                                            type: string
                                          part_set_header:
                                            properties:
                                              hash:
                                                format: byte
                                                type: string
                                              total:
                                                format: int64
                                                type: integer
                                            title: PartsetHeader
                                            type: object
                                        title: BlockID
                                        type: object
                                      height:
                                        format: int64
                                        type: string
                                      round:
                                        format: int32
                                        type: integer
                                      signatures:
                                        items:
                                          description: >-
                                            CommitSig is a part of the Vote included
                                            in a Commit.
                                          properties:
                                            block_id_flag:
                                              default: BLOCK_ID_FLAG_UNKNOWN
                                              enum:
                                                - BLOCK_ID_FLAG_UNKNOWN
                                                - BLOCK_ID_FLAG_ABSENT
                                                - BLOCK_ID_FLAG_COMMIT
                                                - BLOCK_ID_FLAG_NIL
                                              title: >-
                                                BlockIdFlag indicates which BlcokID the
                                                signature is for
                                              type: string
                                            signature:
                                              format: byte
                                              type: string
                                            timestamp:
                                              format: date-time
                                              type: string
                                            validator_address:
                                              format: byte
                                              type: string
                                          type: object
                                        type: array
                                    type: object
                                  header:
                                    description: >-
                                      Header defines the structure of a block
                                      header.
                                    properties:
                                      app_hash:
                                        format: byte
                                        type: string
                                      chain_id:
                                        type: string
                                      consensus_hash:
                                        format: byte
                                        type: string
                                      data_hash:
                                        format: byte
                                        type: string
                                      evidence_hash:
                                        format: byte
                                        title: consensus info
                                        type: string
                                      height:
                                        format: int64
                                        type: string
                                      last_block_id:
                                        properties:
                                          hash:
                                            format: byte
                                            type: string
                                          part_set_header:
                                            properties:
                                              hash:
                                                format: byte
                                                type: string
                                              total:
                                                format: int64
                                                type: integer
                                            title: PartsetHeader
                                            type: object
                                        title: prev block info
                                        type: object
                                      last_commit_hash:
                                        format: byte
                                        title: hashes of block data
                                        type: string
                                      last_results_hash:
                                        format: byte
                                        type: string
                                      next_validators_hash:
                                        format: byte
                                        type: string
                                      proposer_address:
                                        format: byte
                                        type: string
                                      time:
                                        format: date-time
                                        type: string
                                      validators_hash:
                                        format: byte
                                        title: >-
                                          hashes from the app output from the prev
                                          block
                                        type: string
                                      version:
                                        description: >-
                                          Consensus captures the consensus rules
                                          for processing a block in the
                                          blockchain,

                                          including all blockchain data structures
                                          and the rules of the application's

                                          state transition machine.
                                        properties:
                                          app:
                                            format: uint64
                                            type: string
                                          block:
                                            format: uint64
                                            type: string
                                        title: basic block info
                                        type: object
                                    type: object
                                type: object
                              validator_set:
                                properties:
                                  proposer:
                                    properties:
                                      address:
                                        format: byte
                                        type: string
                                      proposer_priority:
                                        format: int64
                                        type: string
                                      pub_key:
                                        properties:
                                          ed25519:
                                            format: byte
                                            type: string
                                          secp256k1:
                                            format: byte
                                            type: string
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                        type: object
                                      voting_power:
                                        format: int64
                                        type: string
                                    type: object
                                  total_voting_power:
                                    format: int64
                                    type: string
                                  validators:
                                    items:
                                      properties:
                                        address:
                                          format: byte
                                          type: string
                                        proposer_priority:
                                          format: int64
                                          type: string
                                        pub_key:
                                          properties:
                                            ed25519:
                                              format: byte
                                              type: string
                                            secp256k1:
                                              format: byte
                                              type: string
                                          title: >-
                                            PublicKey defines the keys available for
                                            use with Validators
                                          type: object
                                        voting_power:
                                          format: int64
                                          type: string
                                      type: object
                                    type: array
                                type: object
                            type: object
                          timestamp:
                            format: date-time
                            type: string
                          total_voting_power:
                            format: int64
                            type: string
                        type: object
                    type: object
                  type: array
              type: object
            header:
              description: Header defines the structure of a block header.
              properties:
                app_hash:
                  format: byte
                  type: string
                chain_id:
                  type: string
                consensus_hash:
                  format: byte
                  type: string
                data_hash:
                  format: byte
                  type: string
                evidence_hash:
                  format: byte
                  title: consensus info
                  type: string
                height:
                  format: int64
                  type: string
                last_block_id:
                  properties:
                    hash:
                      format: byte
                      type: string
                    part_set_header:
                      properties:
                        hash:
                          format: byte
                          type: string
                        total:
                          format: int64
                          type: integer
                      title: PartsetHeader
                      type: object
                  title: prev block info
                  type: object
                last_commit_hash:
                  format: byte
                  title: hashes of block data
                  type: string
                last_results_hash:
                  format: byte
                  type: string
                next_validators_hash:
                  format: byte
                  type: string
                proposer_address:
                  format: byte
                  type: string
                time:
                  format: date-time
                  type: string
                validators_hash:
                  format: byte
                  title: hashes from the app output from the prev block
                  type: string
                version:
                  description: >-
                    Consensus captures the consensus rules for processing a
                    block in the blockchain,

                    including all blockchain data structures and the rules of
                    the application's

                    state transition machine.
                  properties:
                    app:
                      format: uint64
                      type: string
                    block:
                      format: uint64
                      type: string
                  title: basic block info
                  type: object
              type: object
            last_commit:
              description: >-
                Commit contains the evidence that a block was committed by a set
                of validators.
              properties:
                block_id:
                  properties:
                    hash:
                      format: byte
                      type: string
                    part_set_header:
                      properties:
                        hash:
                          format: byte
                          type: string
                        total:
                          format: int64
                          type: integer
                      title: PartsetHeader
                      type: object
                  title: BlockID
                  type: object
                height:
                  format: int64
                  type: string
                round:
                  format: int32
                  type: integer
                signatures:
                  items:
                    description: CommitSig is a part of the Vote included in a Commit.
                    properties:
                      block_id_flag:
                        default: BLOCK_ID_FLAG_UNKNOWN
                        enum:
                          - BLOCK_ID_FLAG_UNKNOWN
                          - BLOCK_ID_FLAG_ABSENT
                          - BLOCK_ID_FLAG_COMMIT
                          - BLOCK_ID_FLAG_NIL
                        title: >-
                          BlockIdFlag indicates which BlcokID the signature is
                          for
                        type: string
                      signature:
                        format: byte
                        type: string
                      timestamp:
                        format: date-time
                        type: string
                      validator_address:
                        format: byte
                        type: string
                    type: object
                  type: array
              type: object
          type: object
        block_id:
          properties:
            hash:
              format: byte
              type: string
            part_set_header:
              properties:
                hash:
                  format: byte
                  type: string
                total:
                  format: int64
                  type: integer
              title: PartsetHeader
              type: object
          title: BlockID
          type: object
      type: object
    cosmos.base.tendermint.v1beta1.GetLatestBlockResponse:
      description: >-
        GetLatestBlockResponse is the response type for the Query/GetLatestBlock
        RPC method.
      properties:
        block:
          properties:
            data:
              properties:
                txs:
                  description: >-
                    Txs that will be applied by state @ block.Height+1.

                    NOTE: not all txs here are valid.  We're just agreeing on
                    the order first.

                    This means that block.AppHash does not include these txs.
                  items:
                    format: byte
                    type: string
                  type: array
              title: Data contains the set of transactions included in the block
              type: object
            evidence:
              properties:
                evidence:
                  items:
                    properties:
                      duplicate_vote_evidence:
                        description: >-
                          DuplicateVoteEvidence contains evidence of a validator
                          signed two conflicting votes.
                        properties:
                          timestamp:
                            format: date-time
                            type: string
                          total_voting_power:
                            format: int64
                            type: string
                          validator_power:
                            format: int64
                            type: string
                          vote_a:
                            description: >-
                              Vote represents a prevote, precommit, or commit
                              vote from validators for

                              consensus.
                            properties:
                              block_id:
                                properties:
                                  hash:
                                    format: byte
                                    type: string
                                  part_set_header:
                                    properties:
                                      hash:
                                        format: byte
                                        type: string
                                      total:
                                        format: int64
                                        type: integer
                                    title: PartsetHeader
                                    type: object
                                title: BlockID
                                type: object
                              height:
                                format: int64
                                type: string
                              round:
                                format: int32
                                type: integer
                              signature:
                                format: byte
                                type: string
                              timestamp:
                                format: date-time
                                type: string
                              type:
                                default: SIGNED_MSG_TYPE_UNKNOWN
                                description: >-
                                  SignedMsgType is a type of signed message in
                                  the consensus.

                                   - SIGNED_MSG_TYPE_PREVOTE: Votes
                                   - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                enum:
                                  - SIGNED_MSG_TYPE_UNKNOWN
                                  - SIGNED_MSG_TYPE_PREVOTE
                                  - SIGNED_MSG_TYPE_PRECOMMIT
                                  - SIGNED_MSG_TYPE_PROPOSAL
                                type: string
                              validator_address:
                                format: byte
                                type: string
                              validator_index:
                                format: int32
                                type: integer
                            type: object
                          vote_b:
                            description: >-
                              Vote represents a prevote, precommit, or commit
                              vote from validators for

                              consensus.
                            properties:
                              block_id:
                                properties:
                                  hash:
                                    format: byte
                                    type: string
                                  part_set_header:
                                    properties:
                                      hash:
                                        format: byte
                                        type: string
                                      total:
                                        format: int64
                                        type: integer
                                    title: PartsetHeader
                                    type: object
                                title: BlockID
                                type: object
                              height:
                                format: int64
                                type: string
                              round:
                                format: int32
                                type: integer
                              signature:
                                format: byte
                                type: string
                              timestamp:
                                format: date-time
                                type: string
                              type:
                                default: SIGNED_MSG_TYPE_UNKNOWN
                                description: >-
                                  SignedMsgType is a type of signed message in
                                  the consensus.

                                   - SIGNED_MSG_TYPE_PREVOTE: Votes
                                   - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                enum:
                                  - SIGNED_MSG_TYPE_UNKNOWN
                                  - SIGNED_MSG_TYPE_PREVOTE
                                  - SIGNED_MSG_TYPE_PRECOMMIT
                                  - SIGNED_MSG_TYPE_PROPOSAL
                                type: string
                              validator_address:
                                format: byte
                                type: string
                              validator_index:
                                format: int32
                                type: integer
                            type: object
                        type: object
                      light_client_attack_evidence:
                        description: >-
                          LightClientAttackEvidence contains evidence of a set
                          of validators attempting to mislead a light client.
                        properties:
                          byzantine_validators:
                            items:
                              properties:
                                address:
                                  format: byte
                                  type: string
                                proposer_priority:
                                  format: int64
                                  type: string
                                pub_key:
                                  properties:
                                    ed25519:
                                      format: byte
                                      type: string
                                    secp256k1:
                                      format: byte
                                      type: string
                                  title: >-
                                    PublicKey defines the keys available for use
                                    with Validators
                                  type: object
                                voting_power:
                                  format: int64
                                  type: string
                              type: object
                            type: array
                          common_height:
                            format: int64
                            type: string
                          conflicting_block:
                            properties:
                              signed_header:
                                properties:
                                  commit:
                                    description: >-
                                      Commit contains the evidence that a block
                                      was committed by a set of validators.
                                    properties:
                                      block_id:
                                        properties:
                                          hash:
                                            format: byte
                                            type: string
                                          part_set_header:
                                            properties:
                                              hash:
                                                format: byte
                                                type: string
                                              total:
                                                format: int64
                                                type: integer
                                            title: PartsetHeader
                                            type: object
                                        title: BlockID
                                        type: object
                                      height:
                                        format: int64
                                        type: string
                                      round:
                                        format: int32
                                        type: integer
                                      signatures:
                                        items:
                                          description: >-
                                            CommitSig is a part of the Vote included
                                            in a Commit.
                                          properties:
                                            block_id_flag:
                                              default: BLOCK_ID_FLAG_UNKNOWN
                                              enum:
                                                - BLOCK_ID_FLAG_UNKNOWN
                                                - BLOCK_ID_FLAG_ABSENT
                                                - BLOCK_ID_FLAG_COMMIT
                                                - BLOCK_ID_FLAG_NIL
                                              title: >-
                                                BlockIdFlag indicates which BlcokID the
                                                signature is for
                                              type: string
                                            signature:
                                              format: byte
                                              type: string
                                            timestamp:
                                              format: date-time
                                              type: string
                                            validator_address:
                                              format: byte
                                              type: string
                                          type: object
                                        type: array
                                    type: object
                                  header:
                                    description: >-
                                      Header defines the structure of a block
                                      header.
                                    properties:
                                      app_hash:
                                        format: byte
                                        type: string
                                      chain_id:
                                        type: string
                                      consensus_hash:
                                        format: byte
                                        type: string
                                      data_hash:
                                        format: byte
                                        type: string
                                      evidence_hash:
                                        format: byte
                                        title: consensus info
                                        type: string
                                      height:
                                        format: int64
                                        type: string
                                      last_block_id:
                                        properties:
                                          hash:
                                            format: byte
                                            type: string
                                          part_set_header:
                                            properties:
                                              hash:
                                                format: byte
                                                type: string
                                              total:
                                                format: int64
                                                type: integer
                                            title: PartsetHeader
                                            type: object
                                        title: prev block info
                                        type: object
                                      last_commit_hash:
                                        format: byte
                                        title: hashes of block data
                                        type: string
                                      last_results_hash:
                                        format: byte
                                        type: string
                                      next_validators_hash:
                                        format: byte
                                        type: string
                                      proposer_address:
                                        format: byte
                                        type: string
                                      time:
                                        format: date-time
                                        type: string
                                      validators_hash:
                                        format: byte
                                        title: >-
                                          hashes from the app output from the prev
                                          block
                                        type: string
                                      version:
                                        description: >-
                                          Consensus captures the consensus rules
                                          for processing a block in the
                                          blockchain,

                                          including all blockchain data structures
                                          and the rules of the application's

                                          state transition machine.
                                        properties:
                                          app:
                                            format: uint64
                                            type: string
                                          block:
                                            format: uint64
                                            type: string
                                        title: basic block info
                                        type: object
                                    type: object
                                type: object
                              validator_set:
                                properties:
                                  proposer:
                                    properties:
                                      address:
                                        format: byte
                                        type: string
                                      proposer_priority:
                                        format: int64
                                        type: string
                                      pub_key:
                                        properties:
                                          ed25519:
                                            format: byte
                                            type: string
                                          secp256k1:
                                            format: byte
                                            type: string
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                        type: object
                                      voting_power:
                                        format: int64
                                        type: string
                                    type: object
                                  total_voting_power:
                                    format: int64
                                    type: string
                                  validators:
                                    items:
                                      properties:
                                        address:
                                          format: byte
                                          type: string
                                        proposer_priority:
                                          format: int64
                                          type: string
                                        pub_key:
                                          properties:
                                            ed25519:
                                              format: byte
                                              type: string
                                            secp256k1:
                                              format: byte
                                              type: string
                                          title: >-
                                            PublicKey defines the keys available for
                                            use with Validators
                                          type: object
                                        voting_power:
                                          format: int64
                                          type: string
                                      type: object
                                    type: array
                                type: object
                            type: object
                          timestamp:
                            format: date-time
                            type: string
                          total_voting_power:
                            format: int64
                            type: string
                        type: object
                    type: object
                  type: array
              type: object
            header:
              description: Header defines the structure of a block header.
              properties:
                app_hash:
                  format: byte
                  type: string
                chain_id:
                  type: string
                consensus_hash:
                  format: byte
                  type: string
                data_hash:
                  format: byte
                  type: string
                evidence_hash:
                  format: byte
                  title: consensus info
                  type: string
                height:
                  format: int64
                  type: string
                last_block_id:
                  properties:
                    hash:
                      format: byte
                      type: string
                    part_set_header:
                      properties:
                        hash:
                          format: byte
                          type: string
                        total:
                          format: int64
                          type: integer
                      title: PartsetHeader
                      type: object
                  title: prev block info
                  type: object
                last_commit_hash:
                  format: byte
                  title: hashes of block data
                  type: string
                last_results_hash:
                  format: byte
                  type: string
                next_validators_hash:
                  format: byte
                  type: string
                proposer_address:
                  format: byte
                  type: string
                time:
                  format: date-time
                  type: string
                validators_hash:
                  format: byte
                  title: hashes from the app output from the prev block
                  type: string
                version:
                  description: >-
                    Consensus captures the consensus rules for processing a
                    block in the blockchain,

                    including all blockchain data structures and the rules of
                    the application's

                    state transition machine.
                  properties:
                    app:
                      format: uint64
                      type: string
                    block:
                      format: uint64
                      type: string
                  title: basic block info
                  type: object
              type: object
            last_commit:
              description: >-
                Commit contains the evidence that a block was committed by a set
                of validators.
              properties:
                block_id:
                  properties:
                    hash:
                      format: byte
                      type: string
                    part_set_header:
                      properties:
                        hash:
                          format: byte
                          type: string
                        total:
                          format: int64
                          type: integer
                      title: PartsetHeader
                      type: object
                  title: BlockID
                  type: object
                height:
                  format: int64
                  type: string
                round:
                  format: int32
                  type: integer
                signatures:
                  items:
                    description: CommitSig is a part of the Vote included in a Commit.
                    properties:
                      block_id_flag:
                        default: BLOCK_ID_FLAG_UNKNOWN
                        enum:
                          - BLOCK_ID_FLAG_UNKNOWN
                          - BLOCK_ID_FLAG_ABSENT
                          - BLOCK_ID_FLAG_COMMIT
                          - BLOCK_ID_FLAG_NIL
                        title: >-
                          BlockIdFlag indicates which BlcokID the signature is
                          for
                        type: string
                      signature:
                        format: byte
                        type: string
                      timestamp:
                        format: date-time
                        type: string
                      validator_address:
                        format: byte
                        type: string
                    type: object
                  type: array
              type: object
          type: object
        block_id:
          properties:
            hash:
              format: byte
              type: string
            part_set_header:
              properties:
                hash:
                  format: byte
                  type: string
                total:
                  format: int64
                  type: integer
              title: PartsetHeader
              type: object
          title: BlockID
          type: object
      type: object
    cosmos.base.tendermint.v1beta1.GetLatestValidatorSetResponse:
      description: >-
        GetLatestValidatorSetResponse is the response type for the
        Query/GetValidatorSetByHeight RPC method.
      properties:
        block_height:
          format: int64
          type: string
        pagination:
          description: pagination defines an pagination for the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
        validators:
          items:
            description: Validator is the type for the validator-set.
            properties:
              address:
                type: string
              proposer_priority:
                format: int64
                type: string
              pub_key:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
              voting_power:
                format: int64
                type: string
            type: object
          type: array
      type: object
    cosmos.base.tendermint.v1beta1.GetNodeInfoResponse:
      description: >-
        GetNodeInfoResponse is the request type for the Query/GetNodeInfo RPC
        method.
      properties:
        application_version:
          description: VersionInfo is the type for the GetNodeInfoResponse message.
          properties:
            app_name:
              type: string
            build_deps:
              items:
                properties:
                  path:
                    title: module path
                    type: string
                  sum:
                    title: checksum
                    type: string
                  version:
                    title: module version
                    type: string
                title: Module is the type for VersionInfo
                type: object
              type: array
            build_tags:
              type: string
            cosmos_sdk_version:
              title: 'Since: cosmos-sdk 0.43'
              type: string
            git_commit:
              type: string
            go_version:
              type: string
            name:
              type: string
            version:
              type: string
          type: object
        default_node_info:
          properties:
            channels:
              format: byte
              type: string
            default_node_id:
              type: string
            listen_addr:
              type: string
            moniker:
              type: string
            network:
              type: string
            other:
              properties:
                rpc_address:
                  type: string
                tx_index:
                  type: string
              type: object
            protocol_version:
              properties:
                app:
                  format: uint64
                  type: string
                block:
                  format: uint64
                  type: string
                p2p:
                  format: uint64
                  type: string
              type: object
            version:
              type: string
          type: object
      type: object
    cosmos.base.tendermint.v1beta1.GetSyncingResponse:
      description: >-
        GetSyncingResponse is the response type for the Query/GetSyncing RPC
        method.
      properties:
        syncing:
          type: boolean
      type: object
    cosmos.base.tendermint.v1beta1.GetValidatorSetByHeightResponse:
      description: >-
        GetValidatorSetByHeightResponse is the response type for the
        Query/GetValidatorSetByHeight RPC method.
      properties:
        block_height:
          format: int64
          type: string
        pagination:
          description: pagination defines an pagination for the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
        validators:
          items:
            description: Validator is the type for the validator-set.
            properties:
              address:
                type: string
              proposer_priority:
                format: int64
                type: string
              pub_key:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
              voting_power:
                format: int64
                type: string
            type: object
          type: array
      type: object
    cosmos.base.tendermint.v1beta1.Module:
      properties:
        path:
          title: module path
          type: string
        sum:
          title: checksum
          type: string
        version:
          title: module version
          type: string
      title: Module is the type for VersionInfo
      type: object
    cosmos.base.tendermint.v1beta1.Validator:
      description: Validator is the type for the validator-set.
      properties:
        address:
          type: string
        proposer_priority:
          format: int64
          type: string
        pub_key:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          type: object
        voting_power:
          format: int64
          type: string
      type: object
    cosmos.base.tendermint.v1beta1.VersionInfo:
      description: VersionInfo is the type for the GetNodeInfoResponse message.
      properties:
        app_name:
          type: string
        build_deps:
          items:
            properties:
              path:
                title: module path
                type: string
              sum:
                title: checksum
                type: string
              version:
                title: module version
                type: string
            title: Module is the type for VersionInfo
            type: object
          type: array
        build_tags:
          type: string
        cosmos_sdk_version:
          title: 'Since: cosmos-sdk 0.43'
          type: string
        git_commit:
          type: string
        go_version:
          type: string
        name:
          type: string
        version:
          type: string
      type: object
    cosmos.base.v1beta1.Coin:
      description: |-
        Coin defines a token with a denomination and an amount.

        NOTE: The amount field is an Int which implements the custom method
        signatures required by gogoproto.
      properties:
        amount:
          type: string
        denom:
          type: string
      type: object
    cosmos.base.v1beta1.DecCoin:
      description: |-
        DecCoin defines a token with a denomination and a decimal amount.

        NOTE: The amount field is an Dec which implements the custom method
        signatures required by gogoproto.
      properties:
        amount:
          type: string
        denom:
          type: string
      type: object
    cosmos.crypto.multisig.v1beta1.CompactBitArray:
      description: >-
        CompactBitArray is an implementation of a space efficient bit array.

        This is used to ensure that the encoded data takes up a minimal amount
        of

        space after proto encoding.

        This is not thread safe, and is not intended for concurrent usage.
      properties:
        elems:
          format: byte
          type: string
        extra_bits_stored:
          format: int64
          type: integer
      type: object
    cosmos.distribution.v1beta1.DelegationDelegatorReward:
      description: |-
        DelegationDelegatorReward represents the properties
        of a delegator's delegation reward.
      properties:
        reward:
          items:
            description: >-
              DecCoin defines a token with a denomination and a decimal amount.


              NOTE: The amount field is an Dec which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          type: array
        validator_address:
          type: string
      type: object
    cosmos.distribution.v1beta1.Params:
      description: Params defines the set of params for the distribution module.
      properties:
        base_proposer_reward:
          type: string
        bonus_proposer_reward:
          type: string
        community_tax:
          type: string
        withdraw_addr_enabled:
          type: boolean
      type: object
    cosmos.distribution.v1beta1.QueryCommunityPoolResponse:
      description: >-
        QueryCommunityPoolResponse is the response type for the
        Query/CommunityPool

        RPC method.
      properties:
        pool:
          description: pool defines community pool's coins.
          items:
            description: >-
              DecCoin defines a token with a denomination and a decimal amount.


              NOTE: The amount field is an Dec which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          type: array
      type: object
    cosmos.distribution.v1beta1.QueryDelegationRewardsResponse:
      description: |-
        QueryDelegationRewardsResponse is the response type for the
        Query/DelegationRewards RPC method.
      properties:
        rewards:
          description: rewards defines the rewards accrued by a delegation.
          items:
            description: >-
              DecCoin defines a token with a denomination and a decimal amount.


              NOTE: The amount field is an Dec which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          type: array
      type: object
    cosmos.distribution.v1beta1.QueryDelegationTotalRewardsResponse:
      description: |-
        QueryDelegationTotalRewardsResponse is the response type for the
        Query/DelegationTotalRewards RPC method.
      properties:
        rewards:
          description: rewards defines all the rewards accrued by a delegator.
          items:
            description: |-
              DelegationDelegatorReward represents the properties
              of a delegator's delegation reward.
            properties:
              reward:
                items:
                  description: >-
                    DecCoin defines a token with a denomination and a decimal
                    amount.


                    NOTE: The amount field is an Dec which implements the custom
                    method

                    signatures required by gogoproto.
                  properties:
                    amount:
                      type: string
                    denom:
                      type: string
                  type: object
                type: array
              validator_address:
                type: string
            type: object
          type: array
        total:
          description: total defines the sum of all the rewards.
          items:
            description: >-
              DecCoin defines a token with a denomination and a decimal amount.


              NOTE: The amount field is an Dec which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          type: array
      type: object
    cosmos.distribution.v1beta1.QueryDelegatorValidatorsResponse:
      description: |-
        QueryDelegatorValidatorsResponse is the response type for the
        Query/DelegatorValidators RPC method.
      properties:
        validators:
          description: validators defines the validators a delegator is delegating for.
          items:
            type: string
          type: array
      type: object
    cosmos.distribution.v1beta1.QueryDelegatorWithdrawAddressResponse:
      description: |-
        QueryDelegatorWithdrawAddressResponse is the response type for the
        Query/DelegatorWithdrawAddress RPC method.
      properties:
        withdraw_address:
          description: withdraw_address defines the delegator address to query for.
          type: string
      type: object
    cosmos.distribution.v1beta1.QueryParamsResponse:
      description: >-
        QueryParamsResponse is the response type for the Query/Params RPC
        method.
      properties:
        params:
          description: params defines the parameters of the module.
          properties:
            base_proposer_reward:
              type: string
            bonus_proposer_reward:
              type: string
            community_tax:
              type: string
            withdraw_addr_enabled:
              type: boolean
          type: object
      type: object
    cosmos.distribution.v1beta1.QueryValidatorCommissionResponse:
      properties:
        commission:
          description: commission defines the commision the validator received.
          properties:
            commission:
              items:
                description: >-
                  DecCoin defines a token with a denomination and a decimal
                  amount.


                  NOTE: The amount field is an Dec which implements the custom
                  method

                  signatures required by gogoproto.
                properties:
                  amount:
                    type: string
                  denom:
                    type: string
                type: object
              type: array
          type: object
      title: |-
        QueryValidatorCommissionResponse is the response type for the
        Query/ValidatorCommission RPC method
      type: object
    cosmos.distribution.v1beta1.QueryValidatorOutstandingRewardsResponse:
      description: |-
        QueryValidatorOutstandingRewardsResponse is the response type for the
        Query/ValidatorOutstandingRewards RPC method.
      properties:
        rewards:
          description: >-
            ValidatorOutstandingRewards represents outstanding (un-withdrawn)
            rewards

            for a validator inexpensive to track, allows simple sanity checks.
          properties:
            rewards:
              items:
                description: >-
                  DecCoin defines a token with a denomination and a decimal
                  amount.


                  NOTE: The amount field is an Dec which implements the custom
                  method

                  signatures required by gogoproto.
                properties:
                  amount:
                    type: string
                  denom:
                    type: string
                type: object
              type: array
          type: object
      type: object
    cosmos.distribution.v1beta1.QueryValidatorSlashesResponse:
      description: |-
        QueryValidatorSlashesResponse is the response type for the
        Query/ValidatorSlashes RPC method.
      properties:
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
        slashes:
          description: slashes defines the slashes the validator received.
          items:
            description: |-
              ValidatorSlashEvent represents a validator slash event.
              Height is implicit within the store key.
              This is needed to calculate appropriate amount of staking tokens
              for delegations which are withdrawn after a slash has occurred.
            properties:
              fraction:
                type: string
              validator_period:
                format: uint64
                type: string
            type: object
          type: array
      type: object
    cosmos.distribution.v1beta1.ValidatorAccumulatedCommission:
      description: |-
        ValidatorAccumulatedCommission represents accumulated commission
        for a validator kept as a running counter, can be withdrawn at any time.
      properties:
        commission:
          items:
            description: >-
              DecCoin defines a token with a denomination and a decimal amount.


              NOTE: The amount field is an Dec which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          type: array
      type: object
    cosmos.distribution.v1beta1.ValidatorOutstandingRewards:
      description: >-
        ValidatorOutstandingRewards represents outstanding (un-withdrawn)
        rewards

        for a validator inexpensive to track, allows simple sanity checks.
      properties:
        rewards:
          items:
            description: >-
              DecCoin defines a token with a denomination and a decimal amount.


              NOTE: The amount field is an Dec which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          type: array
      type: object
    cosmos.distribution.v1beta1.ValidatorSlashEvent:
      description: |-
        ValidatorSlashEvent represents a validator slash event.
        Height is implicit within the store key.
        This is needed to calculate appropriate amount of staking tokens
        for delegations which are withdrawn after a slash has occurred.
      properties:
        fraction:
          type: string
        validator_period:
          format: uint64
          type: string
      type: object
    cosmos.evidence.v1beta1.QueryAllEvidenceResponse:
      description: >-
        QueryAllEvidenceResponse is the response type for the Query/AllEvidence
        RPC

        method.
      properties:
        evidence:
          description: evidence returns all evidences.
          items:
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            properties:
              type_url:
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
                type: string
              value:
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
                format: byte
                type: string
            type: object
          type: array
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      type: object
    cosmos.evidence.v1beta1.QueryEvidenceResponse:
      description: >-
        QueryEvidenceResponse is the response type for the Query/Evidence RPC
        method.
      properties:
        evidence:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          type: object
      type: object
    cosmos.feegrant.v1beta1.Grant:
      properties:
        allowance:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          type: object
        grantee:
          description: >-
            grantee is the address of the user being granted an allowance of
            another user's funds.
          type: string
        granter:
          description: >-
            granter is the address of the user granting an allowance of their
            funds.
          type: string
      title: Grant is stored in the KVStore to record a grant with full context
      type: object
    cosmos.feegrant.v1beta1.QueryAllowanceResponse:
      description: >-
        QueryAllowanceResponse is the response type for the Query/Allowance RPC
        method.
      properties:
        allowance:
          description: allowance is a allowance granted for grantee by granter.
          properties:
            allowance:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
            grantee:
              description: >-
                grantee is the address of the user being granted an allowance of
                another user's funds.
              type: string
            granter:
              description: >-
                granter is the address of the user granting an allowance of
                their funds.
              type: string
          title: Grant is stored in the KVStore to record a grant with full context
          type: object
      type: object
    cosmos.feegrant.v1beta1.QueryAllowancesByGranterResponse:
      description: >-
        QueryAllowancesByGranterResponse is the response type for the
        Query/AllowancesByGranter RPC method.
      properties:
        allowances:
          description: allowances that have been issued by the granter.
          items:
            properties:
              allowance:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
              grantee:
                description: >-
                  grantee is the address of the user being granted an allowance
                  of another user's funds.
                type: string
              granter:
                description: >-
                  granter is the address of the user granting an allowance of
                  their funds.
                type: string
            title: Grant is stored in the KVStore to record a grant with full context
            type: object
          type: array
        pagination:
          description: pagination defines an pagination for the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      type: object
    cosmos.feegrant.v1beta1.QueryAllowancesResponse:
      description: >-
        QueryAllowancesResponse is the response type for the Query/Allowances
        RPC method.
      properties:
        allowances:
          description: allowances are allowance's granted for grantee by granter.
          items:
            properties:
              allowance:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
              grantee:
                description: >-
                  grantee is the address of the user being granted an allowance
                  of another user's funds.
                type: string
              granter:
                description: >-
                  granter is the address of the user granting an allowance of
                  their funds.
                type: string
            title: Grant is stored in the KVStore to record a grant with full context
            type: object
          type: array
        pagination:
          description: pagination defines an pagination for the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      type: object
    cosmos.gov.v1beta1.Deposit:
      description: |-
        Deposit defines an amount deposited by an account address to an active
        proposal.
      properties:
        amount:
          items:
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          type: array
        depositor:
          type: string
        proposal_id:
          format: uint64
          type: string
      type: object
    cosmos.gov.v1beta1.DepositParams:
      description: DepositParams defines the params for deposits on governance proposals.
      properties:
        max_deposit_period:
          description: >-
            Maximum period for Atom holders to deposit on a proposal. Initial
            value: 2
             months.
          type: string
        min_deposit:
          description: Minimum deposit for a proposal to enter voting period.
          items:
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          type: array
      type: object
    cosmos.gov.v1beta1.Proposal:
      description: Proposal defines the core field members of a governance proposal.
      properties:
        content:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          type: object
        deposit_end_time:
          format: date-time
          type: string
        final_tally_result:
          description: TallyResult defines a standard tally for a governance proposal.
          properties:
            abstain:
              type: string
            'no':
              type: string
            no_with_veto:
              type: string
            'yes':
              type: string
          type: object
        proposal_id:
          format: uint64
          type: string
        status:
          default: PROPOSAL_STATUS_UNSPECIFIED
          description: |-
            ProposalStatus enumerates the valid statuses of a proposal.

             - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
             - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
            period.
             - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
            period.
             - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
            passed.
             - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
            been rejected.
             - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
            failed.
          enum:
            - PROPOSAL_STATUS_UNSPECIFIED
            - PROPOSAL_STATUS_DEPOSIT_PERIOD
            - PROPOSAL_STATUS_VOTING_PERIOD
            - PROPOSAL_STATUS_PASSED
            - PROPOSAL_STATUS_REJECTED
            - PROPOSAL_STATUS_FAILED
          type: string
        submit_time:
          format: date-time
          type: string
        total_deposit:
          items:
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          type: array
        voting_end_time:
          format: date-time
          type: string
        voting_start_time:
          format: date-time
          type: string
      type: object
    cosmos.gov.v1beta1.ProposalStatus:
      default: PROPOSAL_STATUS_UNSPECIFIED
      description: |-
        ProposalStatus enumerates the valid statuses of a proposal.

         - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
         - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
        period.
         - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
        period.
         - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
        passed.
         - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
        been rejected.
         - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
        failed.
      enum:
        - PROPOSAL_STATUS_UNSPECIFIED
        - PROPOSAL_STATUS_DEPOSIT_PERIOD
        - PROPOSAL_STATUS_VOTING_PERIOD
        - PROPOSAL_STATUS_PASSED
        - PROPOSAL_STATUS_REJECTED
        - PROPOSAL_STATUS_FAILED
      type: string
    cosmos.gov.v1beta1.QueryDepositResponse:
      description: >-
        QueryDepositResponse is the response type for the Query/Deposit RPC
        method.
      properties:
        deposit:
          description: >-
            Deposit defines an amount deposited by an account address to an
            active

            proposal.
          properties:
            amount:
              items:
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
                properties:
                  amount:
                    type: string
                  denom:
                    type: string
                type: object
              type: array
            depositor:
              type: string
            proposal_id:
              format: uint64
              type: string
          type: object
      type: object
    cosmos.gov.v1beta1.QueryDepositsResponse:
      description: >-
        QueryDepositsResponse is the response type for the Query/Deposits RPC
        method.
      properties:
        deposits:
          items:
            description: >-
              Deposit defines an amount deposited by an account address to an
              active

              proposal.
            properties:
              amount:
                items:
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                  properties:
                    amount:
                      type: string
                    denom:
                      type: string
                  type: object
                type: array
              depositor:
                type: string
              proposal_id:
                format: uint64
                type: string
            type: object
          type: array
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      type: object
    cosmos.gov.v1beta1.QueryParamsResponse:
      description: >-
        QueryParamsResponse is the response type for the Query/Params RPC
        method.
      properties:
        deposit_params:
          description: deposit_params defines the parameters related to deposit.
          properties:
            max_deposit_period:
              description: >-
                Maximum period for Atom holders to deposit on a proposal.
                Initial value: 2
                 months.
              type: string
            min_deposit:
              description: Minimum deposit for a proposal to enter voting period.
              items:
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
                properties:
                  amount:
                    type: string
                  denom:
                    type: string
                type: object
              type: array
          type: object
        tally_params:
          description: tally_params defines the parameters related to tally.
          properties:
            quorum:
              description: >-
                Minimum percentage of total stake needed to vote for a result to
                be
                 considered valid.
              format: byte
              type: string
            threshold:
              description: >-
                Minimum proportion of Yes votes for proposal to pass. Default
                value: 0.5.
              format: byte
              type: string
            veto_threshold:
              description: >-
                Minimum value of Veto votes to Total votes ratio for proposal to
                be
                 vetoed. Default value: 1/3.
              format: byte
              type: string
          type: object
        voting_params:
          description: voting_params defines the parameters related to voting.
          properties:
            voting_period:
              description: Length of the voting period.
              type: string
          type: object
      type: object
    cosmos.gov.v1beta1.QueryProposalResponse:
      description: >-
        QueryProposalResponse is the response type for the Query/Proposal RPC
        method.
      properties:
        proposal:
          description: Proposal defines the core field members of a governance proposal.
          properties:
            content:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
            deposit_end_time:
              format: date-time
              type: string
            final_tally_result:
              description: TallyResult defines a standard tally for a governance proposal.
              properties:
                abstain:
                  type: string
                'no':
                  type: string
                no_with_veto:
                  type: string
                'yes':
                  type: string
              type: object
            proposal_id:
              format: uint64
              type: string
            status:
              default: PROPOSAL_STATUS_UNSPECIFIED
              description: |-
                ProposalStatus enumerates the valid statuses of a proposal.

                 - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
                 - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
                period.
                 - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
                period.
                 - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
                passed.
                 - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
                been rejected.
                 - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
                failed.
              enum:
                - PROPOSAL_STATUS_UNSPECIFIED
                - PROPOSAL_STATUS_DEPOSIT_PERIOD
                - PROPOSAL_STATUS_VOTING_PERIOD
                - PROPOSAL_STATUS_PASSED
                - PROPOSAL_STATUS_REJECTED
                - PROPOSAL_STATUS_FAILED
              type: string
            submit_time:
              format: date-time
              type: string
            total_deposit:
              items:
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
                properties:
                  amount:
                    type: string
                  denom:
                    type: string
                type: object
              type: array
            voting_end_time:
              format: date-time
              type: string
            voting_start_time:
              format: date-time
              type: string
          type: object
      type: object
    cosmos.gov.v1beta1.QueryProposalsResponse:
      description: |-
        QueryProposalsResponse is the response type for the Query/Proposals RPC
        method.
      properties:
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
        proposals:
          items:
            description: Proposal defines the core field members of a governance proposal.
            properties:
              content:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
              deposit_end_time:
                format: date-time
                type: string
              final_tally_result:
                description: >-
                  TallyResult defines a standard tally for a governance
                  proposal.
                properties:
                  abstain:
                    type: string
                  'no':
                    type: string
                  no_with_veto:
                    type: string
                  'yes':
                    type: string
                type: object
              proposal_id:
                format: uint64
                type: string
              status:
                default: PROPOSAL_STATUS_UNSPECIFIED
                description: |-
                  ProposalStatus enumerates the valid statuses of a proposal.

                   - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
                   - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
                  period.
                   - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
                  period.
                   - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
                  passed.
                   - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
                  been rejected.
                   - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
                  failed.
                enum:
                  - PROPOSAL_STATUS_UNSPECIFIED
                  - PROPOSAL_STATUS_DEPOSIT_PERIOD
                  - PROPOSAL_STATUS_VOTING_PERIOD
                  - PROPOSAL_STATUS_PASSED
                  - PROPOSAL_STATUS_REJECTED
                  - PROPOSAL_STATUS_FAILED
                type: string
              submit_time:
                format: date-time
                type: string
              total_deposit:
                items:
                  description: >-
                    Coin defines a token with a denomination and an amount.


                    NOTE: The amount field is an Int which implements the custom
                    method

                    signatures required by gogoproto.
                  properties:
                    amount:
                      type: string
                    denom:
                      type: string
                  type: object
                type: array
              voting_end_time:
                format: date-time
                type: string
              voting_start_time:
                format: date-time
                type: string
            type: object
          type: array
      type: object
    cosmos.gov.v1beta1.QueryTallyResultResponse:
      description: >-
        QueryTallyResultResponse is the response type for the Query/Tally RPC
        method.
      properties:
        tally:
          description: TallyResult defines a standard tally for a governance proposal.
          properties:
            abstain:
              type: string
            'no':
              type: string
            no_with_veto:
              type: string
            'yes':
              type: string
          type: object
      type: object
    cosmos.gov.v1beta1.QueryVoteResponse:
      description: QueryVoteResponse is the response type for the Query/Vote RPC method.
      properties:
        vote:
          description: |-
            Vote defines a vote on a governance proposal.
            A Vote consists of a proposal ID, the voter, and the vote option.
          properties:
            option:
              default: VOTE_OPTION_UNSPECIFIED
              description: >-
                Deprecated: Prefer to use `options` instead. This field is set
                in queries

                if and only if `len(options) == 1` and that option has weight 1.
                In all

                other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
              enum:
                - VOTE_OPTION_UNSPECIFIED
                - VOTE_OPTION_YES
                - VOTE_OPTION_ABSTAIN
                - VOTE_OPTION_NO
                - VOTE_OPTION_NO_WITH_VETO
              type: string
            options:
              items:
                description: |-
                  WeightedVoteOption defines a unit of vote for vote split.

                  Since: cosmos-sdk 0.43
                properties:
                  option:
                    default: VOTE_OPTION_UNSPECIFIED
                    description: >-
                      VoteOption enumerates the valid vote options for a given
                      governance proposal.

                       - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                       - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                       - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                       - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                       - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
                    enum:
                      - VOTE_OPTION_UNSPECIFIED
                      - VOTE_OPTION_YES
                      - VOTE_OPTION_ABSTAIN
                      - VOTE_OPTION_NO
                      - VOTE_OPTION_NO_WITH_VETO
                    type: string
                  weight:
                    type: string
                type: object
              title: 'Since: cosmos-sdk 0.43'
              type: array
            proposal_id:
              format: uint64
              type: string
            voter:
              type: string
          type: object
      type: object
    cosmos.gov.v1beta1.QueryVotesResponse:
      description: QueryVotesResponse is the response type for the Query/Votes RPC method.
      properties:
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
        votes:
          description: votes defined the queried votes.
          items:
            description: |-
              Vote defines a vote on a governance proposal.
              A Vote consists of a proposal ID, the voter, and the vote option.
            properties:
              option:
                default: VOTE_OPTION_UNSPECIFIED
                description: >-
                  Deprecated: Prefer to use `options` instead. This field is set
                  in queries

                  if and only if `len(options) == 1` and that option has weight
                  1. In all

                  other cases, this field will default to
                  VOTE_OPTION_UNSPECIFIED.
                enum:
                  - VOTE_OPTION_UNSPECIFIED
                  - VOTE_OPTION_YES
                  - VOTE_OPTION_ABSTAIN
                  - VOTE_OPTION_NO
                  - VOTE_OPTION_NO_WITH_VETO
                type: string
              options:
                items:
                  description: |-
                    WeightedVoteOption defines a unit of vote for vote split.

                    Since: cosmos-sdk 0.43
                  properties:
                    option:
                      default: VOTE_OPTION_UNSPECIFIED
                      description: >-
                        VoteOption enumerates the valid vote options for a given
                        governance proposal.

                         - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                         - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                         - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                         - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                         - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
                      enum:
                        - VOTE_OPTION_UNSPECIFIED
                        - VOTE_OPTION_YES
                        - VOTE_OPTION_ABSTAIN
                        - VOTE_OPTION_NO
                        - VOTE_OPTION_NO_WITH_VETO
                      type: string
                    weight:
                      type: string
                  type: object
                title: 'Since: cosmos-sdk 0.43'
                type: array
              proposal_id:
                format: uint64
                type: string
              voter:
                type: string
            type: object
          type: array
      type: object
    cosmos.gov.v1beta1.TallyParams:
      description: >-
        TallyParams defines the params for tallying votes on governance
        proposals.
      properties:
        quorum:
          description: |-
            Minimum percentage of total stake needed to vote for a result to be
             considered valid.
          format: byte
          type: string
        threshold:
          description: >-
            Minimum proportion of Yes votes for proposal to pass. Default value:
            0.5.
          format: byte
          type: string
        veto_threshold:
          description: |-
            Minimum value of Veto votes to Total votes ratio for proposal to be
             vetoed. Default value: 1/3.
          format: byte
          type: string
      type: object
    cosmos.gov.v1beta1.TallyResult:
      description: TallyResult defines a standard tally for a governance proposal.
      properties:
        abstain:
          type: string
        'no':
          type: string
        no_with_veto:
          type: string
        'yes':
          type: string
      type: object
    cosmos.gov.v1beta1.Vote:
      description: |-
        Vote defines a vote on a governance proposal.
        A Vote consists of a proposal ID, the voter, and the vote option.
      properties:
        option:
          default: VOTE_OPTION_UNSPECIFIED
          description: >-
            Deprecated: Prefer to use `options` instead. This field is set in
            queries

            if and only if `len(options) == 1` and that option has weight 1. In
            all

            other cases, this field will default to VOTE_OPTION_UNSPECIFIED.
          enum:
            - VOTE_OPTION_UNSPECIFIED
            - VOTE_OPTION_YES
            - VOTE_OPTION_ABSTAIN
            - VOTE_OPTION_NO
            - VOTE_OPTION_NO_WITH_VETO
          type: string
        options:
          items:
            description: |-
              WeightedVoteOption defines a unit of vote for vote split.

              Since: cosmos-sdk 0.43
            properties:
              option:
                default: VOTE_OPTION_UNSPECIFIED
                description: >-
                  VoteOption enumerates the valid vote options for a given
                  governance proposal.

                   - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                   - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                   - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                   - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                   - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
                enum:
                  - VOTE_OPTION_UNSPECIFIED
                  - VOTE_OPTION_YES
                  - VOTE_OPTION_ABSTAIN
                  - VOTE_OPTION_NO
                  - VOTE_OPTION_NO_WITH_VETO
                type: string
              weight:
                type: string
            type: object
          title: 'Since: cosmos-sdk 0.43'
          type: array
        proposal_id:
          format: uint64
          type: string
        voter:
          type: string
      type: object
    cosmos.gov.v1beta1.VoteOption:
      default: VOTE_OPTION_UNSPECIFIED
      description: >-
        VoteOption enumerates the valid vote options for a given governance
        proposal.

         - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
         - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
         - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
         - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
         - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
      enum:
        - VOTE_OPTION_UNSPECIFIED
        - VOTE_OPTION_YES
        - VOTE_OPTION_ABSTAIN
        - VOTE_OPTION_NO
        - VOTE_OPTION_NO_WITH_VETO
      type: string
    cosmos.gov.v1beta1.VotingParams:
      description: VotingParams defines the params for voting on governance proposals.
      properties:
        voting_period:
          description: Length of the voting period.
          type: string
      type: object
    cosmos.gov.v1beta1.WeightedVoteOption:
      description: |-
        WeightedVoteOption defines a unit of vote for vote split.

        Since: cosmos-sdk 0.43
      properties:
        option:
          default: VOTE_OPTION_UNSPECIFIED
          description: >-
            VoteOption enumerates the valid vote options for a given governance
            proposal.

             - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
             - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
             - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
             - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
             - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
          enum:
            - VOTE_OPTION_UNSPECIFIED
            - VOTE_OPTION_YES
            - VOTE_OPTION_ABSTAIN
            - VOTE_OPTION_NO
            - VOTE_OPTION_NO_WITH_VETO
          type: string
        weight:
          type: string
      type: object
    cosmos.mint.v1beta1.Params:
      description: Params holds parameters for the mint module.
      properties:
        blocks_per_year:
          format: uint64
          title: expected blocks per year
          type: string
        goal_bonded:
          title: goal of percent bonded atoms
          type: string
        inflation_max:
          title: maximum inflation rate
          type: string
        inflation_min:
          title: minimum inflation rate
          type: string
        inflation_rate_change:
          title: maximum annual change in inflation rate
          type: string
        mint_denom:
          title: type of coin to mint
          type: string
      type: object
    cosmos.mint.v1beta1.QueryAnnualProvisionsResponse:
      description: |-
        QueryAnnualProvisionsResponse is the response type for the
        Query/AnnualProvisions RPC method.
      properties:
        annual_provisions:
          description: annual_provisions is the current minting annual provisions value.
          format: byte
          type: string
      type: object
    cosmos.mint.v1beta1.QueryInflationResponse:
      description: |-
        QueryInflationResponse is the response type for the Query/Inflation RPC
        method.
      properties:
        inflation:
          description: inflation is the current minting inflation value.
          format: byte
          type: string
      type: object
    cosmos.mint.v1beta1.QueryParamsResponse:
      description: >-
        QueryParamsResponse is the response type for the Query/Params RPC
        method.
      properties:
        params:
          description: params defines the parameters of the module.
          properties:
            blocks_per_year:
              format: uint64
              title: expected blocks per year
              type: string
            goal_bonded:
              title: goal of percent bonded atoms
              type: string
            inflation_max:
              title: maximum inflation rate
              type: string
            inflation_min:
              title: minimum inflation rate
              type: string
            inflation_rate_change:
              title: maximum annual change in inflation rate
              type: string
            mint_denom:
              title: type of coin to mint
              type: string
          type: object
      type: object
    cosmos.params.v1beta1.ParamChange:
      description: |-
        ParamChange defines an individual parameter change, for use in
        ParameterChangeProposal.
      properties:
        key:
          type: string
        subspace:
          type: string
        value:
          type: string
      type: object
    cosmos.params.v1beta1.QueryParamsResponse:
      description: QueryParamsResponse is response type for the Query/Params RPC method.
      properties:
        param:
          description: param defines the queried parameter.
          properties:
            key:
              type: string
            subspace:
              type: string
            value:
              type: string
          type: object
      type: object
    cosmos.slashing.v1beta1.Params:
      description: Params represents the parameters used for by the slashing module.
      properties:
        downtime_jail_duration:
          type: string
        min_signed_per_window:
          format: byte
          type: string
        signed_blocks_window:
          format: int64
          type: string
        slash_fraction_double_sign:
          format: byte
          type: string
        slash_fraction_downtime:
          format: byte
          type: string
      type: object
    cosmos.slashing.v1beta1.QueryParamsResponse:
      properties:
        params:
          description: Params represents the parameters used for by the slashing module.
          properties:
            downtime_jail_duration:
              type: string
            min_signed_per_window:
              format: byte
              type: string
            signed_blocks_window:
              format: int64
              type: string
            slash_fraction_double_sign:
              format: byte
              type: string
            slash_fraction_downtime:
              format: byte
              type: string
          type: object
      title: QueryParamsResponse is the response type for the Query/Params RPC method
      type: object
    cosmos.slashing.v1beta1.QuerySigningInfoResponse:
      properties:
        val_signing_info:
          description: >-
            ValidatorSigningInfo defines a validator's signing info for
            monitoring their

            liveness activity.
          properties:
            address:
              type: string
            index_offset:
              description: >-
                Index which is incremented each time the validator was a bonded

                in a block and may have signed a precommit or not. This in
                conjunction with the

                `SignedBlocksWindow` param determines the index in the
                `MissedBlocksBitArray`.
              format: int64
              type: string
            jailed_until:
              description: >-
                Timestamp until which the validator is jailed due to liveness
                downtime.
              format: date-time
              type: string
            missed_blocks_counter:
              description: >-
                A counter kept to avoid unnecessary array reads.

                Note that `Sum(MissedBlocksBitArray)` always equals
                `MissedBlocksCounter`.
              format: int64
              type: string
            start_height:
              format: int64
              title: Height at which validator was first a candidate OR was unjailed
              type: string
            tombstoned:
              description: >-
                Whether or not a validator has been tombstoned (killed out of
                validator set). It is set

                once the validator commits an equivocation or for any other
                configured misbehiavor.
              type: boolean
          title: val_signing_info is the signing info of requested val cons address
          type: object
      title: >-
        QuerySigningInfoResponse is the response type for the Query/SigningInfo
        RPC

        method
      type: object
    cosmos.slashing.v1beta1.QuerySigningInfosResponse:
      properties:
        info:
          items:
            description: >-
              ValidatorSigningInfo defines a validator's signing info for
              monitoring their

              liveness activity.
            properties:
              address:
                type: string
              index_offset:
                description: >-
                  Index which is incremented each time the validator was a
                  bonded

                  in a block and may have signed a precommit or not. This in
                  conjunction with the

                  `SignedBlocksWindow` param determines the index in the
                  `MissedBlocksBitArray`.
                format: int64
                type: string
              jailed_until:
                description: >-
                  Timestamp until which the validator is jailed due to liveness
                  downtime.
                format: date-time
                type: string
              missed_blocks_counter:
                description: >-
                  A counter kept to avoid unnecessary array reads.

                  Note that `Sum(MissedBlocksBitArray)` always equals
                  `MissedBlocksCounter`.
                format: int64
                type: string
              start_height:
                format: int64
                title: >-
                  Height at which validator was first a candidate OR was
                  unjailed
                type: string
              tombstoned:
                description: >-
                  Whether or not a validator has been tombstoned (killed out of
                  validator set). It is set

                  once the validator commits an equivocation or for any other
                  configured misbehiavor.
                type: boolean
            type: object
          title: info is the signing info of all validators
          type: array
        pagination:
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      title: >-
        QuerySigningInfosResponse is the response type for the
        Query/SigningInfos RPC

        method
      type: object
    cosmos.slashing.v1beta1.ValidatorSigningInfo:
      description: >-
        ValidatorSigningInfo defines a validator's signing info for monitoring
        their

        liveness activity.
      properties:
        address:
          type: string
        index_offset:
          description: >-
            Index which is incremented each time the validator was a bonded

            in a block and may have signed a precommit or not. This in
            conjunction with the

            `SignedBlocksWindow` param determines the index in the
            `MissedBlocksBitArray`.
          format: int64
          type: string
        jailed_until:
          description: >-
            Timestamp until which the validator is jailed due to liveness
            downtime.
          format: date-time
          type: string
        missed_blocks_counter:
          description: >-
            A counter kept to avoid unnecessary array reads.

            Note that `Sum(MissedBlocksBitArray)` always equals
            `MissedBlocksCounter`.
          format: int64
          type: string
        start_height:
          format: int64
          title: Height at which validator was first a candidate OR was unjailed
          type: string
        tombstoned:
          description: >-
            Whether or not a validator has been tombstoned (killed out of
            validator set). It is set

            once the validator commits an equivocation or for any other
            configured misbehiavor.
          type: boolean
      type: object
    cosmos.staking.v1beta1.BondStatus:
      default: BOND_STATUS_UNSPECIFIED
      description: |-
        BondStatus is the status of a validator.

         - BOND_STATUS_UNSPECIFIED: UNSPECIFIED defines an invalid validator status.
         - BOND_STATUS_UNBONDED: UNBONDED defines a validator that is not bonded.
         - BOND_STATUS_UNBONDING: UNBONDING defines a validator that is unbonding.
         - BOND_STATUS_BONDED: BONDED defines a validator that is bonded.
      enum:
        - BOND_STATUS_UNSPECIFIED
        - BOND_STATUS_UNBONDED
        - BOND_STATUS_UNBONDING
        - BOND_STATUS_BONDED
      type: string
    cosmos.staking.v1beta1.Commission:
      description: Commission defines commission parameters for a given validator.
      properties:
        commission_rates:
          description: >-
            commission_rates defines the initial commission rates to be used for
            creating a validator.
          properties:
            max_change_rate:
              description: >-
                max_change_rate defines the maximum daily increase of the
                validator commission, as a fraction.
              type: string
            max_rate:
              description: >-
                max_rate defines the maximum commission rate which validator can
                ever charge, as a fraction.
              type: string
            rate:
              description: >-
                rate is the commission rate charged to delegators, as a
                fraction.
              type: string
          type: object
        update_time:
          description: update_time is the last time the commission rate was changed.
          format: date-time
          type: string
      type: object
    cosmos.staking.v1beta1.CommissionRates:
      description: >-
        CommissionRates defines the initial commission rates to be used for
        creating

        a validator.
      properties:
        max_change_rate:
          description: >-
            max_change_rate defines the maximum daily increase of the validator
            commission, as a fraction.
          type: string
        max_rate:
          description: >-
            max_rate defines the maximum commission rate which validator can
            ever charge, as a fraction.
          type: string
        rate:
          description: rate is the commission rate charged to delegators, as a fraction.
          type: string
      type: object
    cosmos.staking.v1beta1.Delegation:
      description: |-
        Delegation represents the bond with tokens held by an account. It is
        owned by one delegator, and is associated with the voting power of one
        validator.
      properties:
        delegator_address:
          description: delegator_address is the bech32-encoded address of the delegator.
          type: string
        shares:
          description: shares define the delegation shares received.
          type: string
        validator_address:
          description: validator_address is the bech32-encoded address of the validator.
          type: string
      type: object
    cosmos.staking.v1beta1.DelegationResponse:
      description: >-
        DelegationResponse is equivalent to Delegation except that it contains a

        balance in addition to shares which is more suitable for client
        responses.
      properties:
        balance:
          description: |-
            Coin defines a token with a denomination and an amount.

            NOTE: The amount field is an Int which implements the custom method
            signatures required by gogoproto.
          properties:
            amount:
              type: string
            denom:
              type: string
          type: object
        delegation:
          description: >-
            Delegation represents the bond with tokens held by an account. It is

            owned by one delegator, and is associated with the voting power of
            one

            validator.
          properties:
            delegator_address:
              description: >-
                delegator_address is the bech32-encoded address of the
                delegator.
              type: string
            shares:
              description: shares define the delegation shares received.
              type: string
            validator_address:
              description: >-
                validator_address is the bech32-encoded address of the
                validator.
              type: string
          type: object
      type: object
    cosmos.staking.v1beta1.Description:
      description: Description defines a validator description.
      properties:
        details:
          description: details define other optional details.
          type: string
        identity:
          description: >-
            identity defines an optional identity signature (ex. UPort or
            Keybase).
          type: string
        moniker:
          description: moniker defines a human-readable name for the validator.
          type: string
        security_contact:
          description: security_contact defines an optional email for security contact.
          type: string
        website:
          description: website defines an optional website link.
          type: string
      type: object
    cosmos.staking.v1beta1.HistoricalInfo:
      description: >-
        HistoricalInfo contains header and validator information for a given
        block.

        It is stored as part of staking module's state, which persists the `n`
        most

        recent HistoricalInfo

        (`n` is set by the staking module's `historical_entries` parameter).
      properties:
        header:
          description: Header defines the structure of a block header.
          properties:
            app_hash:
              format: byte
              type: string
            chain_id:
              type: string
            consensus_hash:
              format: byte
              type: string
            data_hash:
              format: byte
              type: string
            evidence_hash:
              format: byte
              title: consensus info
              type: string
            height:
              format: int64
              type: string
            last_block_id:
              properties:
                hash:
                  format: byte
                  type: string
                part_set_header:
                  properties:
                    hash:
                      format: byte
                      type: string
                    total:
                      format: int64
                      type: integer
                  title: PartsetHeader
                  type: object
              title: prev block info
              type: object
            last_commit_hash:
              format: byte
              title: hashes of block data
              type: string
            last_results_hash:
              format: byte
              type: string
            next_validators_hash:
              format: byte
              type: string
            proposer_address:
              format: byte
              type: string
            time:
              format: date-time
              type: string
            validators_hash:
              format: byte
              title: hashes from the app output from the prev block
              type: string
            version:
              description: >-
                Consensus captures the consensus rules for processing a block in
                the blockchain,

                including all blockchain data structures and the rules of the
                application's

                state transition machine.
              properties:
                app:
                  format: uint64
                  type: string
                block:
                  format: uint64
                  type: string
              title: basic block info
              type: object
          type: object
        valset:
          items:
            description: >-
              Validator defines a validator, together with the total amount of
              the

              Validator's bond shares and their exchange rate to coins. Slashing
              results in

              a decrease in the exchange rate, allowing correct calculation of
              future

              undelegations without iterating over delegators. When coins are
              delegated to

              this validator, the validator is credited with a delegation whose
              number of

              bond shares is based on the amount of coins delegated divided by
              the current

              exchange rate. Voting power can be calculated as total bonded
              shares

              multiplied by exchange rate.
            properties:
              commission:
                description: commission defines the commission parameters.
                properties:
                  commission_rates:
                    description: >-
                      commission_rates defines the initial commission rates to
                      be used for creating a validator.
                    properties:
                      max_change_rate:
                        description: >-
                          max_change_rate defines the maximum daily increase of
                          the validator commission, as a fraction.
                        type: string
                      max_rate:
                        description: >-
                          max_rate defines the maximum commission rate which
                          validator can ever charge, as a fraction.
                        type: string
                      rate:
                        description: >-
                          rate is the commission rate charged to delegators, as
                          a fraction.
                        type: string
                    type: object
                  update_time:
                    description: >-
                      update_time is the last time the commission rate was
                      changed.
                    format: date-time
                    type: string
                type: object
              consensus_pubkey:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
              delegator_shares:
                description: >-
                  delegator_shares defines total shares issued to a validator's
                  delegators.
                type: string
              description:
                description: description defines the description terms for the validator.
                properties:
                  details:
                    description: details define other optional details.
                    type: string
                  identity:
                    description: >-
                      identity defines an optional identity signature (ex. UPort
                      or Keybase).
                    type: string
                  moniker:
                    description: moniker defines a human-readable name for the validator.
                    type: string
                  security_contact:
                    description: >-
                      security_contact defines an optional email for security
                      contact.
                    type: string
                  website:
                    description: website defines an optional website link.
                    type: string
                type: object
              jailed:
                description: >-
                  jailed defined whether the validator has been jailed from
                  bonded status or not.
                type: boolean
              min_self_delegation:
                description: >-
                  min_self_delegation is the validator's self declared minimum
                  self delegation.
                type: string
              operator_address:
                description: >-
                  operator_address defines the address of the validator's
                  operator; bech encoded in JSON.
                type: string
              status:
                default: BOND_STATUS_UNSPECIFIED
                description: status is the validator status (bonded/unbonding/unbonded).
                enum:
                  - BOND_STATUS_UNSPECIFIED
                  - BOND_STATUS_UNBONDED
                  - BOND_STATUS_UNBONDING
                  - BOND_STATUS_BONDED
                type: string
              tokens:
                description: tokens define the delegated tokens (incl. self-delegation).
                type: string
              unbonding_height:
                description: >-
                  unbonding_height defines, if unbonding, the height at which
                  this validator has begun unbonding.
                format: int64
                type: string
              unbonding_time:
                description: >-
                  unbonding_time defines, if unbonding, the min time for the
                  validator to complete unbonding.
                format: date-time
                type: string
            type: object
          type: array
      type: object
    cosmos.staking.v1beta1.Params:
      description: Params defines the parameters for the staking module.
      properties:
        bond_denom:
          description: bond_denom defines the bondable coin denomination.
          type: string
        historical_entries:
          description: historical_entries is the number of historical entries to persist.
          format: int64
          type: integer
        max_entries:
          description: >-
            max_entries is the max entries for either unbonding delegation or
            redelegation (per pair/trio).
          format: int64
          type: integer
        max_validators:
          description: max_validators is the maximum number of validators.
          format: int64
          type: integer
        unbonding_time:
          description: unbonding_time is the time duration of unbonding.
          type: string
      type: object
    cosmos.staking.v1beta1.Pool:
      description: |-
        Pool is used for tracking bonded and not-bonded token supply of the bond
        denomination.
      properties:
        bonded_tokens:
          type: string
        not_bonded_tokens:
          type: string
      type: object
    cosmos.staking.v1beta1.QueryDelegationResponse:
      description: >-
        QueryDelegationResponse is response type for the Query/Delegation RPC
        method.
      properties:
        delegation_response:
          description: >-
            DelegationResponse is equivalent to Delegation except that it
            contains a

            balance in addition to shares which is more suitable for client
            responses.
          properties:
            balance:
              description: >-
                Coin defines a token with a denomination and an amount.


                NOTE: The amount field is an Int which implements the custom
                method

                signatures required by gogoproto.
              properties:
                amount:
                  type: string
                denom:
                  type: string
              type: object
            delegation:
              description: >-
                Delegation represents the bond with tokens held by an account.
                It is

                owned by one delegator, and is associated with the voting power
                of one

                validator.
              properties:
                delegator_address:
                  description: >-
                    delegator_address is the bech32-encoded address of the
                    delegator.
                  type: string
                shares:
                  description: shares define the delegation shares received.
                  type: string
                validator_address:
                  description: >-
                    validator_address is the bech32-encoded address of the
                    validator.
                  type: string
              type: object
          type: object
      type: object
    cosmos.staking.v1beta1.QueryDelegatorDelegationsResponse:
      description: |-
        QueryDelegatorDelegationsResponse is response type for the
        Query/DelegatorDelegations RPC method.
      properties:
        delegation_responses:
          description: >-
            delegation_responses defines all the delegations' info of a
            delegator.
          items:
            description: >-
              DelegationResponse is equivalent to Delegation except that it
              contains a

              balance in addition to shares which is more suitable for client
              responses.
            properties:
              balance:
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
                properties:
                  amount:
                    type: string
                  denom:
                    type: string
                type: object
              delegation:
                description: >-
                  Delegation represents the bond with tokens held by an account.
                  It is

                  owned by one delegator, and is associated with the voting
                  power of one

                  validator.
                properties:
                  delegator_address:
                    description: >-
                      delegator_address is the bech32-encoded address of the
                      delegator.
                    type: string
                  shares:
                    description: shares define the delegation shares received.
                    type: string
                  validator_address:
                    description: >-
                      validator_address is the bech32-encoded address of the
                      validator.
                    type: string
                type: object
            type: object
          type: array
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      type: object
    cosmos.staking.v1beta1.QueryDelegatorUnbondingDelegationsResponse:
      description: |-
        QueryUnbondingDelegatorDelegationsResponse is response type for the
        Query/UnbondingDelegatorDelegations RPC method.
      properties:
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
        unbonding_responses:
          items:
            description: >-
              UnbondingDelegation stores all of a single delegator's unbonding
              bonds

              for a single validator in an time-ordered list.
            properties:
              delegator_address:
                description: >-
                  delegator_address is the bech32-encoded address of the
                  delegator.
                type: string
              entries:
                description: entries are the unbonding delegation entries.
                items:
                  description: >-
                    UnbondingDelegationEntry defines an unbonding object with
                    relevant metadata.
                  properties:
                    balance:
                      description: balance defines the tokens to receive at completion.
                      type: string
                    completion_time:
                      description: >-
                        completion_time is the unix time for unbonding
                        completion.
                      format: date-time
                      type: string
                    creation_height:
                      description: >-
                        creation_height is the height which the unbonding took
                        place.
                      format: int64
                      type: string
                    initial_balance:
                      description: >-
                        initial_balance defines the tokens initially scheduled
                        to receive at completion.
                      type: string
                  type: object
                type: array
              validator_address:
                description: >-
                  validator_address is the bech32-encoded address of the
                  validator.
                type: string
            type: object
          type: array
      type: object
    cosmos.staking.v1beta1.QueryDelegatorValidatorResponse:
      description: |-
        QueryDelegatorValidatorResponse response type for the
        Query/DelegatorValidator RPC method.
      properties:
        validator:
          description: >-
            Validator defines a validator, together with the total amount of the

            Validator's bond shares and their exchange rate to coins. Slashing
            results in

            a decrease in the exchange rate, allowing correct calculation of
            future

            undelegations without iterating over delegators. When coins are
            delegated to

            this validator, the validator is credited with a delegation whose
            number of

            bond shares is based on the amount of coins delegated divided by the
            current

            exchange rate. Voting power can be calculated as total bonded shares

            multiplied by exchange rate.
          properties:
            commission:
              description: commission defines the commission parameters.
              properties:
                commission_rates:
                  description: >-
                    commission_rates defines the initial commission rates to be
                    used for creating a validator.
                  properties:
                    max_change_rate:
                      description: >-
                        max_change_rate defines the maximum daily increase of
                        the validator commission, as a fraction.
                      type: string
                    max_rate:
                      description: >-
                        max_rate defines the maximum commission rate which
                        validator can ever charge, as a fraction.
                      type: string
                    rate:
                      description: >-
                        rate is the commission rate charged to delegators, as a
                        fraction.
                      type: string
                  type: object
                update_time:
                  description: >-
                    update_time is the last time the commission rate was
                    changed.
                  format: date-time
                  type: string
              type: object
            consensus_pubkey:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
            delegator_shares:
              description: >-
                delegator_shares defines total shares issued to a validator's
                delegators.
              type: string
            description:
              description: description defines the description terms for the validator.
              properties:
                details:
                  description: details define other optional details.
                  type: string
                identity:
                  description: >-
                    identity defines an optional identity signature (ex. UPort
                    or Keybase).
                  type: string
                moniker:
                  description: moniker defines a human-readable name for the validator.
                  type: string
                security_contact:
                  description: >-
                    security_contact defines an optional email for security
                    contact.
                  type: string
                website:
                  description: website defines an optional website link.
                  type: string
              type: object
            jailed:
              description: >-
                jailed defined whether the validator has been jailed from bonded
                status or not.
              type: boolean
            min_self_delegation:
              description: >-
                min_self_delegation is the validator's self declared minimum
                self delegation.
              type: string
            operator_address:
              description: >-
                operator_address defines the address of the validator's
                operator; bech encoded in JSON.
              type: string
            status:
              default: BOND_STATUS_UNSPECIFIED
              description: status is the validator status (bonded/unbonding/unbonded).
              enum:
                - BOND_STATUS_UNSPECIFIED
                - BOND_STATUS_UNBONDED
                - BOND_STATUS_UNBONDING
                - BOND_STATUS_BONDED
              type: string
            tokens:
              description: tokens define the delegated tokens (incl. self-delegation).
              type: string
            unbonding_height:
              description: >-
                unbonding_height defines, if unbonding, the height at which this
                validator has begun unbonding.
              format: int64
              type: string
            unbonding_time:
              description: >-
                unbonding_time defines, if unbonding, the min time for the
                validator to complete unbonding.
              format: date-time
              type: string
          type: object
      type: object
    cosmos.staking.v1beta1.QueryDelegatorValidatorsResponse:
      description: |-
        QueryDelegatorValidatorsResponse is response type for the
        Query/DelegatorValidators RPC method.
      properties:
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
        validators:
          description: validators defines the the validators' info of a delegator.
          items:
            description: >-
              Validator defines a validator, together with the total amount of
              the

              Validator's bond shares and their exchange rate to coins. Slashing
              results in

              a decrease in the exchange rate, allowing correct calculation of
              future

              undelegations without iterating over delegators. When coins are
              delegated to

              this validator, the validator is credited with a delegation whose
              number of

              bond shares is based on the amount of coins delegated divided by
              the current

              exchange rate. Voting power can be calculated as total bonded
              shares

              multiplied by exchange rate.
            properties:
              commission:
                description: commission defines the commission parameters.
                properties:
                  commission_rates:
                    description: >-
                      commission_rates defines the initial commission rates to
                      be used for creating a validator.
                    properties:
                      max_change_rate:
                        description: >-
                          max_change_rate defines the maximum daily increase of
                          the validator commission, as a fraction.
                        type: string
                      max_rate:
                        description: >-
                          max_rate defines the maximum commission rate which
                          validator can ever charge, as a fraction.
                        type: string
                      rate:
                        description: >-
                          rate is the commission rate charged to delegators, as
                          a fraction.
                        type: string
                    type: object
                  update_time:
                    description: >-
                      update_time is the last time the commission rate was
                      changed.
                    format: date-time
                    type: string
                type: object
              consensus_pubkey:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
              delegator_shares:
                description: >-
                  delegator_shares defines total shares issued to a validator's
                  delegators.
                type: string
              description:
                description: description defines the description terms for the validator.
                properties:
                  details:
                    description: details define other optional details.
                    type: string
                  identity:
                    description: >-
                      identity defines an optional identity signature (ex. UPort
                      or Keybase).
                    type: string
                  moniker:
                    description: moniker defines a human-readable name for the validator.
                    type: string
                  security_contact:
                    description: >-
                      security_contact defines an optional email for security
                      contact.
                    type: string
                  website:
                    description: website defines an optional website link.
                    type: string
                type: object
              jailed:
                description: >-
                  jailed defined whether the validator has been jailed from
                  bonded status or not.
                type: boolean
              min_self_delegation:
                description: >-
                  min_self_delegation is the validator's self declared minimum
                  self delegation.
                type: string
              operator_address:
                description: >-
                  operator_address defines the address of the validator's
                  operator; bech encoded in JSON.
                type: string
              status:
                default: BOND_STATUS_UNSPECIFIED
                description: status is the validator status (bonded/unbonding/unbonded).
                enum:
                  - BOND_STATUS_UNSPECIFIED
                  - BOND_STATUS_UNBONDED
                  - BOND_STATUS_UNBONDING
                  - BOND_STATUS_BONDED
                type: string
              tokens:
                description: tokens define the delegated tokens (incl. self-delegation).
                type: string
              unbonding_height:
                description: >-
                  unbonding_height defines, if unbonding, the height at which
                  this validator has begun unbonding.
                format: int64
                type: string
              unbonding_time:
                description: >-
                  unbonding_time defines, if unbonding, the min time for the
                  validator to complete unbonding.
                format: date-time
                type: string
            type: object
          type: array
      type: object
    cosmos.staking.v1beta1.QueryHistoricalInfoResponse:
      description: >-
        QueryHistoricalInfoResponse is response type for the
        Query/HistoricalInfo RPC

        method.
      properties:
        hist:
          description: hist defines the historical info at the given height.
          properties:
            header:
              description: Header defines the structure of a block header.
              properties:
                app_hash:
                  format: byte
                  type: string
                chain_id:
                  type: string
                consensus_hash:
                  format: byte
                  type: string
                data_hash:
                  format: byte
                  type: string
                evidence_hash:
                  format: byte
                  title: consensus info
                  type: string
                height:
                  format: int64
                  type: string
                last_block_id:
                  properties:
                    hash:
                      format: byte
                      type: string
                    part_set_header:
                      properties:
                        hash:
                          format: byte
                          type: string
                        total:
                          format: int64
                          type: integer
                      title: PartsetHeader
                      type: object
                  title: prev block info
                  type: object
                last_commit_hash:
                  format: byte
                  title: hashes of block data
                  type: string
                last_results_hash:
                  format: byte
                  type: string
                next_validators_hash:
                  format: byte
                  type: string
                proposer_address:
                  format: byte
                  type: string
                time:
                  format: date-time
                  type: string
                validators_hash:
                  format: byte
                  title: hashes from the app output from the prev block
                  type: string
                version:
                  description: >-
                    Consensus captures the consensus rules for processing a
                    block in the blockchain,

                    including all blockchain data structures and the rules of
                    the application's

                    state transition machine.
                  properties:
                    app:
                      format: uint64
                      type: string
                    block:
                      format: uint64
                      type: string
                  title: basic block info
                  type: object
              type: object
            valset:
              items:
                description: >-
                  Validator defines a validator, together with the total amount
                  of the

                  Validator's bond shares and their exchange rate to coins.
                  Slashing results in

                  a decrease in the exchange rate, allowing correct calculation
                  of future

                  undelegations without iterating over delegators. When coins
                  are delegated to

                  this validator, the validator is credited with a delegation
                  whose number of

                  bond shares is based on the amount of coins delegated divided
                  by the current

                  exchange rate. Voting power can be calculated as total bonded
                  shares

                  multiplied by exchange rate.
                properties:
                  commission:
                    description: commission defines the commission parameters.
                    properties:
                      commission_rates:
                        description: >-
                          commission_rates defines the initial commission rates
                          to be used for creating a validator.
                        properties:
                          max_change_rate:
                            description: >-
                              max_change_rate defines the maximum daily increase
                              of the validator commission, as a fraction.
                            type: string
                          max_rate:
                            description: >-
                              max_rate defines the maximum commission rate which
                              validator can ever charge, as a fraction.
                            type: string
                          rate:
                            description: >-
                              rate is the commission rate charged to delegators,
                              as a fraction.
                            type: string
                        type: object
                      update_time:
                        description: >-
                          update_time is the last time the commission rate was
                          changed.
                        format: date-time
                        type: string
                    type: object
                  consensus_pubkey:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    type: object
                  delegator_shares:
                    description: >-
                      delegator_shares defines total shares issued to a
                      validator's delegators.
                    type: string
                  description:
                    description: >-
                      description defines the description terms for the
                      validator.
                    properties:
                      details:
                        description: details define other optional details.
                        type: string
                      identity:
                        description: >-
                          identity defines an optional identity signature (ex.
                          UPort or Keybase).
                        type: string
                      moniker:
                        description: >-
                          moniker defines a human-readable name for the
                          validator.
                        type: string
                      security_contact:
                        description: >-
                          security_contact defines an optional email for
                          security contact.
                        type: string
                      website:
                        description: website defines an optional website link.
                        type: string
                    type: object
                  jailed:
                    description: >-
                      jailed defined whether the validator has been jailed from
                      bonded status or not.
                    type: boolean
                  min_self_delegation:
                    description: >-
                      min_self_delegation is the validator's self declared
                      minimum self delegation.
                    type: string
                  operator_address:
                    description: >-
                      operator_address defines the address of the validator's
                      operator; bech encoded in JSON.
                    type: string
                  status:
                    default: BOND_STATUS_UNSPECIFIED
                    description: >-
                      status is the validator status
                      (bonded/unbonding/unbonded).
                    enum:
                      - BOND_STATUS_UNSPECIFIED
                      - BOND_STATUS_UNBONDED
                      - BOND_STATUS_UNBONDING
                      - BOND_STATUS_BONDED
                    type: string
                  tokens:
                    description: >-
                      tokens define the delegated tokens (incl.
                      self-delegation).
                    type: string
                  unbonding_height:
                    description: >-
                      unbonding_height defines, if unbonding, the height at
                      which this validator has begun unbonding.
                    format: int64
                    type: string
                  unbonding_time:
                    description: >-
                      unbonding_time defines, if unbonding, the min time for the
                      validator to complete unbonding.
                    format: date-time
                    type: string
                type: object
              type: array
          type: object
      type: object
    cosmos.staking.v1beta1.QueryParamsResponse:
      description: QueryParamsResponse is response type for the Query/Params RPC method.
      properties:
        params:
          description: params holds all the parameters of this module.
          properties:
            bond_denom:
              description: bond_denom defines the bondable coin denomination.
              type: string
            historical_entries:
              description: >-
                historical_entries is the number of historical entries to
                persist.
              format: int64
              type: integer
            max_entries:
              description: >-
                max_entries is the max entries for either unbonding delegation
                or redelegation (per pair/trio).
              format: int64
              type: integer
            max_validators:
              description: max_validators is the maximum number of validators.
              format: int64
              type: integer
            unbonding_time:
              description: unbonding_time is the time duration of unbonding.
              type: string
          type: object
      type: object
    cosmos.staking.v1beta1.QueryPoolResponse:
      description: QueryPoolResponse is response type for the Query/Pool RPC method.
      properties:
        pool:
          description: pool defines the pool info.
          properties:
            bonded_tokens:
              type: string
            not_bonded_tokens:
              type: string
          type: object
      type: object
    cosmos.staking.v1beta1.QueryRedelegationsResponse:
      description: >-
        QueryRedelegationsResponse is response type for the Query/Redelegations
        RPC

        method.
      properties:
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
        redelegation_responses:
          items:
            description: >-
              RedelegationResponse is equivalent to a Redelegation except that
              its entries

              contain a balance in addition to shares which is more suitable for
              client

              responses.
            properties:
              entries:
                items:
                  description: >-
                    RedelegationEntryResponse is equivalent to a
                    RedelegationEntry except that it

                    contains a balance in addition to shares which is more
                    suitable for client

                    responses.
                  properties:
                    balance:
                      type: string
                    redelegation_entry:
                      description: >-
                        RedelegationEntry defines a redelegation object with
                        relevant metadata.
                      properties:
                        completion_time:
                          description: >-
                            completion_time defines the unix time for
                            redelegation completion.
                          format: date-time
                          type: string
                        creation_height:
                          description: >-
                            creation_height  defines the height which the
                            redelegation took place.
                          format: int64
                          type: string
                        initial_balance:
                          description: >-
                            initial_balance defines the initial balance when
                            redelegation started.
                          type: string
                        shares_dst:
                          description: >-
                            shares_dst is the amount of destination-validator
                            shares created by redelegation.
                          type: string
                      type: object
                  type: object
                type: array
              redelegation:
                description: >-
                  Redelegation contains the list of a particular delegator's
                  redelegating bonds

                  from a particular source validator to a particular destination
                  validator.
                properties:
                  delegator_address:
                    description: >-
                      delegator_address is the bech32-encoded address of the
                      delegator.
                    type: string
                  entries:
                    description: entries are the redelegation entries.
                    items:
                      description: >-
                        RedelegationEntry defines a redelegation object with
                        relevant metadata.
                      properties:
                        completion_time:
                          description: >-
                            completion_time defines the unix time for
                            redelegation completion.
                          format: date-time
                          type: string
                        creation_height:
                          description: >-
                            creation_height  defines the height which the
                            redelegation took place.
                          format: int64
                          type: string
                        initial_balance:
                          description: >-
                            initial_balance defines the initial balance when
                            redelegation started.
                          type: string
                        shares_dst:
                          description: >-
                            shares_dst is the amount of destination-validator
                            shares created by redelegation.
                          type: string
                      type: object
                    type: array
                  validator_dst_address:
                    description: >-
                      validator_dst_address is the validator redelegation
                      destination operator address.
                    type: string
                  validator_src_address:
                    description: >-
                      validator_src_address is the validator redelegation source
                      operator address.
                    type: string
                type: object
            type: object
          type: array
      type: object
    cosmos.staking.v1beta1.QueryUnbondingDelegationResponse:
      description: >-
        QueryDelegationResponse is response type for the
        Query/UnbondingDelegation

        RPC method.
      properties:
        unbond:
          description: >-
            UnbondingDelegation stores all of a single delegator's unbonding
            bonds

            for a single validator in an time-ordered list.
          properties:
            delegator_address:
              description: >-
                delegator_address is the bech32-encoded address of the
                delegator.
              type: string
            entries:
              description: entries are the unbonding delegation entries.
              items:
                description: >-
                  UnbondingDelegationEntry defines an unbonding object with
                  relevant metadata.
                properties:
                  balance:
                    description: balance defines the tokens to receive at completion.
                    type: string
                  completion_time:
                    description: completion_time is the unix time for unbonding completion.
                    format: date-time
                    type: string
                  creation_height:
                    description: >-
                      creation_height is the height which the unbonding took
                      place.
                    format: int64
                    type: string
                  initial_balance:
                    description: >-
                      initial_balance defines the tokens initially scheduled to
                      receive at completion.
                    type: string
                type: object
              type: array
            validator_address:
              description: >-
                validator_address is the bech32-encoded address of the
                validator.
              type: string
          type: object
      type: object
    cosmos.staking.v1beta1.QueryValidatorDelegationsResponse:
      properties:
        delegation_responses:
          items:
            description: >-
              DelegationResponse is equivalent to Delegation except that it
              contains a

              balance in addition to shares which is more suitable for client
              responses.
            properties:
              balance:
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
                properties:
                  amount:
                    type: string
                  denom:
                    type: string
                type: object
              delegation:
                description: >-
                  Delegation represents the bond with tokens held by an account.
                  It is

                  owned by one delegator, and is associated with the voting
                  power of one

                  validator.
                properties:
                  delegator_address:
                    description: >-
                      delegator_address is the bech32-encoded address of the
                      delegator.
                    type: string
                  shares:
                    description: shares define the delegation shares received.
                    type: string
                  validator_address:
                    description: >-
                      validator_address is the bech32-encoded address of the
                      validator.
                    type: string
                type: object
            type: object
          type: array
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      title: |-
        QueryValidatorDelegationsResponse is response type for the
        Query/ValidatorDelegations RPC method
      type: object
    cosmos.staking.v1beta1.QueryValidatorResponse:
      properties:
        validator:
          description: >-
            Validator defines a validator, together with the total amount of the

            Validator's bond shares and their exchange rate to coins. Slashing
            results in

            a decrease in the exchange rate, allowing correct calculation of
            future

            undelegations without iterating over delegators. When coins are
            delegated to

            this validator, the validator is credited with a delegation whose
            number of

            bond shares is based on the amount of coins delegated divided by the
            current

            exchange rate. Voting power can be calculated as total bonded shares

            multiplied by exchange rate.
          properties:
            commission:
              description: commission defines the commission parameters.
              properties:
                commission_rates:
                  description: >-
                    commission_rates defines the initial commission rates to be
                    used for creating a validator.
                  properties:
                    max_change_rate:
                      description: >-
                        max_change_rate defines the maximum daily increase of
                        the validator commission, as a fraction.
                      type: string
                    max_rate:
                      description: >-
                        max_rate defines the maximum commission rate which
                        validator can ever charge, as a fraction.
                      type: string
                    rate:
                      description: >-
                        rate is the commission rate charged to delegators, as a
                        fraction.
                      type: string
                  type: object
                update_time:
                  description: >-
                    update_time is the last time the commission rate was
                    changed.
                  format: date-time
                  type: string
              type: object
            consensus_pubkey:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
            delegator_shares:
              description: >-
                delegator_shares defines total shares issued to a validator's
                delegators.
              type: string
            description:
              description: description defines the description terms for the validator.
              properties:
                details:
                  description: details define other optional details.
                  type: string
                identity:
                  description: >-
                    identity defines an optional identity signature (ex. UPort
                    or Keybase).
                  type: string
                moniker:
                  description: moniker defines a human-readable name for the validator.
                  type: string
                security_contact:
                  description: >-
                    security_contact defines an optional email for security
                    contact.
                  type: string
                website:
                  description: website defines an optional website link.
                  type: string
              type: object
            jailed:
              description: >-
                jailed defined whether the validator has been jailed from bonded
                status or not.
              type: boolean
            min_self_delegation:
              description: >-
                min_self_delegation is the validator's self declared minimum
                self delegation.
              type: string
            operator_address:
              description: >-
                operator_address defines the address of the validator's
                operator; bech encoded in JSON.
              type: string
            status:
              default: BOND_STATUS_UNSPECIFIED
              description: status is the validator status (bonded/unbonding/unbonded).
              enum:
                - BOND_STATUS_UNSPECIFIED
                - BOND_STATUS_UNBONDED
                - BOND_STATUS_UNBONDING
                - BOND_STATUS_BONDED
              type: string
            tokens:
              description: tokens define the delegated tokens (incl. self-delegation).
              type: string
            unbonding_height:
              description: >-
                unbonding_height defines, if unbonding, the height at which this
                validator has begun unbonding.
              format: int64
              type: string
            unbonding_time:
              description: >-
                unbonding_time defines, if unbonding, the min time for the
                validator to complete unbonding.
              format: date-time
              type: string
          type: object
      title: >-
        QueryValidatorResponse is response type for the Query/Validator RPC
        method
      type: object
    cosmos.staking.v1beta1.QueryValidatorUnbondingDelegationsResponse:
      description: |-
        QueryValidatorUnbondingDelegationsResponse is response type for the
        Query/ValidatorUnbondingDelegations RPC method.
      properties:
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
        unbonding_responses:
          items:
            description: >-
              UnbondingDelegation stores all of a single delegator's unbonding
              bonds

              for a single validator in an time-ordered list.
            properties:
              delegator_address:
                description: >-
                  delegator_address is the bech32-encoded address of the
                  delegator.
                type: string
              entries:
                description: entries are the unbonding delegation entries.
                items:
                  description: >-
                    UnbondingDelegationEntry defines an unbonding object with
                    relevant metadata.
                  properties:
                    balance:
                      description: balance defines the tokens to receive at completion.
                      type: string
                    completion_time:
                      description: >-
                        completion_time is the unix time for unbonding
                        completion.
                      format: date-time
                      type: string
                    creation_height:
                      description: >-
                        creation_height is the height which the unbonding took
                        place.
                      format: int64
                      type: string
                    initial_balance:
                      description: >-
                        initial_balance defines the tokens initially scheduled
                        to receive at completion.
                      type: string
                  type: object
                type: array
              validator_address:
                description: >-
                  validator_address is the bech32-encoded address of the
                  validator.
                type: string
            type: object
          type: array
      type: object
    cosmos.staking.v1beta1.QueryValidatorsResponse:
      properties:
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
        validators:
          description: validators contains all the queried validators.
          items:
            description: >-
              Validator defines a validator, together with the total amount of
              the

              Validator's bond shares and their exchange rate to coins. Slashing
              results in

              a decrease in the exchange rate, allowing correct calculation of
              future

              undelegations without iterating over delegators. When coins are
              delegated to

              this validator, the validator is credited with a delegation whose
              number of

              bond shares is based on the amount of coins delegated divided by
              the current

              exchange rate. Voting power can be calculated as total bonded
              shares

              multiplied by exchange rate.
            properties:
              commission:
                description: commission defines the commission parameters.
                properties:
                  commission_rates:
                    description: >-
                      commission_rates defines the initial commission rates to
                      be used for creating a validator.
                    properties:
                      max_change_rate:
                        description: >-
                          max_change_rate defines the maximum daily increase of
                          the validator commission, as a fraction.
                        type: string
                      max_rate:
                        description: >-
                          max_rate defines the maximum commission rate which
                          validator can ever charge, as a fraction.
                        type: string
                      rate:
                        description: >-
                          rate is the commission rate charged to delegators, as
                          a fraction.
                        type: string
                    type: object
                  update_time:
                    description: >-
                      update_time is the last time the commission rate was
                      changed.
                    format: date-time
                    type: string
                type: object
              consensus_pubkey:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
              delegator_shares:
                description: >-
                  delegator_shares defines total shares issued to a validator's
                  delegators.
                type: string
              description:
                description: description defines the description terms for the validator.
                properties:
                  details:
                    description: details define other optional details.
                    type: string
                  identity:
                    description: >-
                      identity defines an optional identity signature (ex. UPort
                      or Keybase).
                    type: string
                  moniker:
                    description: moniker defines a human-readable name for the validator.
                    type: string
                  security_contact:
                    description: >-
                      security_contact defines an optional email for security
                      contact.
                    type: string
                  website:
                    description: website defines an optional website link.
                    type: string
                type: object
              jailed:
                description: >-
                  jailed defined whether the validator has been jailed from
                  bonded status or not.
                type: boolean
              min_self_delegation:
                description: >-
                  min_self_delegation is the validator's self declared minimum
                  self delegation.
                type: string
              operator_address:
                description: >-
                  operator_address defines the address of the validator's
                  operator; bech encoded in JSON.
                type: string
              status:
                default: BOND_STATUS_UNSPECIFIED
                description: status is the validator status (bonded/unbonding/unbonded).
                enum:
                  - BOND_STATUS_UNSPECIFIED
                  - BOND_STATUS_UNBONDED
                  - BOND_STATUS_UNBONDING
                  - BOND_STATUS_BONDED
                type: string
              tokens:
                description: tokens define the delegated tokens (incl. self-delegation).
                type: string
              unbonding_height:
                description: >-
                  unbonding_height defines, if unbonding, the height at which
                  this validator has begun unbonding.
                format: int64
                type: string
              unbonding_time:
                description: >-
                  unbonding_time defines, if unbonding, the min time for the
                  validator to complete unbonding.
                format: date-time
                type: string
            type: object
          type: array
      title: >-
        QueryValidatorsResponse is response type for the Query/Validators RPC
        method
      type: object
    cosmos.staking.v1beta1.Redelegation:
      description: >-
        Redelegation contains the list of a particular delegator's redelegating
        bonds

        from a particular source validator to a particular destination
        validator.
      properties:
        delegator_address:
          description: delegator_address is the bech32-encoded address of the delegator.
          type: string
        entries:
          description: entries are the redelegation entries.
          items:
            description: >-
              RedelegationEntry defines a redelegation object with relevant
              metadata.
            properties:
              completion_time:
                description: >-
                  completion_time defines the unix time for redelegation
                  completion.
                format: date-time
                type: string
              creation_height:
                description: >-
                  creation_height  defines the height which the redelegation
                  took place.
                format: int64
                type: string
              initial_balance:
                description: >-
                  initial_balance defines the initial balance when redelegation
                  started.
                type: string
              shares_dst:
                description: >-
                  shares_dst is the amount of destination-validator shares
                  created by redelegation.
                type: string
            type: object
          type: array
        validator_dst_address:
          description: >-
            validator_dst_address is the validator redelegation destination
            operator address.
          type: string
        validator_src_address:
          description: >-
            validator_src_address is the validator redelegation source operator
            address.
          type: string
      type: object
    cosmos.staking.v1beta1.RedelegationEntry:
      description: RedelegationEntry defines a redelegation object with relevant metadata.
      properties:
        completion_time:
          description: completion_time defines the unix time for redelegation completion.
          format: date-time
          type: string
        creation_height:
          description: >-
            creation_height  defines the height which the redelegation took
            place.
          format: int64
          type: string
        initial_balance:
          description: >-
            initial_balance defines the initial balance when redelegation
            started.
          type: string
        shares_dst:
          description: >-
            shares_dst is the amount of destination-validator shares created by
            redelegation.
          type: string
      type: object
    cosmos.staking.v1beta1.RedelegationEntryResponse:
      description: >-
        RedelegationEntryResponse is equivalent to a RedelegationEntry except
        that it

        contains a balance in addition to shares which is more suitable for
        client

        responses.
      properties:
        balance:
          type: string
        redelegation_entry:
          description: >-
            RedelegationEntry defines a redelegation object with relevant
            metadata.
          properties:
            completion_time:
              description: >-
                completion_time defines the unix time for redelegation
                completion.
              format: date-time
              type: string
            creation_height:
              description: >-
                creation_height  defines the height which the redelegation took
                place.
              format: int64
              type: string
            initial_balance:
              description: >-
                initial_balance defines the initial balance when redelegation
                started.
              type: string
            shares_dst:
              description: >-
                shares_dst is the amount of destination-validator shares created
                by redelegation.
              type: string
          type: object
      type: object
    cosmos.staking.v1beta1.RedelegationResponse:
      description: >-
        RedelegationResponse is equivalent to a Redelegation except that its
        entries

        contain a balance in addition to shares which is more suitable for
        client

        responses.
      properties:
        entries:
          items:
            description: >-
              RedelegationEntryResponse is equivalent to a RedelegationEntry
              except that it

              contains a balance in addition to shares which is more suitable
              for client

              responses.
            properties:
              balance:
                type: string
              redelegation_entry:
                description: >-
                  RedelegationEntry defines a redelegation object with relevant
                  metadata.
                properties:
                  completion_time:
                    description: >-
                      completion_time defines the unix time for redelegation
                      completion.
                    format: date-time
                    type: string
                  creation_height:
                    description: >-
                      creation_height  defines the height which the redelegation
                      took place.
                    format: int64
                    type: string
                  initial_balance:
                    description: >-
                      initial_balance defines the initial balance when
                      redelegation started.
                    type: string
                  shares_dst:
                    description: >-
                      shares_dst is the amount of destination-validator shares
                      created by redelegation.
                    type: string
                type: object
            type: object
          type: array
        redelegation:
          description: >-
            Redelegation contains the list of a particular delegator's
            redelegating bonds

            from a particular source validator to a particular destination
            validator.
          properties:
            delegator_address:
              description: >-
                delegator_address is the bech32-encoded address of the
                delegator.
              type: string
            entries:
              description: entries are the redelegation entries.
              items:
                description: >-
                  RedelegationEntry defines a redelegation object with relevant
                  metadata.
                properties:
                  completion_time:
                    description: >-
                      completion_time defines the unix time for redelegation
                      completion.
                    format: date-time
                    type: string
                  creation_height:
                    description: >-
                      creation_height  defines the height which the redelegation
                      took place.
                    format: int64
                    type: string
                  initial_balance:
                    description: >-
                      initial_balance defines the initial balance when
                      redelegation started.
                    type: string
                  shares_dst:
                    description: >-
                      shares_dst is the amount of destination-validator shares
                      created by redelegation.
                    type: string
                type: object
              type: array
            validator_dst_address:
              description: >-
                validator_dst_address is the validator redelegation destination
                operator address.
              type: string
            validator_src_address:
              description: >-
                validator_src_address is the validator redelegation source
                operator address.
              type: string
          type: object
      type: object
    cosmos.staking.v1beta1.UnbondingDelegation:
      description: |-
        UnbondingDelegation stores all of a single delegator's unbonding bonds
        for a single validator in an time-ordered list.
      properties:
        delegator_address:
          description: delegator_address is the bech32-encoded address of the delegator.
          type: string
        entries:
          description: entries are the unbonding delegation entries.
          items:
            description: >-
              UnbondingDelegationEntry defines an unbonding object with relevant
              metadata.
            properties:
              balance:
                description: balance defines the tokens to receive at completion.
                type: string
              completion_time:
                description: completion_time is the unix time for unbonding completion.
                format: date-time
                type: string
              creation_height:
                description: creation_height is the height which the unbonding took place.
                format: int64
                type: string
              initial_balance:
                description: >-
                  initial_balance defines the tokens initially scheduled to
                  receive at completion.
                type: string
            type: object
          type: array
        validator_address:
          description: validator_address is the bech32-encoded address of the validator.
          type: string
      type: object
    cosmos.staking.v1beta1.UnbondingDelegationEntry:
      description: >-
        UnbondingDelegationEntry defines an unbonding object with relevant
        metadata.
      properties:
        balance:
          description: balance defines the tokens to receive at completion.
          type: string
        completion_time:
          description: completion_time is the unix time for unbonding completion.
          format: date-time
          type: string
        creation_height:
          description: creation_height is the height which the unbonding took place.
          format: int64
          type: string
        initial_balance:
          description: >-
            initial_balance defines the tokens initially scheduled to receive at
            completion.
          type: string
      type: object
    cosmos.staking.v1beta1.Validator:
      description: >-
        Validator defines a validator, together with the total amount of the

        Validator's bond shares and their exchange rate to coins. Slashing
        results in

        a decrease in the exchange rate, allowing correct calculation of future

        undelegations without iterating over delegators. When coins are
        delegated to

        this validator, the validator is credited with a delegation whose number
        of

        bond shares is based on the amount of coins delegated divided by the
        current

        exchange rate. Voting power can be calculated as total bonded shares

        multiplied by exchange rate.
      properties:
        commission:
          description: commission defines the commission parameters.
          properties:
            commission_rates:
              description: >-
                commission_rates defines the initial commission rates to be used
                for creating a validator.
              properties:
                max_change_rate:
                  description: >-
                    max_change_rate defines the maximum daily increase of the
                    validator commission, as a fraction.
                  type: string
                max_rate:
                  description: >-
                    max_rate defines the maximum commission rate which validator
                    can ever charge, as a fraction.
                  type: string
                rate:
                  description: >-
                    rate is the commission rate charged to delegators, as a
                    fraction.
                  type: string
              type: object
            update_time:
              description: update_time is the last time the commission rate was changed.
              format: date-time
              type: string
          type: object
        consensus_pubkey:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          type: object
        delegator_shares:
          description: >-
            delegator_shares defines total shares issued to a validator's
            delegators.
          type: string
        description:
          description: description defines the description terms for the validator.
          properties:
            details:
              description: details define other optional details.
              type: string
            identity:
              description: >-
                identity defines an optional identity signature (ex. UPort or
                Keybase).
              type: string
            moniker:
              description: moniker defines a human-readable name for the validator.
              type: string
            security_contact:
              description: security_contact defines an optional email for security contact.
              type: string
            website:
              description: website defines an optional website link.
              type: string
          type: object
        jailed:
          description: >-
            jailed defined whether the validator has been jailed from bonded
            status or not.
          type: boolean
        min_self_delegation:
          description: >-
            min_self_delegation is the validator's self declared minimum self
            delegation.
          type: string
        operator_address:
          description: >-
            operator_address defines the address of the validator's operator;
            bech encoded in JSON.
          type: string
        status:
          default: BOND_STATUS_UNSPECIFIED
          description: status is the validator status (bonded/unbonding/unbonded).
          enum:
            - BOND_STATUS_UNSPECIFIED
            - BOND_STATUS_UNBONDED
            - BOND_STATUS_UNBONDING
            - BOND_STATUS_BONDED
          type: string
        tokens:
          description: tokens define the delegated tokens (incl. self-delegation).
          type: string
        unbonding_height:
          description: >-
            unbonding_height defines, if unbonding, the height at which this
            validator has begun unbonding.
          format: int64
          type: string
        unbonding_time:
          description: >-
            unbonding_time defines, if unbonding, the min time for the validator
            to complete unbonding.
          format: date-time
          type: string
      type: object
    cosmos.tx.signing.v1beta1.SignMode:
      default: SIGN_MODE_UNSPECIFIED
      description: >-
        SignMode represents a signing mode with its own security guarantees.

         - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
        rejected
         - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
        verified with raw bytes from Tx
         - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
        human-readable textual representation on top of the binary
        representation

        from SIGN_MODE_DIRECT
         - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
        Amino JSON and will be removed in the future
         - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
        SDK. Ref: https://eips.ethereum.org/EIPS/eip-191


        Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum variant,

        but is not implemented on the SDK by default. To enable EIP-191, you
        need

        to pass a custom `TxConfig` that has an implementation of

        `SignModeHandler` for EIP-191. The SDK may decide to fully support

        EIP-191 in the future.


        Since: cosmos-sdk 0.45.2
      enum:
        - SIGN_MODE_UNSPECIFIED
        - SIGN_MODE_DIRECT
        - SIGN_MODE_TEXTUAL
        - SIGN_MODE_LEGACY_AMINO_JSON
        - SIGN_MODE_EIP_191
      type: string
    cosmos.tx.v1beta1.AuthInfo:
      description: |-
        AuthInfo describes the fee and signer modes that are used to sign a
        transaction.
      properties:
        fee:
          description: >-
            Fee is the fee and gas limit for the transaction. The first signer
            is the

            primary signer and the one which pays the fee. The fee can be
            calculated

            based on the cost of evaluating the body and doing signature
            verification

            of the signers. This can be estimated via simulation.
          properties:
            amount:
              items:
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
                properties:
                  amount:
                    type: string
                  denom:
                    type: string
                type: object
              title: amount is the amount of coins to be paid as a fee
              type: array
            gas_limit:
              format: uint64
              title: >-
                gas_limit is the maximum gas that can be used in transaction
                processing

                before an out of gas error occurs
              type: string
            granter:
              title: >-
                if set, the fee payer (either the first signer or the value of
                the payer field) requests that a fee grant be used

                to pay fees instead of the fee payer's own balance. If an
                appropriate fee grant does not exist or the chain does

                not support fee grants, this will fail
              type: string
            payer:
              description: >-
                if unset, the first signer is responsible for paying the fees.
                If set, the specified account must pay the fees.

                the payer must be a tx signer (and thus have signed this field
                in AuthInfo).

                setting this field does *not* change the ordering of required
                signers for the transaction.
              type: string
          type: object
        signer_infos:
          description: >-
            signer_infos defines the signing modes for the required signers. The
            number

            and order of elements must match the required signers from TxBody's

            messages. The first element is the primary signer and the one which
            pays

            the fee.
          items:
            description: >-
              SignerInfo describes the public key and signing mode of a single
              top-level

              signer.
            properties:
              mode_info:
                description: >-
                  ModeInfo describes the signing mode of a single or nested
                  multisig signer.
                properties:
                  multi:
                    properties:
                      bitarray:
                        description: >-
                          CompactBitArray is an implementation of a space
                          efficient bit array.

                          This is used to ensure that the encoded data takes up
                          a minimal amount of

                          space after proto encoding.

                          This is not thread safe, and is not intended for
                          concurrent usage.
                        properties:
                          elems:
                            format: byte
                            type: string
                          extra_bits_stored:
                            format: int64
                            type: integer
                        title: >-
                          bitarray specifies which keys within the multisig are
                          signing
                        type: object
                      mode_infos:
                        items: {}
                        title: >-
                          mode_infos is the corresponding modes of the signers
                          of the multisig

                          which could include nested multisig public keys
                        type: array
                    title: multi represents a nested multisig signer
                    type: object
                  single:
                    properties:
                      mode:
                        default: SIGN_MODE_UNSPECIFIED
                        description: >-
                          SignMode represents a signing mode with its own
                          security guarantees.

                           - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
                          rejected
                           - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
                          verified with raw bytes from Tx
                           - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
                          human-readable textual representation on top of the
                          binary representation

                          from SIGN_MODE_DIRECT
                           - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
                          Amino JSON and will be removed in the future
                           - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
                          SDK. Ref: https://eips.ethereum.org/EIPS/eip-191


                          Currently, SIGN_MODE_EIP_191 is registered as a
                          SignMode enum variant,

                          but is not implemented on the SDK by default. To
                          enable EIP-191, you need

                          to pass a custom `TxConfig` that has an implementation
                          of

                          `SignModeHandler` for EIP-191. The SDK may decide to
                          fully support

                          EIP-191 in the future.


                          Since: cosmos-sdk 0.45.2
                        enum:
                          - SIGN_MODE_UNSPECIFIED
                          - SIGN_MODE_DIRECT
                          - SIGN_MODE_TEXTUAL
                          - SIGN_MODE_LEGACY_AMINO_JSON
                          - SIGN_MODE_EIP_191
                        title: mode is the signing mode of the single signer
                        type: string
                    title: single represents a single signer
                    type: object
                title: >-
                  mode_info describes the signing mode of the signer and is a
                  nested

                  structure to support nested multisig pubkey's
                type: object
              public_key:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
              sequence:
                description: >-
                  sequence is the sequence of the account, which describes the

                  number of committed transactions signed by a given address. It
                  is used to

                  prevent replay attacks.
                format: uint64
                type: string
            type: object
          type: array
      type: object
    cosmos.tx.v1beta1.BroadcastMode:
      default: BROADCAST_MODE_UNSPECIFIED
      description: >-
        BroadcastMode specifies the broadcast mode for the TxService.Broadcast
        RPC method.

         - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering
         - BROADCAST_MODE_BLOCK: BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for
        the tx to be committed in a block.
         - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
        a CheckTx execution response only.
         - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
        immediately.
      enum:
        - BROADCAST_MODE_UNSPECIFIED
        - BROADCAST_MODE_BLOCK
        - BROADCAST_MODE_SYNC
        - BROADCAST_MODE_ASYNC
      type: string
    cosmos.tx.v1beta1.BroadcastTxRequest:
      description: >-
        BroadcastTxRequest is the request type for the
        Service.BroadcastTxRequest

        RPC method.
      properties:
        mode:
          default: BROADCAST_MODE_UNSPECIFIED
          description: >-
            BroadcastMode specifies the broadcast mode for the
            TxService.Broadcast RPC method.

             - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering
             - BROADCAST_MODE_BLOCK: BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for
            the tx to be committed in a block.
             - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
            a CheckTx execution response only.
             - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
            immediately.
          enum:
            - BROADCAST_MODE_UNSPECIFIED
            - BROADCAST_MODE_BLOCK
            - BROADCAST_MODE_SYNC
            - BROADCAST_MODE_ASYNC
          type: string
        tx_bytes:
          description: tx_bytes is the raw transaction.
          format: byte
          type: string
      type: object
    cosmos.tx.v1beta1.BroadcastTxResponse:
      description: |-
        BroadcastTxResponse is the response type for the
        Service.BroadcastTx method.
      properties:
        tx_response:
          description: >-
            TxResponse defines a structure containing relevant tx data and
            metadata. The

            tags are stringified and the log is JSON decoded.
          properties:
            code:
              description: Response code.
              format: int64
              type: integer
            codespace:
              title: Namespace for the Code
              type: string
            data:
              description: Result bytes, if any.
              type: string
            events:
              description: >-
                Events defines all the events emitted by processing a
                transaction. Note,

                these events include those emitted by processing all the
                messages and those

                emitted from the ante handler. Whereas Logs contains the events,
                with

                additional metadata, emitted only by processing the messages.


                Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
              items:
                description: >-
                  Event allows application developers to attach additional
                  information to

                  ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
                  ResponseDeliverTx.

                  Later, transactions may be queried using these events.
                properties:
                  attributes:
                    items:
                      description: >-
                        EventAttribute is a single key-value pair, associated
                        with an event.
                      properties:
                        index:
                          type: boolean
                        key:
                          format: byte
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  type:
                    type: string
                type: object
              type: array
            gas_used:
              description: Amount of gas consumed by transaction.
              format: int64
              type: string
            gas_wanted:
              description: Amount of gas requested for transaction.
              format: int64
              type: string
            height:
              format: int64
              title: The block height
              type: string
            info:
              description: Additional information. May be non-deterministic.
              type: string
            logs:
              description: >-
                The output of the application's logger (typed). May be
                non-deterministic.
              items:
                description: >-
                  ABCIMessageLog defines a structure containing an indexed tx
                  ABCI message log.
                properties:
                  events:
                    description: >-
                      Events contains a slice of Event objects that were emitted
                      during some

                      execution.
                    items:
                      description: >-
                        StringEvent defines en Event object wrapper where all
                        the attributes

                        contain key/value pairs that are strings instead of raw
                        bytes.
                      properties:
                        attributes:
                          items:
                            description: >-
                              Attribute defines an attribute wrapper where the
                              key and value are

                              strings instead of raw bytes.
                            properties:
                              key:
                                type: string
                              value:
                                type: string
                            type: object
                          type: array
                        type:
                          type: string
                      type: object
                    type: array
                  log:
                    type: string
                  msg_index:
                    format: int64
                    type: integer
                type: object
              type: array
            raw_log:
              description: |-
                The output of the application's logger (raw string). May be
                non-deterministic.
              type: string
            timestamp:
              description: >-
                Time of the previous block. For heights > 1, it's the weighted
                median of

                the timestamps of the valid votes in the block.LastCommit. For
                height == 1,

                it's genesis time.
              type: string
            tx:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
            txhash:
              description: The transaction hash.
              type: string
          type: object
      type: object
    cosmos.tx.v1beta1.Fee:
      description: >-
        Fee includes the amount of coins paid in fees and the maximum

        gas to be used by the transaction. The ratio yields an effective
        "gasprice",

        which must be above some miminum to be accepted into the mempool.
      properties:
        amount:
          items:
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          title: amount is the amount of coins to be paid as a fee
          type: array
        gas_limit:
          format: uint64
          title: >-
            gas_limit is the maximum gas that can be used in transaction
            processing

            before an out of gas error occurs
          type: string
        granter:
          title: >-
            if set, the fee payer (either the first signer or the value of the
            payer field) requests that a fee grant be used

            to pay fees instead of the fee payer's own balance. If an
            appropriate fee grant does not exist or the chain does

            not support fee grants, this will fail
          type: string
        payer:
          description: >-
            if unset, the first signer is responsible for paying the fees. If
            set, the specified account must pay the fees.

            the payer must be a tx signer (and thus have signed this field in
            AuthInfo).

            setting this field does *not* change the ordering of required
            signers for the transaction.
          type: string
      type: object
    cosmos.tx.v1beta1.GetBlockWithTxsResponse:
      description: >-
        GetBlockWithTxsResponse is the response type for the
        Service.GetBlockWithTxs method.


        Since: cosmos-sdk 0.45.2
      properties:
        block:
          properties:
            data:
              properties:
                txs:
                  description: >-
                    Txs that will be applied by state @ block.Height+1.

                    NOTE: not all txs here are valid.  We're just agreeing on
                    the order first.

                    This means that block.AppHash does not include these txs.
                  items:
                    format: byte
                    type: string
                  type: array
              title: Data contains the set of transactions included in the block
              type: object
            evidence:
              properties:
                evidence:
                  items:
                    properties:
                      duplicate_vote_evidence:
                        description: >-
                          DuplicateVoteEvidence contains evidence of a validator
                          signed two conflicting votes.
                        properties:
                          timestamp:
                            format: date-time
                            type: string
                          total_voting_power:
                            format: int64
                            type: string
                          validator_power:
                            format: int64
                            type: string
                          vote_a:
                            description: >-
                              Vote represents a prevote, precommit, or commit
                              vote from validators for

                              consensus.
                            properties:
                              block_id:
                                properties:
                                  hash:
                                    format: byte
                                    type: string
                                  part_set_header:
                                    properties:
                                      hash:
                                        format: byte
                                        type: string
                                      total:
                                        format: int64
                                        type: integer
                                    title: PartsetHeader
                                    type: object
                                title: BlockID
                                type: object
                              height:
                                format: int64
                                type: string
                              round:
                                format: int32
                                type: integer
                              signature:
                                format: byte
                                type: string
                              timestamp:
                                format: date-time
                                type: string
                              type:
                                default: SIGNED_MSG_TYPE_UNKNOWN
                                description: >-
                                  SignedMsgType is a type of signed message in
                                  the consensus.

                                   - SIGNED_MSG_TYPE_PREVOTE: Votes
                                   - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                enum:
                                  - SIGNED_MSG_TYPE_UNKNOWN
                                  - SIGNED_MSG_TYPE_PREVOTE
                                  - SIGNED_MSG_TYPE_PRECOMMIT
                                  - SIGNED_MSG_TYPE_PROPOSAL
                                type: string
                              validator_address:
                                format: byte
                                type: string
                              validator_index:
                                format: int32
                                type: integer
                            type: object
                          vote_b:
                            description: >-
                              Vote represents a prevote, precommit, or commit
                              vote from validators for

                              consensus.
                            properties:
                              block_id:
                                properties:
                                  hash:
                                    format: byte
                                    type: string
                                  part_set_header:
                                    properties:
                                      hash:
                                        format: byte
                                        type: string
                                      total:
                                        format: int64
                                        type: integer
                                    title: PartsetHeader
                                    type: object
                                title: BlockID
                                type: object
                              height:
                                format: int64
                                type: string
                              round:
                                format: int32
                                type: integer
                              signature:
                                format: byte
                                type: string
                              timestamp:
                                format: date-time
                                type: string
                              type:
                                default: SIGNED_MSG_TYPE_UNKNOWN
                                description: >-
                                  SignedMsgType is a type of signed message in
                                  the consensus.

                                   - SIGNED_MSG_TYPE_PREVOTE: Votes
                                   - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                enum:
                                  - SIGNED_MSG_TYPE_UNKNOWN
                                  - SIGNED_MSG_TYPE_PREVOTE
                                  - SIGNED_MSG_TYPE_PRECOMMIT
                                  - SIGNED_MSG_TYPE_PROPOSAL
                                type: string
                              validator_address:
                                format: byte
                                type: string
                              validator_index:
                                format: int32
                                type: integer
                            type: object
                        type: object
                      light_client_attack_evidence:
                        description: >-
                          LightClientAttackEvidence contains evidence of a set
                          of validators attempting to mislead a light client.
                        properties:
                          byzantine_validators:
                            items:
                              properties:
                                address:
                                  format: byte
                                  type: string
                                proposer_priority:
                                  format: int64
                                  type: string
                                pub_key:
                                  properties:
                                    ed25519:
                                      format: byte
                                      type: string
                                    secp256k1:
                                      format: byte
                                      type: string
                                  title: >-
                                    PublicKey defines the keys available for use
                                    with Validators
                                  type: object
                                voting_power:
                                  format: int64
                                  type: string
                              type: object
                            type: array
                          common_height:
                            format: int64
                            type: string
                          conflicting_block:
                            properties:
                              signed_header:
                                properties:
                                  commit:
                                    description: >-
                                      Commit contains the evidence that a block
                                      was committed by a set of validators.
                                    properties:
                                      block_id:
                                        properties:
                                          hash:
                                            format: byte
                                            type: string
                                          part_set_header:
                                            properties:
                                              hash:
                                                format: byte
                                                type: string
                                              total:
                                                format: int64
                                                type: integer
                                            title: PartsetHeader
                                            type: object
                                        title: BlockID
                                        type: object
                                      height:
                                        format: int64
                                        type: string
                                      round:
                                        format: int32
                                        type: integer
                                      signatures:
                                        items:
                                          description: >-
                                            CommitSig is a part of the Vote included
                                            in a Commit.
                                          properties:
                                            block_id_flag:
                                              default: BLOCK_ID_FLAG_UNKNOWN
                                              enum:
                                                - BLOCK_ID_FLAG_UNKNOWN
                                                - BLOCK_ID_FLAG_ABSENT
                                                - BLOCK_ID_FLAG_COMMIT
                                                - BLOCK_ID_FLAG_NIL
                                              title: >-
                                                BlockIdFlag indicates which BlcokID the
                                                signature is for
                                              type: string
                                            signature:
                                              format: byte
                                              type: string
                                            timestamp:
                                              format: date-time
                                              type: string
                                            validator_address:
                                              format: byte
                                              type: string
                                          type: object
                                        type: array
                                    type: object
                                  header:
                                    description: >-
                                      Header defines the structure of a block
                                      header.
                                    properties:
                                      app_hash:
                                        format: byte
                                        type: string
                                      chain_id:
                                        type: string
                                      consensus_hash:
                                        format: byte
                                        type: string
                                      data_hash:
                                        format: byte
                                        type: string
                                      evidence_hash:
                                        format: byte
                                        title: consensus info
                                        type: string
                                      height:
                                        format: int64
                                        type: string
                                      last_block_id:
                                        properties:
                                          hash:
                                            format: byte
                                            type: string
                                          part_set_header:
                                            properties:
                                              hash:
                                                format: byte
                                                type: string
                                              total:
                                                format: int64
                                                type: integer
                                            title: PartsetHeader
                                            type: object
                                        title: prev block info
                                        type: object
                                      last_commit_hash:
                                        format: byte
                                        title: hashes of block data
                                        type: string
                                      last_results_hash:
                                        format: byte
                                        type: string
                                      next_validators_hash:
                                        format: byte
                                        type: string
                                      proposer_address:
                                        format: byte
                                        type: string
                                      time:
                                        format: date-time
                                        type: string
                                      validators_hash:
                                        format: byte
                                        title: >-
                                          hashes from the app output from the prev
                                          block
                                        type: string
                                      version:
                                        description: >-
                                          Consensus captures the consensus rules
                                          for processing a block in the
                                          blockchain,

                                          including all blockchain data structures
                                          and the rules of the application's

                                          state transition machine.
                                        properties:
                                          app:
                                            format: uint64
                                            type: string
                                          block:
                                            format: uint64
                                            type: string
                                        title: basic block info
                                        type: object
                                    type: object
                                type: object
                              validator_set:
                                properties:
                                  proposer:
                                    properties:
                                      address:
                                        format: byte
                                        type: string
                                      proposer_priority:
                                        format: int64
                                        type: string
                                      pub_key:
                                        properties:
                                          ed25519:
                                            format: byte
                                            type: string
                                          secp256k1:
                                            format: byte
                                            type: string
                                        title: >-
                                          PublicKey defines the keys available for
                                          use with Validators
                                        type: object
                                      voting_power:
                                        format: int64
                                        type: string
                                    type: object
                                  total_voting_power:
                                    format: int64
                                    type: string
                                  validators:
                                    items:
                                      properties:
                                        address:
                                          format: byte
                                          type: string
                                        proposer_priority:
                                          format: int64
                                          type: string
                                        pub_key:
                                          properties:
                                            ed25519:
                                              format: byte
                                              type: string
                                            secp256k1:
                                              format: byte
                                              type: string
                                          title: >-
                                            PublicKey defines the keys available for
                                            use with Validators
                                          type: object
                                        voting_power:
                                          format: int64
                                          type: string
                                      type: object
                                    type: array
                                type: object
                            type: object
                          timestamp:
                            format: date-time
                            type: string
                          total_voting_power:
                            format: int64
                            type: string
                        type: object
                    type: object
                  type: array
              type: object
            header:
              description: Header defines the structure of a block header.
              properties:
                app_hash:
                  format: byte
                  type: string
                chain_id:
                  type: string
                consensus_hash:
                  format: byte
                  type: string
                data_hash:
                  format: byte
                  type: string
                evidence_hash:
                  format: byte
                  title: consensus info
                  type: string
                height:
                  format: int64
                  type: string
                last_block_id:
                  properties:
                    hash:
                      format: byte
                      type: string
                    part_set_header:
                      properties:
                        hash:
                          format: byte
                          type: string
                        total:
                          format: int64
                          type: integer
                      title: PartsetHeader
                      type: object
                  title: prev block info
                  type: object
                last_commit_hash:
                  format: byte
                  title: hashes of block data
                  type: string
                last_results_hash:
                  format: byte
                  type: string
                next_validators_hash:
                  format: byte
                  type: string
                proposer_address:
                  format: byte
                  type: string
                time:
                  format: date-time
                  type: string
                validators_hash:
                  format: byte
                  title: hashes from the app output from the prev block
                  type: string
                version:
                  description: >-
                    Consensus captures the consensus rules for processing a
                    block in the blockchain,

                    including all blockchain data structures and the rules of
                    the application's

                    state transition machine.
                  properties:
                    app:
                      format: uint64
                      type: string
                    block:
                      format: uint64
                      type: string
                  title: basic block info
                  type: object
              type: object
            last_commit:
              description: >-
                Commit contains the evidence that a block was committed by a set
                of validators.
              properties:
                block_id:
                  properties:
                    hash:
                      format: byte
                      type: string
                    part_set_header:
                      properties:
                        hash:
                          format: byte
                          type: string
                        total:
                          format: int64
                          type: integer
                      title: PartsetHeader
                      type: object
                  title: BlockID
                  type: object
                height:
                  format: int64
                  type: string
                round:
                  format: int32
                  type: integer
                signatures:
                  items:
                    description: CommitSig is a part of the Vote included in a Commit.
                    properties:
                      block_id_flag:
                        default: BLOCK_ID_FLAG_UNKNOWN
                        enum:
                          - BLOCK_ID_FLAG_UNKNOWN
                          - BLOCK_ID_FLAG_ABSENT
                          - BLOCK_ID_FLAG_COMMIT
                          - BLOCK_ID_FLAG_NIL
                        title: >-
                          BlockIdFlag indicates which BlcokID the signature is
                          for
                        type: string
                      signature:
                        format: byte
                        type: string
                      timestamp:
                        format: date-time
                        type: string
                      validator_address:
                        format: byte
                        type: string
                    type: object
                  type: array
              type: object
          type: object
        block_id:
          properties:
            hash:
              format: byte
              type: string
            part_set_header:
              properties:
                hash:
                  format: byte
                  type: string
                total:
                  format: int64
                  type: integer
              title: PartsetHeader
              type: object
          title: BlockID
          type: object
        pagination:
          description: pagination defines a pagination for the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
        txs:
          description: txs are the transactions in the block.
          items:
            description: Tx is the standard type used for broadcasting transactions.
            properties:
              auth_info:
                description: >-
                  AuthInfo describes the fee and signer modes that are used to
                  sign a

                  transaction.
                properties:
                  fee:
                    description: >-
                      Fee is the fee and gas limit for the transaction. The
                      first signer is the

                      primary signer and the one which pays the fee. The fee can
                      be calculated

                      based on the cost of evaluating the body and doing
                      signature verification

                      of the signers. This can be estimated via simulation.
                    properties:
                      amount:
                        items:
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                          properties:
                            amount:
                              type: string
                            denom:
                              type: string
                          type: object
                        title: amount is the amount of coins to be paid as a fee
                        type: array
                      gas_limit:
                        format: uint64
                        title: >-
                          gas_limit is the maximum gas that can be used in
                          transaction processing

                          before an out of gas error occurs
                        type: string
                      granter:
                        title: >-
                          if set, the fee payer (either the first signer or the
                          value of the payer field) requests that a fee grant be
                          used

                          to pay fees instead of the fee payer's own balance. If
                          an appropriate fee grant does not exist or the chain
                          does

                          not support fee grants, this will fail
                        type: string
                      payer:
                        description: >-
                          if unset, the first signer is responsible for paying
                          the fees. If set, the specified account must pay the
                          fees.

                          the payer must be a tx signer (and thus have signed
                          this field in AuthInfo).

                          setting this field does *not* change the ordering of
                          required signers for the transaction.
                        type: string
                    type: object
                  signer_infos:
                    description: >-
                      signer_infos defines the signing modes for the required
                      signers. The number

                      and order of elements must match the required signers from
                      TxBody's

                      messages. The first element is the primary signer and the
                      one which pays

                      the fee.
                    items:
                      description: >-
                        SignerInfo describes the public key and signing mode of
                        a single top-level

                        signer.
                      properties:
                        mode_info:
                          description: >-
                            ModeInfo describes the signing mode of a single or
                            nested multisig signer.
                          properties:
                            multi:
                              properties:
                                bitarray:
                                  description: >-
                                    CompactBitArray is an implementation of a
                                    space efficient bit array.

                                    This is used to ensure that the encoded data
                                    takes up a minimal amount of

                                    space after proto encoding.

                                    This is not thread safe, and is not intended
                                    for concurrent usage.
                                  properties:
                                    elems:
                                      format: byte
                                      type: string
                                    extra_bits_stored:
                                      format: int64
                                      type: integer
                                  title: >-
                                    bitarray specifies which keys within the
                                    multisig are signing
                                  type: object
                                mode_infos:
                                  items: {}
                                  title: >-
                                    mode_infos is the corresponding modes of the
                                    signers of the multisig

                                    which could include nested multisig public
                                    keys
                                  type: array
                              title: multi represents a nested multisig signer
                              type: object
                            single:
                              properties:
                                mode:
                                  default: SIGN_MODE_UNSPECIFIED
                                  description: >-
                                    SignMode represents a signing mode with its
                                    own security guarantees.

                                     - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
                                    rejected
                                     - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
                                    verified with raw bytes from Tx
                                     - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
                                    human-readable textual representation on top
                                    of the binary representation

                                    from SIGN_MODE_DIRECT
                                     - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
                                    Amino JSON and will be removed in the future
                                     - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
                                    SDK. Ref:
                                    https://eips.ethereum.org/EIPS/eip-191


                                    Currently, SIGN_MODE_EIP_191 is registered
                                    as a SignMode enum variant,

                                    but is not implemented on the SDK by
                                    default. To enable EIP-191, you need

                                    to pass a custom `TxConfig` that has an
                                    implementation of

                                    `SignModeHandler` for EIP-191. The SDK may
                                    decide to fully support

                                    EIP-191 in the future.


                                    Since: cosmos-sdk 0.45.2
                                  enum:
                                    - SIGN_MODE_UNSPECIFIED
                                    - SIGN_MODE_DIRECT
                                    - SIGN_MODE_TEXTUAL
                                    - SIGN_MODE_LEGACY_AMINO_JSON
                                    - SIGN_MODE_EIP_191
                                  title: >-
                                    mode is the signing mode of the single
                                    signer
                                  type: string
                              title: single represents a single signer
                              type: object
                          title: >-
                            mode_info describes the signing mode of the signer
                            and is a nested

                            structure to support nested multisig pubkey's
                          type: object
                        public_key:
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized
                            message.


                            Protobuf library provides support to pack/unpack Any
                            values in the form

                            of utility functions or additional generated methods
                            of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := anypb.New(foo)
                                 if err != nil {
                                   ...
                                 }
                                 ...
                                 foo := &pb.Foo{}
                                 if err := any.UnmarshalTo(foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will
                            by default use

                            'type.googleapis.com/full.type.name' as the type URL
                            and the unpack

                            methods only use the fully qualified type name after
                            the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z"
                            will yield type

                            name "y.z".



                            JSON

                            ====

                            The JSON representation of an `Any` value uses the
                            regular

                            representation of the deserialized, embedded
                            message, with an

                            additional field `@type` which contains the type
                            URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a
                            custom JSON

                            representation, that representation will be embedded
                            adding a field

                            `value` which holds the custom JSON in addition to
                            the `@type`

                            field. Example (for message
                            [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                          properties:
                            type_url:
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must
                                contain at least

                                one "/" character. The last segment of the URL's
                                path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name
                                should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the
                                binary all types that they

                                expect it to use in the context of Any. However,
                                for URLs which use the

                                scheme `http`, `https`, or no scheme, one can
                                optionally set up a type

                                server that maps type URLs to message
                                definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a
                                [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup
                                results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently
                                available in the official

                                protobuf release, and it is not used for type
                                URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty
                                scheme) might be

                                used with implementation specific semantics.
                              type: string
                            value:
                              description: >-
                                Must be a valid serialized protocol buffer of
                                the above specified type.
                              format: byte
                              type: string
                          type: object
                        sequence:
                          description: >-
                            sequence is the sequence of the account, which
                            describes the

                            number of committed transactions signed by a given
                            address. It is used to

                            prevent replay attacks.
                          format: uint64
                          type: string
                      type: object
                    type: array
                title: >-
                  auth_info is the authorization related content of the
                  transaction,

                  specifically signers, signer modes and fee
                type: object
              body:
                description: >-
                  TxBody is the body of a transaction that all signers sign
                  over.
                properties:
                  extension_options:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    title: >-
                      extension_options are arbitrary options that can be added
                      by chains

                      when the default options are not sufficient. If any of
                      these are present

                      and can't be handled, the transaction will be rejected
                    type: array
                  memo:
                    description: >-
                      memo is any arbitrary note/comment to be added to the
                      transaction.

                      WARNING: in clients, any publicly exposed text should not
                      be called memo,

                      but should be called `note` instead (see
                      https://github.com/cosmos/cosmos-sdk/issues/9122).
                    type: string
                  messages:
                    description: >-
                      messages is a list of messages to be executed. The
                      required signers of

                      those messages define the number and order of elements in
                      AuthInfo's

                      signer_infos and Tx's signatures. Each required signer
                      address is added to

                      the list only the first time it occurs.

                      By convention, the first required signer (usually from the
                      first message)

                      is referred to as the primary signer and pays the fee for
                      the whole

                      transaction.
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  non_critical_extension_options:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    title: >-
                      extension_options are arbitrary options that can be added
                      by chains

                      when the default options are not sufficient. If any of
                      these are present

                      and can't be handled, they will be ignored
                    type: array
                  timeout_height:
                    format: uint64
                    title: >-
                      timeout is the block height after which this transaction
                      will not

                      be processed by the chain
                    type: string
                title: body is the processable content of the transaction
                type: object
              signatures:
                description: >-
                  signatures is a list of signatures that matches the length and
                  order of

                  AuthInfo's signer_infos to allow connecting signature meta
                  information like

                  public key and signing mode by position.
                items:
                  format: byte
                  type: string
                type: array
            type: object
          type: array
      type: object
    cosmos.tx.v1beta1.GetTxResponse:
      description: GetTxResponse is the response type for the Service.GetTx method.
      properties:
        tx:
          description: Tx is the standard type used for broadcasting transactions.
          properties:
            auth_info:
              description: >-
                AuthInfo describes the fee and signer modes that are used to
                sign a

                transaction.
              properties:
                fee:
                  description: >-
                    Fee is the fee and gas limit for the transaction. The first
                    signer is the

                    primary signer and the one which pays the fee. The fee can
                    be calculated

                    based on the cost of evaluating the body and doing signature
                    verification

                    of the signers. This can be estimated via simulation.
                  properties:
                    amount:
                      items:
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                        properties:
                          amount:
                            type: string
                          denom:
                            type: string
                        type: object
                      title: amount is the amount of coins to be paid as a fee
                      type: array
                    gas_limit:
                      format: uint64
                      title: >-
                        gas_limit is the maximum gas that can be used in
                        transaction processing

                        before an out of gas error occurs
                      type: string
                    granter:
                      title: >-
                        if set, the fee payer (either the first signer or the
                        value of the payer field) requests that a fee grant be
                        used

                        to pay fees instead of the fee payer's own balance. If
                        an appropriate fee grant does not exist or the chain
                        does

                        not support fee grants, this will fail
                      type: string
                    payer:
                      description: >-
                        if unset, the first signer is responsible for paying the
                        fees. If set, the specified account must pay the fees.

                        the payer must be a tx signer (and thus have signed this
                        field in AuthInfo).

                        setting this field does *not* change the ordering of
                        required signers for the transaction.
                      type: string
                  type: object
                signer_infos:
                  description: >-
                    signer_infos defines the signing modes for the required
                    signers. The number

                    and order of elements must match the required signers from
                    TxBody's

                    messages. The first element is the primary signer and the
                    one which pays

                    the fee.
                  items:
                    description: >-
                      SignerInfo describes the public key and signing mode of a
                      single top-level

                      signer.
                    properties:
                      mode_info:
                        description: >-
                          ModeInfo describes the signing mode of a single or
                          nested multisig signer.
                        properties:
                          multi:
                            properties:
                              bitarray:
                                description: >-
                                  CompactBitArray is an implementation of a
                                  space efficient bit array.

                                  This is used to ensure that the encoded data
                                  takes up a minimal amount of

                                  space after proto encoding.

                                  This is not thread safe, and is not intended
                                  for concurrent usage.
                                properties:
                                  elems:
                                    format: byte
                                    type: string
                                  extra_bits_stored:
                                    format: int64
                                    type: integer
                                title: >-
                                  bitarray specifies which keys within the
                                  multisig are signing
                                type: object
                              mode_infos:
                                items: {}
                                title: >-
                                  mode_infos is the corresponding modes of the
                                  signers of the multisig

                                  which could include nested multisig public
                                  keys
                                type: array
                            title: multi represents a nested multisig signer
                            type: object
                          single:
                            properties:
                              mode:
                                default: SIGN_MODE_UNSPECIFIED
                                description: >-
                                  SignMode represents a signing mode with its
                                  own security guarantees.

                                   - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
                                  rejected
                                   - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
                                  verified with raw bytes from Tx
                                   - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
                                  human-readable textual representation on top
                                  of the binary representation

                                  from SIGN_MODE_DIRECT
                                   - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
                                  Amino JSON and will be removed in the future
                                   - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
                                  SDK. Ref:
                                  https://eips.ethereum.org/EIPS/eip-191


                                  Currently, SIGN_MODE_EIP_191 is registered as
                                  a SignMode enum variant,

                                  but is not implemented on the SDK by default.
                                  To enable EIP-191, you need

                                  to pass a custom `TxConfig` that has an
                                  implementation of

                                  `SignModeHandler` for EIP-191. The SDK may
                                  decide to fully support

                                  EIP-191 in the future.


                                  Since: cosmos-sdk 0.45.2
                                enum:
                                  - SIGN_MODE_UNSPECIFIED
                                  - SIGN_MODE_DIRECT
                                  - SIGN_MODE_TEXTUAL
                                  - SIGN_MODE_LEGACY_AMINO_JSON
                                  - SIGN_MODE_EIP_191
                                title: mode is the signing mode of the single signer
                                type: string
                            title: single represents a single signer
                            type: object
                        title: >-
                          mode_info describes the signing mode of the signer and
                          is a nested

                          structure to support nested multisig pubkey's
                        type: object
                      public_key:
                        description: >-
                          `Any` contains an arbitrary serialized protocol buffer
                          message along with a

                          URL that describes the type of the serialized message.


                          Protobuf library provides support to pack/unpack Any
                          values in the form

                          of utility functions or additional generated methods
                          of the Any type.


                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }

                           Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                           Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := anypb.New(foo)
                               if err != nil {
                                 ...
                               }
                               ...
                               foo := &pb.Foo{}
                               if err := any.UnmarshalTo(foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by
                          default use

                          'type.googleapis.com/full.type.name' as the type URL
                          and the unpack

                          methods only use the fully qualified type name after
                          the last '/'

                          in the type URL, for example "foo.bar.com/x/y.z" will
                          yield type

                          name "y.z".



                          JSON

                          ====

                          The JSON representation of an `Any` value uses the
                          regular

                          representation of the deserialized, embedded message,
                          with an

                          additional field `@type` which contains the type URL.
                          Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a
                          custom JSON

                          representation, that representation will be embedded
                          adding a field

                          `value` which holds the custom JSON in addition to the
                          `@type`

                          field. Example (for message
                          [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                        properties:
                          type_url:
                            description: >-
                              A URL/resource name that uniquely identifies the
                              type of the serialized

                              protocol buffer message. This string must contain
                              at least

                              one "/" character. The last segment of the URL's
                              path must represent

                              the fully qualified name of the type (as in

                              `path/google.protobuf.Duration`). The name should
                              be in a canonical form

                              (e.g., leading "." is not accepted).


                              In practice, teams usually precompile into the
                              binary all types that they

                              expect it to use in the context of Any. However,
                              for URLs which use the

                              scheme `http`, `https`, or no scheme, one can
                              optionally set up a type

                              server that maps type URLs to message definitions
                              as follows:


                              * If no scheme is provided, `https` is assumed.

                              * An HTTP GET on the URL must yield a
                              [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results
                              based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently
                              available in the official

                              protobuf release, and it is not used for type URLs
                              beginning with

                              type.googleapis.com.


                              Schemes other than `http`, `https` (or the empty
                              scheme) might be

                              used with implementation specific semantics.
                            type: string
                          value:
                            description: >-
                              Must be a valid serialized protocol buffer of the
                              above specified type.
                            format: byte
                            type: string
                        type: object
                      sequence:
                        description: >-
                          sequence is the sequence of the account, which
                          describes the

                          number of committed transactions signed by a given
                          address. It is used to

                          prevent replay attacks.
                        format: uint64
                        type: string
                    type: object
                  type: array
              title: >-
                auth_info is the authorization related content of the
                transaction,

                specifically signers, signer modes and fee
              type: object
            body:
              description: TxBody is the body of a transaction that all signers sign over.
              properties:
                extension_options:
                  items:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    type: object
                  title: >-
                    extension_options are arbitrary options that can be added by
                    chains

                    when the default options are not sufficient. If any of these
                    are present

                    and can't be handled, the transaction will be rejected
                  type: array
                memo:
                  description: >-
                    memo is any arbitrary note/comment to be added to the
                    transaction.

                    WARNING: in clients, any publicly exposed text should not be
                    called memo,

                    but should be called `note` instead (see
                    https://github.com/cosmos/cosmos-sdk/issues/9122).
                  type: string
                messages:
                  description: >-
                    messages is a list of messages to be executed. The required
                    signers of

                    those messages define the number and order of elements in
                    AuthInfo's

                    signer_infos and Tx's signatures. Each required signer
                    address is added to

                    the list only the first time it occurs.

                    By convention, the first required signer (usually from the
                    first message)

                    is referred to as the primary signer and pays the fee for
                    the whole

                    transaction.
                  items:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    type: object
                  type: array
                non_critical_extension_options:
                  items:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    type: object
                  title: >-
                    extension_options are arbitrary options that can be added by
                    chains

                    when the default options are not sufficient. If any of these
                    are present

                    and can't be handled, they will be ignored
                  type: array
                timeout_height:
                  format: uint64
                  title: >-
                    timeout is the block height after which this transaction
                    will not

                    be processed by the chain
                  type: string
              title: body is the processable content of the transaction
              type: object
            signatures:
              description: >-
                signatures is a list of signatures that matches the length and
                order of

                AuthInfo's signer_infos to allow connecting signature meta
                information like

                public key and signing mode by position.
              items:
                format: byte
                type: string
              type: array
          type: object
        tx_response:
          description: >-
            TxResponse defines a structure containing relevant tx data and
            metadata. The

            tags are stringified and the log is JSON decoded.
          properties:
            code:
              description: Response code.
              format: int64
              type: integer
            codespace:
              title: Namespace for the Code
              type: string
            data:
              description: Result bytes, if any.
              type: string
            events:
              description: >-
                Events defines all the events emitted by processing a
                transaction. Note,

                these events include those emitted by processing all the
                messages and those

                emitted from the ante handler. Whereas Logs contains the events,
                with

                additional metadata, emitted only by processing the messages.


                Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
              items:
                description: >-
                  Event allows application developers to attach additional
                  information to

                  ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
                  ResponseDeliverTx.

                  Later, transactions may be queried using these events.
                properties:
                  attributes:
                    items:
                      description: >-
                        EventAttribute is a single key-value pair, associated
                        with an event.
                      properties:
                        index:
                          type: boolean
                        key:
                          format: byte
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  type:
                    type: string
                type: object
              type: array
            gas_used:
              description: Amount of gas consumed by transaction.
              format: int64
              type: string
            gas_wanted:
              description: Amount of gas requested for transaction.
              format: int64
              type: string
            height:
              format: int64
              title: The block height
              type: string
            info:
              description: Additional information. May be non-deterministic.
              type: string
            logs:
              description: >-
                The output of the application's logger (typed). May be
                non-deterministic.
              items:
                description: >-
                  ABCIMessageLog defines a structure containing an indexed tx
                  ABCI message log.
                properties:
                  events:
                    description: >-
                      Events contains a slice of Event objects that were emitted
                      during some

                      execution.
                    items:
                      description: >-
                        StringEvent defines en Event object wrapper where all
                        the attributes

                        contain key/value pairs that are strings instead of raw
                        bytes.
                      properties:
                        attributes:
                          items:
                            description: >-
                              Attribute defines an attribute wrapper where the
                              key and value are

                              strings instead of raw bytes.
                            properties:
                              key:
                                type: string
                              value:
                                type: string
                            type: object
                          type: array
                        type:
                          type: string
                      type: object
                    type: array
                  log:
                    type: string
                  msg_index:
                    format: int64
                    type: integer
                type: object
              type: array
            raw_log:
              description: |-
                The output of the application's logger (raw string). May be
                non-deterministic.
              type: string
            timestamp:
              description: >-
                Time of the previous block. For heights > 1, it's the weighted
                median of

                the timestamps of the valid votes in the block.LastCommit. For
                height == 1,

                it's genesis time.
              type: string
            tx:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
            txhash:
              description: The transaction hash.
              type: string
          type: object
      type: object
    cosmos.tx.v1beta1.GetTxsEventResponse:
      description: |-
        GetTxsEventResponse is the response type for the Service.TxsByEvents
        RPC method.
      properties:
        pagination:
          description: pagination defines a pagination for the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
        tx_responses:
          description: tx_responses is the list of queried TxResponses.
          items:
            description: >-
              TxResponse defines a structure containing relevant tx data and
              metadata. The

              tags are stringified and the log is JSON decoded.
            properties:
              code:
                description: Response code.
                format: int64
                type: integer
              codespace:
                title: Namespace for the Code
                type: string
              data:
                description: Result bytes, if any.
                type: string
              events:
                description: >-
                  Events defines all the events emitted by processing a
                  transaction. Note,

                  these events include those emitted by processing all the
                  messages and those

                  emitted from the ante handler. Whereas Logs contains the
                  events, with

                  additional metadata, emitted only by processing the messages.


                  Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
                items:
                  description: >-
                    Event allows application developers to attach additional
                    information to

                    ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
                    ResponseDeliverTx.

                    Later, transactions may be queried using these events.
                  properties:
                    attributes:
                      items:
                        description: >-
                          EventAttribute is a single key-value pair, associated
                          with an event.
                        properties:
                          index:
                            type: boolean
                          key:
                            format: byte
                            type: string
                          value:
                            format: byte
                            type: string
                        type: object
                      type: array
                    type:
                      type: string
                  type: object
                type: array
              gas_used:
                description: Amount of gas consumed by transaction.
                format: int64
                type: string
              gas_wanted:
                description: Amount of gas requested for transaction.
                format: int64
                type: string
              height:
                format: int64
                title: The block height
                type: string
              info:
                description: Additional information. May be non-deterministic.
                type: string
              logs:
                description: >-
                  The output of the application's logger (typed). May be
                  non-deterministic.
                items:
                  description: >-
                    ABCIMessageLog defines a structure containing an indexed tx
                    ABCI message log.
                  properties:
                    events:
                      description: >-
                        Events contains a slice of Event objects that were
                        emitted during some

                        execution.
                      items:
                        description: >-
                          StringEvent defines en Event object wrapper where all
                          the attributes

                          contain key/value pairs that are strings instead of
                          raw bytes.
                        properties:
                          attributes:
                            items:
                              description: >-
                                Attribute defines an attribute wrapper where the
                                key and value are

                                strings instead of raw bytes.
                              properties:
                                key:
                                  type: string
                                value:
                                  type: string
                              type: object
                            type: array
                          type:
                            type: string
                        type: object
                      type: array
                    log:
                      type: string
                    msg_index:
                      format: int64
                      type: integer
                  type: object
                type: array
              raw_log:
                description: |-
                  The output of the application's logger (raw string). May be
                  non-deterministic.
                type: string
              timestamp:
                description: >-
                  Time of the previous block. For heights > 1, it's the weighted
                  median of

                  the timestamps of the valid votes in the block.LastCommit. For
                  height == 1,

                  it's genesis time.
                type: string
              tx:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
              txhash:
                description: The transaction hash.
                type: string
            type: object
          type: array
        txs:
          description: txs is the list of queried transactions.
          items:
            description: Tx is the standard type used for broadcasting transactions.
            properties:
              auth_info:
                description: >-
                  AuthInfo describes the fee and signer modes that are used to
                  sign a

                  transaction.
                properties:
                  fee:
                    description: >-
                      Fee is the fee and gas limit for the transaction. The
                      first signer is the

                      primary signer and the one which pays the fee. The fee can
                      be calculated

                      based on the cost of evaluating the body and doing
                      signature verification

                      of the signers. This can be estimated via simulation.
                    properties:
                      amount:
                        items:
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                          properties:
                            amount:
                              type: string
                            denom:
                              type: string
                          type: object
                        title: amount is the amount of coins to be paid as a fee
                        type: array
                      gas_limit:
                        format: uint64
                        title: >-
                          gas_limit is the maximum gas that can be used in
                          transaction processing

                          before an out of gas error occurs
                        type: string
                      granter:
                        title: >-
                          if set, the fee payer (either the first signer or the
                          value of the payer field) requests that a fee grant be
                          used

                          to pay fees instead of the fee payer's own balance. If
                          an appropriate fee grant does not exist or the chain
                          does

                          not support fee grants, this will fail
                        type: string
                      payer:
                        description: >-
                          if unset, the first signer is responsible for paying
                          the fees. If set, the specified account must pay the
                          fees.

                          the payer must be a tx signer (and thus have signed
                          this field in AuthInfo).

                          setting this field does *not* change the ordering of
                          required signers for the transaction.
                        type: string
                    type: object
                  signer_infos:
                    description: >-
                      signer_infos defines the signing modes for the required
                      signers. The number

                      and order of elements must match the required signers from
                      TxBody's

                      messages. The first element is the primary signer and the
                      one which pays

                      the fee.
                    items:
                      description: >-
                        SignerInfo describes the public key and signing mode of
                        a single top-level

                        signer.
                      properties:
                        mode_info:
                          description: >-
                            ModeInfo describes the signing mode of a single or
                            nested multisig signer.
                          properties:
                            multi:
                              properties:
                                bitarray:
                                  description: >-
                                    CompactBitArray is an implementation of a
                                    space efficient bit array.

                                    This is used to ensure that the encoded data
                                    takes up a minimal amount of

                                    space after proto encoding.

                                    This is not thread safe, and is not intended
                                    for concurrent usage.
                                  properties:
                                    elems:
                                      format: byte
                                      type: string
                                    extra_bits_stored:
                                      format: int64
                                      type: integer
                                  title: >-
                                    bitarray specifies which keys within the
                                    multisig are signing
                                  type: object
                                mode_infos:
                                  items: {}
                                  title: >-
                                    mode_infos is the corresponding modes of the
                                    signers of the multisig

                                    which could include nested multisig public
                                    keys
                                  type: array
                              title: multi represents a nested multisig signer
                              type: object
                            single:
                              properties:
                                mode:
                                  default: SIGN_MODE_UNSPECIFIED
                                  description: >-
                                    SignMode represents a signing mode with its
                                    own security guarantees.

                                     - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
                                    rejected
                                     - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
                                    verified with raw bytes from Tx
                                     - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
                                    human-readable textual representation on top
                                    of the binary representation

                                    from SIGN_MODE_DIRECT
                                     - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
                                    Amino JSON and will be removed in the future
                                     - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
                                    SDK. Ref:
                                    https://eips.ethereum.org/EIPS/eip-191


                                    Currently, SIGN_MODE_EIP_191 is registered
                                    as a SignMode enum variant,

                                    but is not implemented on the SDK by
                                    default. To enable EIP-191, you need

                                    to pass a custom `TxConfig` that has an
                                    implementation of

                                    `SignModeHandler` for EIP-191. The SDK may
                                    decide to fully support

                                    EIP-191 in the future.


                                    Since: cosmos-sdk 0.45.2
                                  enum:
                                    - SIGN_MODE_UNSPECIFIED
                                    - SIGN_MODE_DIRECT
                                    - SIGN_MODE_TEXTUAL
                                    - SIGN_MODE_LEGACY_AMINO_JSON
                                    - SIGN_MODE_EIP_191
                                  title: >-
                                    mode is the signing mode of the single
                                    signer
                                  type: string
                              title: single represents a single signer
                              type: object
                          title: >-
                            mode_info describes the signing mode of the signer
                            and is a nested

                            structure to support nested multisig pubkey's
                          type: object
                        public_key:
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized
                            message.


                            Protobuf library provides support to pack/unpack Any
                            values in the form

                            of utility functions or additional generated methods
                            of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := anypb.New(foo)
                                 if err != nil {
                                   ...
                                 }
                                 ...
                                 foo := &pb.Foo{}
                                 if err := any.UnmarshalTo(foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will
                            by default use

                            'type.googleapis.com/full.type.name' as the type URL
                            and the unpack

                            methods only use the fully qualified type name after
                            the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z"
                            will yield type

                            name "y.z".



                            JSON

                            ====

                            The JSON representation of an `Any` value uses the
                            regular

                            representation of the deserialized, embedded
                            message, with an

                            additional field `@type` which contains the type
                            URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a
                            custom JSON

                            representation, that representation will be embedded
                            adding a field

                            `value` which holds the custom JSON in addition to
                            the `@type`

                            field. Example (for message
                            [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                          properties:
                            type_url:
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must
                                contain at least

                                one "/" character. The last segment of the URL's
                                path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name
                                should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the
                                binary all types that they

                                expect it to use in the context of Any. However,
                                for URLs which use the

                                scheme `http`, `https`, or no scheme, one can
                                optionally set up a type

                                server that maps type URLs to message
                                definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a
                                [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup
                                results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently
                                available in the official

                                protobuf release, and it is not used for type
                                URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty
                                scheme) might be

                                used with implementation specific semantics.
                              type: string
                            value:
                              description: >-
                                Must be a valid serialized protocol buffer of
                                the above specified type.
                              format: byte
                              type: string
                          type: object
                        sequence:
                          description: >-
                            sequence is the sequence of the account, which
                            describes the

                            number of committed transactions signed by a given
                            address. It is used to

                            prevent replay attacks.
                          format: uint64
                          type: string
                      type: object
                    type: array
                title: >-
                  auth_info is the authorization related content of the
                  transaction,

                  specifically signers, signer modes and fee
                type: object
              body:
                description: >-
                  TxBody is the body of a transaction that all signers sign
                  over.
                properties:
                  extension_options:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    title: >-
                      extension_options are arbitrary options that can be added
                      by chains

                      when the default options are not sufficient. If any of
                      these are present

                      and can't be handled, the transaction will be rejected
                    type: array
                  memo:
                    description: >-
                      memo is any arbitrary note/comment to be added to the
                      transaction.

                      WARNING: in clients, any publicly exposed text should not
                      be called memo,

                      but should be called `note` instead (see
                      https://github.com/cosmos/cosmos-sdk/issues/9122).
                    type: string
                  messages:
                    description: >-
                      messages is a list of messages to be executed. The
                      required signers of

                      those messages define the number and order of elements in
                      AuthInfo's

                      signer_infos and Tx's signatures. Each required signer
                      address is added to

                      the list only the first time it occurs.

                      By convention, the first required signer (usually from the
                      first message)

                      is referred to as the primary signer and pays the fee for
                      the whole

                      transaction.
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  non_critical_extension_options:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    title: >-
                      extension_options are arbitrary options that can be added
                      by chains

                      when the default options are not sufficient. If any of
                      these are present

                      and can't be handled, they will be ignored
                    type: array
                  timeout_height:
                    format: uint64
                    title: >-
                      timeout is the block height after which this transaction
                      will not

                      be processed by the chain
                    type: string
                title: body is the processable content of the transaction
                type: object
              signatures:
                description: >-
                  signatures is a list of signatures that matches the length and
                  order of

                  AuthInfo's signer_infos to allow connecting signature meta
                  information like

                  public key and signing mode by position.
                items:
                  format: byte
                  type: string
                type: array
            type: object
          type: array
      type: object
    cosmos.tx.v1beta1.ModeInfo:
      description: >-
        ModeInfo describes the signing mode of a single or nested multisig
        signer.
      properties:
        multi:
          properties:
            bitarray:
              description: >-
                CompactBitArray is an implementation of a space efficient bit
                array.

                This is used to ensure that the encoded data takes up a minimal
                amount of

                space after proto encoding.

                This is not thread safe, and is not intended for concurrent
                usage.
              properties:
                elems:
                  format: byte
                  type: string
                extra_bits_stored:
                  format: int64
                  type: integer
              title: bitarray specifies which keys within the multisig are signing
              type: object
            mode_infos:
              items: {}
              title: >-
                mode_infos is the corresponding modes of the signers of the
                multisig

                which could include nested multisig public keys
              type: array
          title: multi represents a nested multisig signer
          type: object
        single:
          properties:
            mode:
              default: SIGN_MODE_UNSPECIFIED
              description: >-
                SignMode represents a signing mode with its own security
                guarantees.

                 - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
                rejected
                 - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
                verified with raw bytes from Tx
                 - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
                human-readable textual representation on top of the binary
                representation

                from SIGN_MODE_DIRECT
                 - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
                Amino JSON and will be removed in the future
                 - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
                SDK. Ref: https://eips.ethereum.org/EIPS/eip-191


                Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum
                variant,

                but is not implemented on the SDK by default. To enable EIP-191,
                you need

                to pass a custom `TxConfig` that has an implementation of

                `SignModeHandler` for EIP-191. The SDK may decide to fully
                support

                EIP-191 in the future.


                Since: cosmos-sdk 0.45.2
              enum:
                - SIGN_MODE_UNSPECIFIED
                - SIGN_MODE_DIRECT
                - SIGN_MODE_TEXTUAL
                - SIGN_MODE_LEGACY_AMINO_JSON
                - SIGN_MODE_EIP_191
              title: mode is the signing mode of the single signer
              type: string
          title: single represents a single signer
          type: object
      type: object
    cosmos.tx.v1beta1.ModeInfo.Multi:
      properties:
        bitarray:
          description: >-
            CompactBitArray is an implementation of a space efficient bit array.

            This is used to ensure that the encoded data takes up a minimal
            amount of

            space after proto encoding.

            This is not thread safe, and is not intended for concurrent usage.
          properties:
            elems:
              format: byte
              type: string
            extra_bits_stored:
              format: int64
              type: integer
          title: bitarray specifies which keys within the multisig are signing
          type: object
        mode_infos:
          items: {}
          title: |-
            mode_infos is the corresponding modes of the signers of the multisig
            which could include nested multisig public keys
          type: array
      title: Multi is the mode info for a multisig public key
      type: object
    cosmos.tx.v1beta1.ModeInfo.Single:
      properties:
        mode:
          default: SIGN_MODE_UNSPECIFIED
          description: >-
            SignMode represents a signing mode with its own security guarantees.

             - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
            rejected
             - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
            verified with raw bytes from Tx
             - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
            human-readable textual representation on top of the binary
            representation

            from SIGN_MODE_DIRECT
             - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
            Amino JSON and will be removed in the future
             - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
            SDK. Ref: https://eips.ethereum.org/EIPS/eip-191


            Currently, SIGN_MODE_EIP_191 is registered as a SignMode enum
            variant,

            but is not implemented on the SDK by default. To enable EIP-191, you
            need

            to pass a custom `TxConfig` that has an implementation of

            `SignModeHandler` for EIP-191. The SDK may decide to fully support

            EIP-191 in the future.


            Since: cosmos-sdk 0.45.2
          enum:
            - SIGN_MODE_UNSPECIFIED
            - SIGN_MODE_DIRECT
            - SIGN_MODE_TEXTUAL
            - SIGN_MODE_LEGACY_AMINO_JSON
            - SIGN_MODE_EIP_191
          title: mode is the signing mode of the single signer
          type: string
      title: >-
        Single is the mode info for a single signer. It is structured as a
        message

        to allow for additional fields such as locale for SIGN_MODE_TEXTUAL in
        the

        future
      type: object
    cosmos.tx.v1beta1.OrderBy:
      default: ORDER_BY_UNSPECIFIED
      description: >-
        - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown
        sorting order. OrderBy defaults to ASC in this case.
         - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order
         - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
      enum:
        - ORDER_BY_UNSPECIFIED
        - ORDER_BY_ASC
        - ORDER_BY_DESC
      title: OrderBy defines the sorting order
      type: string
    cosmos.tx.v1beta1.SignerInfo:
      description: >-
        SignerInfo describes the public key and signing mode of a single
        top-level

        signer.
      properties:
        mode_info:
          description: >-
            ModeInfo describes the signing mode of a single or nested multisig
            signer.
          properties:
            multi:
              properties:
                bitarray:
                  description: >-
                    CompactBitArray is an implementation of a space efficient
                    bit array.

                    This is used to ensure that the encoded data takes up a
                    minimal amount of

                    space after proto encoding.

                    This is not thread safe, and is not intended for concurrent
                    usage.
                  properties:
                    elems:
                      format: byte
                      type: string
                    extra_bits_stored:
                      format: int64
                      type: integer
                  title: >-
                    bitarray specifies which keys within the multisig are
                    signing
                  type: object
                mode_infos:
                  items: {}
                  title: >-
                    mode_infos is the corresponding modes of the signers of the
                    multisig

                    which could include nested multisig public keys
                  type: array
              title: multi represents a nested multisig signer
              type: object
            single:
              properties:
                mode:
                  default: SIGN_MODE_UNSPECIFIED
                  description: >-
                    SignMode represents a signing mode with its own security
                    guarantees.

                     - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
                    rejected
                     - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
                    verified with raw bytes from Tx
                     - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
                    human-readable textual representation on top of the binary
                    representation

                    from SIGN_MODE_DIRECT
                     - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
                    Amino JSON and will be removed in the future
                     - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
                    SDK. Ref: https://eips.ethereum.org/EIPS/eip-191


                    Currently, SIGN_MODE_EIP_191 is registered as a SignMode
                    enum variant,

                    but is not implemented on the SDK by default. To enable
                    EIP-191, you need

                    to pass a custom `TxConfig` that has an implementation of

                    `SignModeHandler` for EIP-191. The SDK may decide to fully
                    support

                    EIP-191 in the future.


                    Since: cosmos-sdk 0.45.2
                  enum:
                    - SIGN_MODE_UNSPECIFIED
                    - SIGN_MODE_DIRECT
                    - SIGN_MODE_TEXTUAL
                    - SIGN_MODE_LEGACY_AMINO_JSON
                    - SIGN_MODE_EIP_191
                  title: mode is the signing mode of the single signer
                  type: string
              title: single represents a single signer
              type: object
          title: |-
            mode_info describes the signing mode of the signer and is a nested
            structure to support nested multisig pubkey's
          type: object
        public_key:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          type: object
        sequence:
          description: >-
            sequence is the sequence of the account, which describes the

            number of committed transactions signed by a given address. It is
            used to

            prevent replay attacks.
          format: uint64
          type: string
      type: object
    cosmos.tx.v1beta1.SimulateRequest:
      description: |-
        SimulateRequest is the request type for the Service.Simulate
        RPC method.
      properties:
        tx:
          description: |-
            tx is the transaction to simulate.
            Deprecated. Send raw tx bytes instead.
          properties:
            auth_info:
              description: >-
                AuthInfo describes the fee and signer modes that are used to
                sign a

                transaction.
              properties:
                fee:
                  description: >-
                    Fee is the fee and gas limit for the transaction. The first
                    signer is the

                    primary signer and the one which pays the fee. The fee can
                    be calculated

                    based on the cost of evaluating the body and doing signature
                    verification

                    of the signers. This can be estimated via simulation.
                  properties:
                    amount:
                      items:
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                        properties:
                          amount:
                            type: string
                          denom:
                            type: string
                        type: object
                      title: amount is the amount of coins to be paid as a fee
                      type: array
                    gas_limit:
                      format: uint64
                      title: >-
                        gas_limit is the maximum gas that can be used in
                        transaction processing

                        before an out of gas error occurs
                      type: string
                    granter:
                      title: >-
                        if set, the fee payer (either the first signer or the
                        value of the payer field) requests that a fee grant be
                        used

                        to pay fees instead of the fee payer's own balance. If
                        an appropriate fee grant does not exist or the chain
                        does

                        not support fee grants, this will fail
                      type: string
                    payer:
                      description: >-
                        if unset, the first signer is responsible for paying the
                        fees. If set, the specified account must pay the fees.

                        the payer must be a tx signer (and thus have signed this
                        field in AuthInfo).

                        setting this field does *not* change the ordering of
                        required signers for the transaction.
                      type: string
                  type: object
                signer_infos:
                  description: >-
                    signer_infos defines the signing modes for the required
                    signers. The number

                    and order of elements must match the required signers from
                    TxBody's

                    messages. The first element is the primary signer and the
                    one which pays

                    the fee.
                  items:
                    description: >-
                      SignerInfo describes the public key and signing mode of a
                      single top-level

                      signer.
                    properties:
                      mode_info:
                        description: >-
                          ModeInfo describes the signing mode of a single or
                          nested multisig signer.
                        properties:
                          multi:
                            properties:
                              bitarray:
                                description: >-
                                  CompactBitArray is an implementation of a
                                  space efficient bit array.

                                  This is used to ensure that the encoded data
                                  takes up a minimal amount of

                                  space after proto encoding.

                                  This is not thread safe, and is not intended
                                  for concurrent usage.
                                properties:
                                  elems:
                                    format: byte
                                    type: string
                                  extra_bits_stored:
                                    format: int64
                                    type: integer
                                title: >-
                                  bitarray specifies which keys within the
                                  multisig are signing
                                type: object
                              mode_infos:
                                items: {}
                                title: >-
                                  mode_infos is the corresponding modes of the
                                  signers of the multisig

                                  which could include nested multisig public
                                  keys
                                type: array
                            title: multi represents a nested multisig signer
                            type: object
                          single:
                            properties:
                              mode:
                                default: SIGN_MODE_UNSPECIFIED
                                description: >-
                                  SignMode represents a signing mode with its
                                  own security guarantees.

                                   - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
                                  rejected
                                   - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
                                  verified with raw bytes from Tx
                                   - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
                                  human-readable textual representation on top
                                  of the binary representation

                                  from SIGN_MODE_DIRECT
                                   - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
                                  Amino JSON and will be removed in the future
                                   - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
                                  SDK. Ref:
                                  https://eips.ethereum.org/EIPS/eip-191


                                  Currently, SIGN_MODE_EIP_191 is registered as
                                  a SignMode enum variant,

                                  but is not implemented on the SDK by default.
                                  To enable EIP-191, you need

                                  to pass a custom `TxConfig` that has an
                                  implementation of

                                  `SignModeHandler` for EIP-191. The SDK may
                                  decide to fully support

                                  EIP-191 in the future.


                                  Since: cosmos-sdk 0.45.2
                                enum:
                                  - SIGN_MODE_UNSPECIFIED
                                  - SIGN_MODE_DIRECT
                                  - SIGN_MODE_TEXTUAL
                                  - SIGN_MODE_LEGACY_AMINO_JSON
                                  - SIGN_MODE_EIP_191
                                title: mode is the signing mode of the single signer
                                type: string
                            title: single represents a single signer
                            type: object
                        title: >-
                          mode_info describes the signing mode of the signer and
                          is a nested

                          structure to support nested multisig pubkey's
                        type: object
                      public_key:
                        description: >-
                          `Any` contains an arbitrary serialized protocol buffer
                          message along with a

                          URL that describes the type of the serialized message.


                          Protobuf library provides support to pack/unpack Any
                          values in the form

                          of utility functions or additional generated methods
                          of the Any type.


                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }

                           Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                           Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := anypb.New(foo)
                               if err != nil {
                                 ...
                               }
                               ...
                               foo := &pb.Foo{}
                               if err := any.UnmarshalTo(foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by
                          default use

                          'type.googleapis.com/full.type.name' as the type URL
                          and the unpack

                          methods only use the fully qualified type name after
                          the last '/'

                          in the type URL, for example "foo.bar.com/x/y.z" will
                          yield type

                          name "y.z".



                          JSON

                          ====

                          The JSON representation of an `Any` value uses the
                          regular

                          representation of the deserialized, embedded message,
                          with an

                          additional field `@type` which contains the type URL.
                          Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a
                          custom JSON

                          representation, that representation will be embedded
                          adding a field

                          `value` which holds the custom JSON in addition to the
                          `@type`

                          field. Example (for message
                          [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                        properties:
                          type_url:
                            description: >-
                              A URL/resource name that uniquely identifies the
                              type of the serialized

                              protocol buffer message. This string must contain
                              at least

                              one "/" character. The last segment of the URL's
                              path must represent

                              the fully qualified name of the type (as in

                              `path/google.protobuf.Duration`). The name should
                              be in a canonical form

                              (e.g., leading "." is not accepted).


                              In practice, teams usually precompile into the
                              binary all types that they

                              expect it to use in the context of Any. However,
                              for URLs which use the

                              scheme `http`, `https`, or no scheme, one can
                              optionally set up a type

                              server that maps type URLs to message definitions
                              as follows:


                              * If no scheme is provided, `https` is assumed.

                              * An HTTP GET on the URL must yield a
                              [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results
                              based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently
                              available in the official

                              protobuf release, and it is not used for type URLs
                              beginning with

                              type.googleapis.com.


                              Schemes other than `http`, `https` (or the empty
                              scheme) might be

                              used with implementation specific semantics.
                            type: string
                          value:
                            description: >-
                              Must be a valid serialized protocol buffer of the
                              above specified type.
                            format: byte
                            type: string
                        type: object
                      sequence:
                        description: >-
                          sequence is the sequence of the account, which
                          describes the

                          number of committed transactions signed by a given
                          address. It is used to

                          prevent replay attacks.
                        format: uint64
                        type: string
                    type: object
                  type: array
              title: >-
                auth_info is the authorization related content of the
                transaction,

                specifically signers, signer modes and fee
              type: object
            body:
              description: TxBody is the body of a transaction that all signers sign over.
              properties:
                extension_options:
                  items:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    type: object
                  title: >-
                    extension_options are arbitrary options that can be added by
                    chains

                    when the default options are not sufficient. If any of these
                    are present

                    and can't be handled, the transaction will be rejected
                  type: array
                memo:
                  description: >-
                    memo is any arbitrary note/comment to be added to the
                    transaction.

                    WARNING: in clients, any publicly exposed text should not be
                    called memo,

                    but should be called `note` instead (see
                    https://github.com/cosmos/cosmos-sdk/issues/9122).
                  type: string
                messages:
                  description: >-
                    messages is a list of messages to be executed. The required
                    signers of

                    those messages define the number and order of elements in
                    AuthInfo's

                    signer_infos and Tx's signatures. Each required signer
                    address is added to

                    the list only the first time it occurs.

                    By convention, the first required signer (usually from the
                    first message)

                    is referred to as the primary signer and pays the fee for
                    the whole

                    transaction.
                  items:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    type: object
                  type: array
                non_critical_extension_options:
                  items:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    type: object
                  title: >-
                    extension_options are arbitrary options that can be added by
                    chains

                    when the default options are not sufficient. If any of these
                    are present

                    and can't be handled, they will be ignored
                  type: array
                timeout_height:
                  format: uint64
                  title: >-
                    timeout is the block height after which this transaction
                    will not

                    be processed by the chain
                  type: string
              title: body is the processable content of the transaction
              type: object
            signatures:
              description: >-
                signatures is a list of signatures that matches the length and
                order of

                AuthInfo's signer_infos to allow connecting signature meta
                information like

                public key and signing mode by position.
              items:
                format: byte
                type: string
              type: array
          type: object
        tx_bytes:
          description: |-
            tx_bytes is the raw transaction.

            Since: cosmos-sdk 0.43
          format: byte
          type: string
      type: object
    cosmos.tx.v1beta1.SimulateResponse:
      description: |-
        SimulateResponse is the response type for the
        Service.SimulateRPC method.
      properties:
        gas_info:
          description: gas_info is the information about gas used in the simulation.
          properties:
            gas_used:
              description: GasUsed is the amount of gas actually consumed.
              format: uint64
              type: string
            gas_wanted:
              description: >-
                GasWanted is the maximum units of work we allow this tx to
                perform.
              format: uint64
              type: string
          type: object
        result:
          description: result is the result of the simulation.
          properties:
            data:
              description: >-
                Data is any data returned from message or handler execution. It
                MUST be

                length prefixed in order to separate data from multiple message
                executions.
              format: byte
              type: string
            events:
              description: >-
                Events contains a slice of Event objects that were emitted
                during message

                or handler execution.
              items:
                description: >-
                  Event allows application developers to attach additional
                  information to

                  ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
                  ResponseDeliverTx.

                  Later, transactions may be queried using these events.
                properties:
                  attributes:
                    items:
                      description: >-
                        EventAttribute is a single key-value pair, associated
                        with an event.
                      properties:
                        index:
                          type: boolean
                        key:
                          format: byte
                          type: string
                        value:
                          format: byte
                          type: string
                      type: object
                    type: array
                  type:
                    type: string
                type: object
              type: array
            log:
              description: >-
                Log contains the log information from message or handler
                execution.
              type: string
          type: object
      type: object
    cosmos.tx.v1beta1.Tx:
      description: Tx is the standard type used for broadcasting transactions.
      properties:
        auth_info:
          description: |-
            AuthInfo describes the fee and signer modes that are used to sign a
            transaction.
          properties:
            fee:
              description: >-
                Fee is the fee and gas limit for the transaction. The first
                signer is the

                primary signer and the one which pays the fee. The fee can be
                calculated

                based on the cost of evaluating the body and doing signature
                verification

                of the signers. This can be estimated via simulation.
              properties:
                amount:
                  items:
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                    properties:
                      amount:
                        type: string
                      denom:
                        type: string
                    type: object
                  title: amount is the amount of coins to be paid as a fee
                  type: array
                gas_limit:
                  format: uint64
                  title: >-
                    gas_limit is the maximum gas that can be used in transaction
                    processing

                    before an out of gas error occurs
                  type: string
                granter:
                  title: >-
                    if set, the fee payer (either the first signer or the value
                    of the payer field) requests that a fee grant be used

                    to pay fees instead of the fee payer's own balance. If an
                    appropriate fee grant does not exist or the chain does

                    not support fee grants, this will fail
                  type: string
                payer:
                  description: >-
                    if unset, the first signer is responsible for paying the
                    fees. If set, the specified account must pay the fees.

                    the payer must be a tx signer (and thus have signed this
                    field in AuthInfo).

                    setting this field does *not* change the ordering of
                    required signers for the transaction.
                  type: string
              type: object
            signer_infos:
              description: >-
                signer_infos defines the signing modes for the required signers.
                The number

                and order of elements must match the required signers from
                TxBody's

                messages. The first element is the primary signer and the one
                which pays

                the fee.
              items:
                description: >-
                  SignerInfo describes the public key and signing mode of a
                  single top-level

                  signer.
                properties:
                  mode_info:
                    description: >-
                      ModeInfo describes the signing mode of a single or nested
                      multisig signer.
                    properties:
                      multi:
                        properties:
                          bitarray:
                            description: >-
                              CompactBitArray is an implementation of a space
                              efficient bit array.

                              This is used to ensure that the encoded data takes
                              up a minimal amount of

                              space after proto encoding.

                              This is not thread safe, and is not intended for
                              concurrent usage.
                            properties:
                              elems:
                                format: byte
                                type: string
                              extra_bits_stored:
                                format: int64
                                type: integer
                            title: >-
                              bitarray specifies which keys within the multisig
                              are signing
                            type: object
                          mode_infos:
                            items: {}
                            title: >-
                              mode_infos is the corresponding modes of the
                              signers of the multisig

                              which could include nested multisig public keys
                            type: array
                        title: multi represents a nested multisig signer
                        type: object
                      single:
                        properties:
                          mode:
                            default: SIGN_MODE_UNSPECIFIED
                            description: >-
                              SignMode represents a signing mode with its own
                              security guarantees.

                               - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
                              rejected
                               - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
                              verified with raw bytes from Tx
                               - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
                              human-readable textual representation on top of
                              the binary representation

                              from SIGN_MODE_DIRECT
                               - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
                              Amino JSON and will be removed in the future
                               - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
                              SDK. Ref: https://eips.ethereum.org/EIPS/eip-191


                              Currently, SIGN_MODE_EIP_191 is registered as a
                              SignMode enum variant,

                              but is not implemented on the SDK by default. To
                              enable EIP-191, you need

                              to pass a custom `TxConfig` that has an
                              implementation of

                              `SignModeHandler` for EIP-191. The SDK may decide
                              to fully support

                              EIP-191 in the future.


                              Since: cosmos-sdk 0.45.2
                            enum:
                              - SIGN_MODE_UNSPECIFIED
                              - SIGN_MODE_DIRECT
                              - SIGN_MODE_TEXTUAL
                              - SIGN_MODE_LEGACY_AMINO_JSON
                              - SIGN_MODE_EIP_191
                            title: mode is the signing mode of the single signer
                            type: string
                        title: single represents a single signer
                        type: object
                    title: >-
                      mode_info describes the signing mode of the signer and is
                      a nested

                      structure to support nested multisig pubkey's
                    type: object
                  public_key:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    type: object
                  sequence:
                    description: >-
                      sequence is the sequence of the account, which describes
                      the

                      number of committed transactions signed by a given
                      address. It is used to

                      prevent replay attacks.
                    format: uint64
                    type: string
                type: object
              type: array
          title: |-
            auth_info is the authorization related content of the transaction,
            specifically signers, signer modes and fee
          type: object
        body:
          description: TxBody is the body of a transaction that all signers sign over.
          properties:
            extension_options:
              items:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
              title: >-
                extension_options are arbitrary options that can be added by
                chains

                when the default options are not sufficient. If any of these are
                present

                and can't be handled, the transaction will be rejected
              type: array
            memo:
              description: >-
                memo is any arbitrary note/comment to be added to the
                transaction.

                WARNING: in clients, any publicly exposed text should not be
                called memo,

                but should be called `note` instead (see
                https://github.com/cosmos/cosmos-sdk/issues/9122).
              type: string
            messages:
              description: >-
                messages is a list of messages to be executed. The required
                signers of

                those messages define the number and order of elements in
                AuthInfo's

                signer_infos and Tx's signatures. Each required signer address
                is added to

                the list only the first time it occurs.

                By convention, the first required signer (usually from the first
                message)

                is referred to as the primary signer and pays the fee for the
                whole

                transaction.
              items:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
              type: array
            non_critical_extension_options:
              items:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                type: object
              title: >-
                extension_options are arbitrary options that can be added by
                chains

                when the default options are not sufficient. If any of these are
                present

                and can't be handled, they will be ignored
              type: array
            timeout_height:
              format: uint64
              title: >-
                timeout is the block height after which this transaction will
                not

                be processed by the chain
              type: string
          title: body is the processable content of the transaction
          type: object
        signatures:
          description: >-
            signatures is a list of signatures that matches the length and order
            of

            AuthInfo's signer_infos to allow connecting signature meta
            information like

            public key and signing mode by position.
          items:
            format: byte
            type: string
          type: array
      type: object
    cosmos.tx.v1beta1.TxBody:
      description: TxBody is the body of a transaction that all signers sign over.
      properties:
        extension_options:
          items:
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            properties:
              type_url:
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
                type: string
              value:
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
                format: byte
                type: string
            type: object
          title: >-
            extension_options are arbitrary options that can be added by chains

            when the default options are not sufficient. If any of these are
            present

            and can't be handled, the transaction will be rejected
          type: array
        memo:
          description: >-
            memo is any arbitrary note/comment to be added to the transaction.

            WARNING: in clients, any publicly exposed text should not be called
            memo,

            but should be called `note` instead (see
            https://github.com/cosmos/cosmos-sdk/issues/9122).
          type: string
        messages:
          description: >-
            messages is a list of messages to be executed. The required signers
            of

            those messages define the number and order of elements in AuthInfo's

            signer_infos and Tx's signatures. Each required signer address is
            added to

            the list only the first time it occurs.

            By convention, the first required signer (usually from the first
            message)

            is referred to as the primary signer and pays the fee for the whole

            transaction.
          items:
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            properties:
              type_url:
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
                type: string
              value:
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
                format: byte
                type: string
            type: object
          type: array
        non_critical_extension_options:
          items:
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            properties:
              type_url:
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
                type: string
              value:
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
                format: byte
                type: string
            type: object
          title: >-
            extension_options are arbitrary options that can be added by chains

            when the default options are not sufficient. If any of these are
            present

            and can't be handled, they will be ignored
          type: array
        timeout_height:
          format: uint64
          title: |-
            timeout is the block height after which this transaction will not
            be processed by the chain
          type: string
      type: object
    cosmos.upgrade.v1beta1.ModuleVersion:
      description: |-
        ModuleVersion specifies a module and its consensus version.

        Since: cosmos-sdk 0.43
      properties:
        name:
          title: name of the app module
          type: string
        version:
          format: uint64
          title: consensus version of the app module
          type: string
      type: object
    cosmos.upgrade.v1beta1.Plan:
      description: >-
        Plan specifies information about a planned upgrade and when it should
        occur.
      properties:
        height:
          description: |-
            The height at which the upgrade must be performed.
            Only used if Time is not set.
          format: int64
          type: string
        info:
          title: |-
            Any application specific upgrade info to be included on-chain
            such as a git commit that validators could automatically upgrade to
          type: string
        name:
          description: >-
            Sets the name for the upgrade. This name will be used by the
            upgraded

            version of the software to apply any special "on-upgrade" commands
            during

            the first BeginBlock method after the upgrade is applied. It is also
            used

            to detect whether a software version can handle a given upgrade. If
            no

            upgrade handler with this name has been set in the software, it will
            be

            assumed that the software is out-of-date when the upgrade Time or
            Height is

            reached and the software will exit.
          type: string
        time:
          description: >-
            Deprecated: Time based upgrades have been deprecated. Time based
            upgrade logic

            has been removed from the SDK.

            If this field is not empty, an error will be thrown.
          format: date-time
          type: string
        upgraded_client_state:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          type: object
      type: object
    cosmos.upgrade.v1beta1.QueryAppliedPlanResponse:
      description: >-
        QueryAppliedPlanResponse is the response type for the Query/AppliedPlan
        RPC

        method.
      properties:
        height:
          description: height is the block height at which the plan was applied.
          format: int64
          type: string
      type: object
    cosmos.upgrade.v1beta1.QueryCurrentPlanResponse:
      description: >-
        QueryCurrentPlanResponse is the response type for the Query/CurrentPlan
        RPC

        method.
      properties:
        plan:
          description: plan is the current upgrade plan.
          properties:
            height:
              description: |-
                The height at which the upgrade must be performed.
                Only used if Time is not set.
              format: int64
              type: string
            info:
              title: >-
                Any application specific upgrade info to be included on-chain

                such as a git commit that validators could automatically upgrade
                to
              type: string
            name:
              description: >-
                Sets the name for the upgrade. This name will be used by the
                upgraded

                version of the software to apply any special "on-upgrade"
                commands during

                the first BeginBlock method after the upgrade is applied. It is
                also used

                to detect whether a software version can handle a given upgrade.
                If no

                upgrade handler with this name has been set in the software, it
                will be

                assumed that the software is out-of-date when the upgrade Time
                or Height is

                reached and the software will exit.
              type: string
            time:
              description: >-
                Deprecated: Time based upgrades have been deprecated. Time based
                upgrade logic

                has been removed from the SDK.

                If this field is not empty, an error will be thrown.
              format: date-time
              type: string
            upgraded_client_state:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
          type: object
      type: object
    cosmos.upgrade.v1beta1.QueryModuleVersionsResponse:
      description: >-
        QueryModuleVersionsResponse is the response type for the
        Query/ModuleVersions

        RPC method.


        Since: cosmos-sdk 0.43
      properties:
        module_versions:
          description: >-
            module_versions is a list of module names with their consensus
            versions.
          items:
            description: |-
              ModuleVersion specifies a module and its consensus version.

              Since: cosmos-sdk 0.43
            properties:
              name:
                title: name of the app module
                type: string
              version:
                format: uint64
                title: consensus version of the app module
                type: string
            type: object
          type: array
      type: object
    cosmos.upgrade.v1beta1.QueryUpgradedConsensusStateResponse:
      description: >-
        QueryUpgradedConsensusStateResponse is the response type for the
        Query/UpgradedConsensusState

        RPC method.
      properties:
        upgraded_consensus_state:
          format: byte
          title: 'Since: cosmos-sdk 0.43'
          type: string
      type: object
    cosmwasm.wasm.v1.AbsoluteTxPosition:
      description: >-
        AbsoluteTxPosition is a unique transaction position that allows for
        global

        ordering of transactions.
      properties:
        block_height:
          format: uint64
          title: BlockHeight is the block the contract was created at
          type: string
        tx_index:
          format: uint64
          title: >-
            TxIndex is a monotonic counter within the block (actual transaction
            index,

            or gas consumed)
          type: string
      type: object
    cosmwasm.wasm.v1.AccessConfig:
      description: AccessConfig access control type.
      properties:
        address:
          title: |-
            Address
            Deprecated: replaced by addresses
          type: string
        addresses:
          items:
            type: string
          type: array
        permission:
          default: ACCESS_TYPE_UNSPECIFIED
          description: >-
            - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder for
            empty value
             - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
             - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
            Deprecated: use AccessTypeAnyOfAddresses instead
             - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
             - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
          enum:
            - ACCESS_TYPE_UNSPECIFIED
            - ACCESS_TYPE_NOBODY
            - ACCESS_TYPE_ONLY_ADDRESS
            - ACCESS_TYPE_EVERYBODY
            - ACCESS_TYPE_ANY_OF_ADDRESSES
          title: AccessType permission types
          type: string
      type: object
    cosmwasm.wasm.v1.AccessType:
      default: ACCESS_TYPE_UNSPECIFIED
      description: >-
        - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder for empty
        value
         - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
         - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
        Deprecated: use AccessTypeAnyOfAddresses instead
         - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
         - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
      enum:
        - ACCESS_TYPE_UNSPECIFIED
        - ACCESS_TYPE_NOBODY
        - ACCESS_TYPE_ONLY_ADDRESS
        - ACCESS_TYPE_EVERYBODY
        - ACCESS_TYPE_ANY_OF_ADDRESSES
      title: AccessType permission types
      type: string
    cosmwasm.wasm.v1.CodeInfoResponse:
      properties:
        code_id:
          format: uint64
          type: string
        creator:
          type: string
        data_hash:
          format: byte
          type: string
        instantiate_permission:
          description: AccessConfig access control type.
          properties:
            address:
              title: |-
                Address
                Deprecated: replaced by addresses
              type: string
            addresses:
              items:
                type: string
              type: array
            permission:
              default: ACCESS_TYPE_UNSPECIFIED
              description: >-
                - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder for
                empty value
                 - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
                 - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
                Deprecated: use AccessTypeAnyOfAddresses instead
                 - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
                 - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
              enum:
                - ACCESS_TYPE_UNSPECIFIED
                - ACCESS_TYPE_NOBODY
                - ACCESS_TYPE_ONLY_ADDRESS
                - ACCESS_TYPE_EVERYBODY
                - ACCESS_TYPE_ANY_OF_ADDRESSES
              title: AccessType permission types
              type: string
          type: object
      title: CodeInfoResponse contains code meta data from CodeInfo
      type: object
    cosmwasm.wasm.v1.ContractCodeHistoryEntry:
      description: ContractCodeHistoryEntry metadata to a contract.
      properties:
        code_id:
          format: uint64
          title: CodeID is the reference to the stored WASM code
          type: string
        msg:
          format: byte
          type: string
        operation:
          default: CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
          description: >-
            - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED:
            ContractCodeHistoryOperationTypeUnspecified placeholder for empty
            value
             - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT: ContractCodeHistoryOperationTypeInit on chain contract instantiation
             - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE: ContractCodeHistoryOperationTypeMigrate code migration
             - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS: ContractCodeHistoryOperationTypeGenesis based on genesis data
          enum:
            - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
            - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT
            - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE
            - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS
          title: ContractCodeHistoryOperationType actions that caused a code change
          type: string
        updated:
          description: Updated Tx position when the operation was executed.
          properties:
            block_height:
              format: uint64
              title: BlockHeight is the block the contract was created at
              type: string
            tx_index:
              format: uint64
              title: >-
                TxIndex is a monotonic counter within the block (actual
                transaction index,

                or gas consumed)
              type: string
          type: object
      type: object
    cosmwasm.wasm.v1.ContractCodeHistoryOperationType:
      default: CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
      description: >-
        - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED:
        ContractCodeHistoryOperationTypeUnspecified placeholder for empty value
         - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT: ContractCodeHistoryOperationTypeInit on chain contract instantiation
         - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE: ContractCodeHistoryOperationTypeMigrate code migration
         - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS: ContractCodeHistoryOperationTypeGenesis based on genesis data
      enum:
        - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
        - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT
        - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE
        - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS
      title: ContractCodeHistoryOperationType actions that caused a code change
      type: string
    cosmwasm.wasm.v1.ContractInfo:
      properties:
        admin:
          title: Admin is an optional address that can execute migrations
          type: string
        code_id:
          format: uint64
          title: CodeID is the reference to the stored Wasm code
          type: string
        created:
          description: Created Tx position when the contract was instantiated.
          properties:
            block_height:
              format: uint64
              title: BlockHeight is the block the contract was created at
              type: string
            tx_index:
              format: uint64
              title: >-
                TxIndex is a monotonic counter within the block (actual
                transaction index,

                or gas consumed)
              type: string
          type: object
        creator:
          title: Creator address who initially instantiated the contract
          type: string
        extension:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          type: object
        ibc_port_id:
          type: string
        label:
          description: Label is optional metadata to be stored with a contract instance.
          type: string
      title: ContractInfo stores a WASM contract instance
      type: object
    cosmwasm.wasm.v1.Model:
      properties:
        key:
          format: byte
          title: hex-encode key to read it better (this is often ascii)
          type: string
        value:
          format: byte
          title: base64-encode raw value
          type: string
      title: Model is a struct that holds a KV pair
      type: object
    cosmwasm.wasm.v1.Params:
      description: Params defines the set of wasm parameters.
      properties:
        code_upload_access:
          description: AccessConfig access control type.
          properties:
            address:
              title: |-
                Address
                Deprecated: replaced by addresses
              type: string
            addresses:
              items:
                type: string
              type: array
            permission:
              default: ACCESS_TYPE_UNSPECIFIED
              description: >-
                - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder for
                empty value
                 - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
                 - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
                Deprecated: use AccessTypeAnyOfAddresses instead
                 - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
                 - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
              enum:
                - ACCESS_TYPE_UNSPECIFIED
                - ACCESS_TYPE_NOBODY
                - ACCESS_TYPE_ONLY_ADDRESS
                - ACCESS_TYPE_EVERYBODY
                - ACCESS_TYPE_ANY_OF_ADDRESSES
              title: AccessType permission types
              type: string
          type: object
        instantiate_default_permission:
          default: ACCESS_TYPE_UNSPECIFIED
          description: >-
            - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder for
            empty value
             - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
             - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
            Deprecated: use AccessTypeAnyOfAddresses instead
             - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
             - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
          enum:
            - ACCESS_TYPE_UNSPECIFIED
            - ACCESS_TYPE_NOBODY
            - ACCESS_TYPE_ONLY_ADDRESS
            - ACCESS_TYPE_EVERYBODY
            - ACCESS_TYPE_ANY_OF_ADDRESSES
          title: AccessType permission types
          type: string
      type: object
    cosmwasm.wasm.v1.QueryAllContractStateResponse:
      properties:
        models:
          items:
            properties:
              key:
                format: byte
                title: hex-encode key to read it better (this is often ascii)
                type: string
              value:
                format: byte
                title: base64-encode raw value
                type: string
            title: Model is a struct that holds a KV pair
            type: object
          type: array
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      title: |-
        QueryAllContractStateResponse is the response type for the
        Query/AllContractState RPC method
      type: object
    cosmwasm.wasm.v1.QueryCodeResponse:
      properties:
        code_info:
          properties:
            code_id:
              format: uint64
              type: string
            creator:
              type: string
            data_hash:
              format: byte
              type: string
            instantiate_permission:
              description: AccessConfig access control type.
              properties:
                address:
                  title: |-
                    Address
                    Deprecated: replaced by addresses
                  type: string
                addresses:
                  items:
                    type: string
                  type: array
                permission:
                  default: ACCESS_TYPE_UNSPECIFIED
                  description: >-
                    - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder
                    for empty value
                     - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
                     - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
                    Deprecated: use AccessTypeAnyOfAddresses instead
                     - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
                     - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
                  enum:
                    - ACCESS_TYPE_UNSPECIFIED
                    - ACCESS_TYPE_NOBODY
                    - ACCESS_TYPE_ONLY_ADDRESS
                    - ACCESS_TYPE_EVERYBODY
                    - ACCESS_TYPE_ANY_OF_ADDRESSES
                  title: AccessType permission types
                  type: string
              type: object
          title: CodeInfoResponse contains code meta data from CodeInfo
          type: object
        data:
          format: byte
          type: string
      title: QueryCodeResponse is the response type for the Query/Code RPC method
      type: object
    cosmwasm.wasm.v1.QueryCodesResponse:
      properties:
        code_infos:
          items:
            properties:
              code_id:
                format: uint64
                type: string
              creator:
                type: string
              data_hash:
                format: byte
                type: string
              instantiate_permission:
                description: AccessConfig access control type.
                properties:
                  address:
                    title: |-
                      Address
                      Deprecated: replaced by addresses
                    type: string
                  addresses:
                    items:
                      type: string
                    type: array
                  permission:
                    default: ACCESS_TYPE_UNSPECIFIED
                    description: >-
                      - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified
                      placeholder for empty value
                       - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
                       - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
                      Deprecated: use AccessTypeAnyOfAddresses instead
                       - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
                       - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
                    enum:
                      - ACCESS_TYPE_UNSPECIFIED
                      - ACCESS_TYPE_NOBODY
                      - ACCESS_TYPE_ONLY_ADDRESS
                      - ACCESS_TYPE_EVERYBODY
                      - ACCESS_TYPE_ANY_OF_ADDRESSES
                    title: AccessType permission types
                    type: string
                type: object
            title: CodeInfoResponse contains code meta data from CodeInfo
            type: object
          type: array
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      title: QueryCodesResponse is the response type for the Query/Codes RPC method
      type: object
    cosmwasm.wasm.v1.QueryContractHistoryResponse:
      properties:
        entries:
          items:
            description: ContractCodeHistoryEntry metadata to a contract.
            properties:
              code_id:
                format: uint64
                title: CodeID is the reference to the stored WASM code
                type: string
              msg:
                format: byte
                type: string
              operation:
                default: CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
                description: >-
                  - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED:
                  ContractCodeHistoryOperationTypeUnspecified placeholder for
                  empty value
                   - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT: ContractCodeHistoryOperationTypeInit on chain contract instantiation
                   - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE: ContractCodeHistoryOperationTypeMigrate code migration
                   - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS: ContractCodeHistoryOperationTypeGenesis based on genesis data
                enum:
                  - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
                  - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT
                  - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE
                  - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS
                title: >-
                  ContractCodeHistoryOperationType actions that caused a code
                  change
                type: string
              updated:
                description: Updated Tx position when the operation was executed.
                properties:
                  block_height:
                    format: uint64
                    title: BlockHeight is the block the contract was created at
                    type: string
                  tx_index:
                    format: uint64
                    title: >-
                      TxIndex is a monotonic counter within the block (actual
                      transaction index,

                      or gas consumed)
                    type: string
                type: object
            type: object
          type: array
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      title: |-
        QueryContractHistoryResponse is the response type for the
        Query/ContractHistory RPC method
      type: object
    cosmwasm.wasm.v1.QueryContractInfoResponse:
      properties:
        address:
          title: address is the address of the contract
          type: string
        contract_info:
          properties:
            admin:
              title: Admin is an optional address that can execute migrations
              type: string
            code_id:
              format: uint64
              title: CodeID is the reference to the stored Wasm code
              type: string
            created:
              description: Created Tx position when the contract was instantiated.
              properties:
                block_height:
                  format: uint64
                  title: BlockHeight is the block the contract was created at
                  type: string
                tx_index:
                  format: uint64
                  title: >-
                    TxIndex is a monotonic counter within the block (actual
                    transaction index,

                    or gas consumed)
                  type: string
              type: object
            creator:
              title: Creator address who initially instantiated the contract
              type: string
            extension:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              type: object
            ibc_port_id:
              type: string
            label:
              description: >-
                Label is optional metadata to be stored with a contract
                instance.
              type: string
          title: ContractInfo stores a WASM contract instance
          type: object
      title: >-
        QueryContractInfoResponse is the response type for the
        Query/ContractInfo RPC

        method
      type: object
    cosmwasm.wasm.v1.QueryContractsByCodeResponse:
      properties:
        contracts:
          items:
            type: string
          title: contracts are a set of contract addresses
          type: array
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      title: |-
        QueryContractsByCodeResponse is the response type for the
        Query/ContractsByCode RPC method
      type: object
    cosmwasm.wasm.v1.QueryContractsByCreatorResponse:
      description: |-
        QueryContractsByCreatorResponse is the response type for the
        Query/ContractsByCreator RPC method.
      properties:
        contract_addresses:
          items:
            type: string
          title: ContractAddresses result set
          type: array
        pagination:
          description: Pagination defines the pagination in the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      type: object
    cosmwasm.wasm.v1.QueryParamsResponse:
      description: >-
        QueryParamsResponse is the response type for the Query/Params RPC
        method.
      properties:
        params:
          description: params defines the parameters of the module.
          properties:
            code_upload_access:
              description: AccessConfig access control type.
              properties:
                address:
                  title: |-
                    Address
                    Deprecated: replaced by addresses
                  type: string
                addresses:
                  items:
                    type: string
                  type: array
                permission:
                  default: ACCESS_TYPE_UNSPECIFIED
                  description: >-
                    - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder
                    for empty value
                     - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
                     - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
                    Deprecated: use AccessTypeAnyOfAddresses instead
                     - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
                     - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
                  enum:
                    - ACCESS_TYPE_UNSPECIFIED
                    - ACCESS_TYPE_NOBODY
                    - ACCESS_TYPE_ONLY_ADDRESS
                    - ACCESS_TYPE_EVERYBODY
                    - ACCESS_TYPE_ANY_OF_ADDRESSES
                  title: AccessType permission types
                  type: string
              type: object
            instantiate_default_permission:
              default: ACCESS_TYPE_UNSPECIFIED
              description: >-
                - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder for
                empty value
                 - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
                 - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
                Deprecated: use AccessTypeAnyOfAddresses instead
                 - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
                 - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
              enum:
                - ACCESS_TYPE_UNSPECIFIED
                - ACCESS_TYPE_NOBODY
                - ACCESS_TYPE_ONLY_ADDRESS
                - ACCESS_TYPE_EVERYBODY
                - ACCESS_TYPE_ANY_OF_ADDRESSES
              title: AccessType permission types
              type: string
          type: object
      type: object
    cosmwasm.wasm.v1.QueryPinnedCodesResponse:
      properties:
        code_ids:
          items:
            format: uint64
            type: string
          type: array
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      title: |-
        QueryPinnedCodesResponse is the response type for the
        Query/PinnedCodes RPC method
      type: object
    cosmwasm.wasm.v1.QueryRawContractStateResponse:
      properties:
        data:
          format: byte
          title: Data contains the raw store data
          type: string
      title: |-
        QueryRawContractStateResponse is the response type for the
        Query/RawContractState RPC method
      type: object
    cosmwasm.wasm.v1.QuerySmartContractStateResponse:
      properties:
        data:
          format: byte
          title: Data contains the json data returned from the smart contract
          type: string
      title: |-
        QuerySmartContractStateResponse is the response type for the
        Query/SmartContractState RPC method
      type: object
    ethermint.evm.v1.ChainConfig:
      description: >-
        ChainConfig defines the Ethereum ChainConfig parameters using *sdk.Int
        values

        instead of *big.Int.
      properties:
        arrow_glacier_block:
          title: >-
            Eip-4345 (bomb delay) switch block (nil = no fork, 0 = already
            activated)
          type: string
        berlin_block:
          title: Berlin switch block (nil = no fork, 0 = already on berlin)
          type: string
        byzantium_block:
          title: Byzantium switch block (nil no fork, 0 = already on byzantium)
          type: string
        constantinople_block:
          title: Constantinople switch block (nil no fork, 0 = already activated)
          type: string
        dao_fork_block:
          title: TheDAO hard-fork switch block (nil no fork)
          type: string
        dao_fork_support:
          title: Whether the nodes supports or opposes the DAO hard-fork
          type: boolean
        eip150_block:
          title: >-
            EIP150 implements the Gas price changes

            (https://github.com/ethereum/EIPs/issues/150) EIP150 HF block (nil
            no fork)
          type: string
        eip150_hash:
          title: >-
            EIP150 HF hash (needed for header only clients as only gas pricing
            changed)
          type: string
        eip155_block:
          title: EIP155Block HF block
          type: string
        eip158_block:
          title: EIP158 HF block
          type: string
        gray_glacier_block:
          title: >-
            EIP-5133 (bomb delay) switch block (nil = no fork, 0 = already
            activated)
          type: string
        homestead_block:
          title: Homestead switch block (nil no fork, 0 = already homestead)
          type: string
        istanbul_block:
          title: Istanbul switch block (nil no fork, 0 = already on istanbul)
          type: string
        london_block:
          title: London switch block (nil = no fork, 0 = already on london)
          type: string
        merge_netsplit_block:
          title: Virtual fork after The Merge to use as a network splitter
          type: string
        muir_glacier_block:
          title: >-
            Eip-2384 (bomb delay) switch block (nil no fork, 0 = already
            activated)
          type: string
        petersburg_block:
          title: Petersburg switch block (nil same as Constantinople)
          type: string
      type: object
    ethermint.evm.v1.EstimateGasResponse:
      properties:
        gas:
          format: uint64
          title: the estimated gas
          type: string
      title: EstimateGasResponse defines EstimateGas response
      type: object
    ethermint.evm.v1.Log:
      description: >-
        Log represents an protobuf compatible Ethereum Log that defines a
        contract

        log event. These events are generated by the LOG opcode and
        stored/indexed by

        the node.
      properties:
        address:
          title: address of the contract that generated the event
          type: string
        block_hash:
          title: hash of the block in which the transaction was included
          type: string
        block_number:
          format: uint64
          title: block in which the transaction was included
          type: string
        data:
          format: byte
          title: supplied by the contract, usually ABI-encoded
          type: string
        index:
          format: uint64
          title: index of the log in the block
          type: string
        removed:
          description: >-
            The Removed field is true if this log was reverted due to a chain

            reorganisation. You must pay attention to this field if you receive
            logs

            through a filter query.
          type: boolean
        topics:
          description: list of topics provided by the contract.
          items:
            type: string
          type: array
        tx_hash:
          title: hash of the transaction
          type: string
        tx_index:
          format: uint64
          title: index of the transaction in the block
          type: string
      type: object
    ethermint.evm.v1.MsgEthereumTx:
      description: MsgEthereumTx encapsulates an Ethereum transaction as an SDK message.
      properties:
        data:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          title: inner transaction data
          type: object
        from:
          title: |-
            ethereum signer address in hex format. This address value is checked
            against the address derived from the signature (V, R, S) using the
            secp256k1 elliptic curve
          type: string
        hash:
          title: transaction hash in hex format
          type: string
        size:
          format: double
          title: 'DEPRECATED: encoded storage size of the transaction'
          type: number
      type: object
    ethermint.evm.v1.MsgEthereumTxResponse:
      description: MsgEthereumTxResponse defines the Msg/EthereumTx response type.
      properties:
        gas_used:
          format: uint64
          title: gas consumed by the transaction
          type: string
        hash:
          title: |-
            ethereum transaction hash in hex format. This hash differs from the
            Tendermint sha256 hash of the transaction bytes. See
            https://github.com/tendermint/tendermint/issues/6539 for reference
          type: string
        logs:
          description: |-
            logs contains the transaction hash and the proto-compatible ethereum
            logs.
          items:
            description: >-
              Log represents an protobuf compatible Ethereum Log that defines a
              contract

              log event. These events are generated by the LOG opcode and
              stored/indexed by

              the node.
            properties:
              address:
                title: address of the contract that generated the event
                type: string
              block_hash:
                title: hash of the block in which the transaction was included
                type: string
              block_number:
                format: uint64
                title: block in which the transaction was included
                type: string
              data:
                format: byte
                title: supplied by the contract, usually ABI-encoded
                type: string
              index:
                format: uint64
                title: index of the log in the block
                type: string
              removed:
                description: >-
                  The Removed field is true if this log was reverted due to a
                  chain

                  reorganisation. You must pay attention to this field if you
                  receive logs

                  through a filter query.
                type: boolean
              topics:
                description: list of topics provided by the contract.
                items:
                  type: string
                type: array
              tx_hash:
                title: hash of the transaction
                type: string
              tx_index:
                format: uint64
                title: index of the transaction in the block
                type: string
            type: object
          type: array
        ret:
          format: byte
          title: |-
            returned data from evm function (result or data supplied with revert
            opcode)
          type: string
        vm_error:
          title: vm error is the error returned by vm execution
          type: string
      type: object
    ethermint.evm.v1.Params:
      properties:
        allow_unprotected_txs:
          description: >-
            Allow unprotected transactions defines if replay-protected (i.e non
            EIP155 

            signed) transactions can be executed on the state machine.
          type: boolean
        chain_config:
          description: >-
            ChainConfig defines the Ethereum ChainConfig parameters using
            *sdk.Int values

            instead of *big.Int.
          properties:
            arrow_glacier_block:
              title: >-
                Eip-4345 (bomb delay) switch block (nil = no fork, 0 = already
                activated)
              type: string
            berlin_block:
              title: Berlin switch block (nil = no fork, 0 = already on berlin)
              type: string
            byzantium_block:
              title: Byzantium switch block (nil no fork, 0 = already on byzantium)
              type: string
            constantinople_block:
              title: Constantinople switch block (nil no fork, 0 = already activated)
              type: string
            dao_fork_block:
              title: TheDAO hard-fork switch block (nil no fork)
              type: string
            dao_fork_support:
              title: Whether the nodes supports or opposes the DAO hard-fork
              type: boolean
            eip150_block:
              title: >-
                EIP150 implements the Gas price changes

                (https://github.com/ethereum/EIPs/issues/150) EIP150 HF block
                (nil no fork)
              type: string
            eip150_hash:
              title: >-
                EIP150 HF hash (needed for header only clients as only gas
                pricing changed)
              type: string
            eip155_block:
              title: EIP155Block HF block
              type: string
            eip158_block:
              title: EIP158 HF block
              type: string
            gray_glacier_block:
              title: >-
                EIP-5133 (bomb delay) switch block (nil = no fork, 0 = already
                activated)
              type: string
            homestead_block:
              title: Homestead switch block (nil no fork, 0 = already homestead)
              type: string
            istanbul_block:
              title: Istanbul switch block (nil no fork, 0 = already on istanbul)
              type: string
            london_block:
              title: London switch block (nil = no fork, 0 = already on london)
              type: string
            merge_netsplit_block:
              title: Virtual fork after The Merge to use as a network splitter
              type: string
            muir_glacier_block:
              title: >-
                Eip-2384 (bomb delay) switch block (nil no fork, 0 = already
                activated)
              type: string
            petersburg_block:
              title: Petersburg switch block (nil same as Constantinople)
              type: string
          title: chain config defines the EVM chain configuration parameters
          type: object
        enable_call:
          title: enable call toggles state transitions that use the vm.Call function
          type: boolean
        enable_create:
          title: >-
            enable create toggles state transitions that use the vm.Create
            function
          type: boolean
        evm_denom:
          description: >-
            evm denom represents the token denomination used to run the EVM
            state

            transitions.
          type: string
        extra_eips:
          items:
            format: int64
            type: string
          title: extra eips defines the additional EIPs for the vm.Config
          type: array
      title: Params defines the EVM module parameters
      type: object
    ethermint.evm.v1.QueryAccountResponse:
      description: >-
        QueryAccountResponse is the response type for the Query/Account RPC
        method.
      properties:
        balance:
          description: balance is the balance of the EVM denomination.
          type: string
        code_hash:
          description: code hash is the hex-formatted code bytes from the EOA.
          type: string
        nonce:
          description: nonce is the account's sequence number.
          format: uint64
          type: string
      type: object
    ethermint.evm.v1.QueryBalanceResponse:
      description: >-
        QueryBalanceResponse is the response type for the Query/Balance RPC
        method.
      properties:
        balance:
          description: balance is the balance of the EVM denomination.
          type: string
      type: object
    ethermint.evm.v1.QueryBaseFeeResponse:
      description: BaseFeeResponse returns the EIP1559 base fee.
      properties:
        base_fee:
          type: string
      type: object
    ethermint.evm.v1.QueryCodeResponse:
      description: |-
        QueryCodeResponse is the response type for the Query/Code RPC
        method.
      properties:
        code:
          description: code represents the code bytes from an ethereum address.
          format: byte
          type: string
      type: object
    ethermint.evm.v1.QueryCosmosAccountResponse:
      description: >-
        QueryCosmosAccountResponse is the response type for the
        Query/CosmosAccount

        RPC method.
      properties:
        account_number:
          format: uint64
          title: account_number is the account numbert
          type: string
        cosmos_address:
          description: cosmos_address is the cosmos address of the account.
          type: string
        sequence:
          description: sequence is the account's sequence number.
          format: uint64
          type: string
      type: object
    ethermint.evm.v1.QueryParamsResponse:
      description: >-
        QueryParamsResponse defines the response type for querying x/evm
        parameters.
      properties:
        params:
          description: params define the evm module parameters.
          properties:
            allow_unprotected_txs:
              description: >-
                Allow unprotected transactions defines if replay-protected (i.e
                non EIP155 

                signed) transactions can be executed on the state machine.
              type: boolean
            chain_config:
              description: >-
                ChainConfig defines the Ethereum ChainConfig parameters using
                *sdk.Int values

                instead of *big.Int.
              properties:
                arrow_glacier_block:
                  title: >-
                    Eip-4345 (bomb delay) switch block (nil = no fork, 0 =
                    already activated)
                  type: string
                berlin_block:
                  title: Berlin switch block (nil = no fork, 0 = already on berlin)
                  type: string
                byzantium_block:
                  title: >-
                    Byzantium switch block (nil no fork, 0 = already on
                    byzantium)
                  type: string
                constantinople_block:
                  title: >-
                    Constantinople switch block (nil no fork, 0 = already
                    activated)
                  type: string
                dao_fork_block:
                  title: TheDAO hard-fork switch block (nil no fork)
                  type: string
                dao_fork_support:
                  title: Whether the nodes supports or opposes the DAO hard-fork
                  type: boolean
                eip150_block:
                  title: >-
                    EIP150 implements the Gas price changes

                    (https://github.com/ethereum/EIPs/issues/150) EIP150 HF
                    block (nil no fork)
                  type: string
                eip150_hash:
                  title: >-
                    EIP150 HF hash (needed for header only clients as only gas
                    pricing changed)
                  type: string
                eip155_block:
                  title: EIP155Block HF block
                  type: string
                eip158_block:
                  title: EIP158 HF block
                  type: string
                gray_glacier_block:
                  title: >-
                    EIP-5133 (bomb delay) switch block (nil = no fork, 0 =
                    already activated)
                  type: string
                homestead_block:
                  title: Homestead switch block (nil no fork, 0 = already homestead)
                  type: string
                istanbul_block:
                  title: Istanbul switch block (nil no fork, 0 = already on istanbul)
                  type: string
                london_block:
                  title: London switch block (nil = no fork, 0 = already on london)
                  type: string
                merge_netsplit_block:
                  title: Virtual fork after The Merge to use as a network splitter
                  type: string
                muir_glacier_block:
                  title: >-
                    Eip-2384 (bomb delay) switch block (nil no fork, 0 = already
                    activated)
                  type: string
                petersburg_block:
                  title: Petersburg switch block (nil same as Constantinople)
                  type: string
              title: chain config defines the EVM chain configuration parameters
              type: object
            enable_call:
              title: >-
                enable call toggles state transitions that use the vm.Call
                function
              type: boolean
            enable_create:
              title: >-
                enable create toggles state transitions that use the vm.Create
                function
              type: boolean
            evm_denom:
              description: >-
                evm denom represents the token denomination used to run the EVM
                state

                transitions.
              type: string
            extra_eips:
              items:
                format: int64
                type: string
              title: extra eips defines the additional EIPs for the vm.Config
              type: array
          title: Params defines the EVM module parameters
          type: object
      type: object
    ethermint.evm.v1.QueryStorageResponse:
      description: |-
        QueryStorageResponse is the response type for the Query/Storage RPC
        method.
      properties:
        value:
          description: >-
            key defines the storage state value hash associated with the given
            key.
          type: string
      type: object
    ethermint.evm.v1.QueryTraceBlockResponse:
      properties:
        data:
          format: byte
          type: string
      title: QueryTraceBlockResponse defines TraceBlock response
      type: object
    ethermint.evm.v1.QueryTraceTxResponse:
      properties:
        data:
          format: byte
          title: response serialized in bytes
          type: string
      title: QueryTraceTxResponse defines TraceTx response
      type: object
    ethermint.evm.v1.QueryValidatorAccountResponse:
      description: |-
        QueryValidatorAccountResponse is the response type for the
        Query/ValidatorAccount RPC method.
      properties:
        account_address:
          description: >-
            account_address is the cosmos address of the account in bech32
            format.
          type: string
        account_number:
          format: uint64
          title: account_number is the account number
          type: string
        sequence:
          description: sequence is the account's sequence number.
          format: uint64
          type: string
      type: object
    ethermint.evm.v1.TraceConfig:
      description: TraceConfig holds extra parameters to trace functions.
      properties:
        debug:
          title: print output during capture end
          type: boolean
        disable_stack:
          title: disable stack capture
          type: boolean
        disable_storage:
          title: disable storage capture
          type: boolean
        enable_memory:
          title: enable memory capture
          type: boolean
        enable_return_data:
          title: enable return data capture
          type: boolean
        limit:
          format: int32
          title: maximum length of output, but zero means unlimited
          type: integer
        overrides:
          description: >-
            ChainConfig defines the Ethereum ChainConfig parameters using
            *sdk.Int values

            instead of *big.Int.
          properties:
            arrow_glacier_block:
              title: >-
                Eip-4345 (bomb delay) switch block (nil = no fork, 0 = already
                activated)
              type: string
            berlin_block:
              title: Berlin switch block (nil = no fork, 0 = already on berlin)
              type: string
            byzantium_block:
              title: Byzantium switch block (nil no fork, 0 = already on byzantium)
              type: string
            constantinople_block:
              title: Constantinople switch block (nil no fork, 0 = already activated)
              type: string
            dao_fork_block:
              title: TheDAO hard-fork switch block (nil no fork)
              type: string
            dao_fork_support:
              title: Whether the nodes supports or opposes the DAO hard-fork
              type: boolean
            eip150_block:
              title: >-
                EIP150 implements the Gas price changes

                (https://github.com/ethereum/EIPs/issues/150) EIP150 HF block
                (nil no fork)
              type: string
            eip150_hash:
              title: >-
                EIP150 HF hash (needed for header only clients as only gas
                pricing changed)
              type: string
            eip155_block:
              title: EIP155Block HF block
              type: string
            eip158_block:
              title: EIP158 HF block
              type: string
            gray_glacier_block:
              title: >-
                EIP-5133 (bomb delay) switch block (nil = no fork, 0 = already
                activated)
              type: string
            homestead_block:
              title: Homestead switch block (nil no fork, 0 = already homestead)
              type: string
            istanbul_block:
              title: Istanbul switch block (nil no fork, 0 = already on istanbul)
              type: string
            london_block:
              title: London switch block (nil = no fork, 0 = already on london)
              type: string
            merge_netsplit_block:
              title: Virtual fork after The Merge to use as a network splitter
              type: string
            muir_glacier_block:
              title: >-
                Eip-2384 (bomb delay) switch block (nil no fork, 0 = already
                activated)
              type: string
            petersburg_block:
              title: Petersburg switch block (nil same as Constantinople)
              type: string
          title: >-
            Chain overrides, can be used to execute a trace using future fork
            rules
          type: object
        reexec:
          format: uint64
          title: number of blocks the tracer is willing to go back
          type: string
        timeout:
          title: >-
            overrides the default timeout of 5 seconds for JavaScript-based
            tracing

            calls
          type: string
        tracer:
          title: custom javascript tracer
          type: string
      type: object
    ethermint.feemarket.v1.Params:
      properties:
        base_fee:
          description: base fee for EIP-1559 blocks.
          type: string
        base_fee_change_denominator:
          description: >-
            base fee change denominator bounds the amount the base fee can
            change

            between blocks.
          format: int64
          type: integer
        elasticity_multiplier:
          description: >-
            elasticity multiplier bounds the maximum gas limit an EIP-1559 block
            may

            have.
          format: int64
          type: integer
        enable_height:
          description: height at which the base fee calculation is enabled.
          format: int64
          type: string
        min_gas_multiplier:
          title: |-
            min gas denominator bounds the minimum gasUsed to be charged
            to senders based on GasLimit
          type: string
        min_gas_price:
          title: >-
            min_gas_price defines the minimum gas price value for cosmos and eth
            transactions
          type: string
        no_base_fee:
          title: >-
            no base fee forces the EIP-1559 base fee to 0 (needed for 0 price
            calls)
          type: boolean
      title: Params defines the EVM module parameters
      type: object
    ethermint.feemarket.v1.QueryBaseFeeResponse:
      description: BaseFeeResponse returns the EIP1559 base fee.
      properties:
        base_fee:
          type: string
      type: object
    ethermint.feemarket.v1.QueryBlockGasResponse:
      description: QueryBlockGasResponse returns block gas used for a given height.
      properties:
        gas:
          format: int64
          type: string
      type: object
    ethermint.feemarket.v1.QueryParamsResponse:
      description: >-
        QueryParamsResponse defines the response type for querying x/evm
        parameters.
      properties:
        params:
          description: params define the evm module parameters.
          properties:
            base_fee:
              description: base fee for EIP-1559 blocks.
              type: string
            base_fee_change_denominator:
              description: >-
                base fee change denominator bounds the amount the base fee can
                change

                between blocks.
              format: int64
              type: integer
            elasticity_multiplier:
              description: >-
                elasticity multiplier bounds the maximum gas limit an EIP-1559
                block may

                have.
              format: int64
              type: integer
            enable_height:
              description: height at which the base fee calculation is enabled.
              format: int64
              type: string
            min_gas_multiplier:
              title: |-
                min gas denominator bounds the minimum gasUsed to be charged
                to senders based on GasLimit
              type: string
            min_gas_price:
              title: >-
                min_gas_price defines the minimum gas price value for cosmos and
                eth transactions
              type: string
            no_base_fee:
              title: >-
                no base fee forces the EIP-1559 base fee to 0 (needed for 0
                price calls)
              type: boolean
          title: Params defines the EVM module parameters
          type: object
      type: object
    google.protobuf.Any:
      description: >-
        `Any` contains an arbitrary serialized protocol buffer message along
        with a

        URL that describes the type of the serialized message.


        Protobuf library provides support to pack/unpack Any values in the form

        of utility functions or additional generated methods of the Any type.


        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }

         Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

         Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := anypb.New(foo)
             if err != nil {
               ...
             }
             ...
             foo := &pb.Foo{}
             if err := any.UnmarshalTo(foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use

        'type.googleapis.com/full.type.name' as the type URL and the unpack

        methods only use the fully qualified type name after the last '/'

        in the type URL, for example "foo.bar.com/x/y.z" will yield type

        name "y.z".



        JSON

        ====

        The JSON representation of an `Any` value uses the regular

        representation of the deserialized, embedded message, with an

        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON

        representation, that representation will be embedded adding a field

        `value` which holds the custom JSON in addition to the `@type`

        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
      properties:
        type_url:
          description: >-
            A URL/resource name that uniquely identifies the type of the
            serialized

            protocol buffer message. This string must contain at least

            one "/" character. The last segment of the URL's path must represent

            the fully qualified name of the type (as in

            `path/google.protobuf.Duration`). The name should be in a canonical
            form

            (e.g., leading "." is not accepted).


            In practice, teams usually precompile into the binary all types that
            they

            expect it to use in the context of Any. However, for URLs which use
            the

            scheme `http`, `https`, or no scheme, one can optionally set up a
            type

            server that maps type URLs to message definitions as follows:


            * If no scheme is provided, `https` is assumed.

            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official

            protobuf release, and it is not used for type URLs beginning with

            type.googleapis.com.


            Schemes other than `http`, `https` (or the empty scheme) might be

            used with implementation specific semantics.
          type: string
        value:
          description: >-
            Must be a valid serialized protocol buffer of the above specified
            type.
          format: byte
          type: string
      type: object
    grpc.gateway.runtime.Error:
      properties:
        code:
          format: int32
          type: integer
        details:
          items:
            description: >-
              `Any` contains an arbitrary serialized protocol buffer message
              along with a

              URL that describes the type of the serialized message.


              Protobuf library provides support to pack/unpack Any values in the
              form

              of utility functions or additional generated methods of the Any
              type.


              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := anypb.New(foo)
                   if err != nil {
                     ...
                   }
                   ...
                   foo := &pb.Foo{}
                   if err := any.UnmarshalTo(foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use

              'type.googleapis.com/full.type.name' as the type URL and the
              unpack

              methods only use the fully qualified type name after the last '/'

              in the type URL, for example "foo.bar.com/x/y.z" will yield type

              name "y.z".



              JSON

              ====

              The JSON representation of an `Any` value uses the regular

              representation of the deserialized, embedded message, with an

              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON

              representation, that representation will be embedded adding a
              field

              `value` which holds the custom JSON in addition to the `@type`

              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
            properties:
              type_url:
                description: >-
                  A URL/resource name that uniquely identifies the type of the
                  serialized

                  protocol buffer message. This string must contain at least

                  one "/" character. The last segment of the URL's path must
                  represent

                  the fully qualified name of the type (as in

                  `path/google.protobuf.Duration`). The name should be in a
                  canonical form

                  (e.g., leading "." is not accepted).


                  In practice, teams usually precompile into the binary all
                  types that they

                  expect it to use in the context of Any. However, for URLs
                  which use the

                  scheme `http`, `https`, or no scheme, one can optionally set
                  up a type

                  server that maps type URLs to message definitions as follows:


                  * If no scheme is provided, `https` is assumed.

                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on
                  the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the
                  official

                  protobuf release, and it is not used for type URLs beginning
                  with

                  type.googleapis.com.


                  Schemes other than `http`, `https` (or the empty scheme) might
                  be

                  used with implementation specific semantics.
                type: string
              value:
                description: >-
                  Must be a valid serialized protocol buffer of the above
                  specified type.
                format: byte
                type: string
            type: object
          type: array
        error:
          type: string
        message:
          type: string
      type: object
    ibc.applications.fee.v1.Fee:
      properties:
        ack_fee:
          items:
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          title: the packet acknowledgement fee
          type: array
        recv_fee:
          items:
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          title: the packet receive fee
          type: array
        timeout_fee:
          items:
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          title: the packet timeout fee
          type: array
      title: Fee defines the ICS29 receive, acknowledgement and timeout fees
      type: object
    ibc.applications.fee.v1.FeeEnabledChannel:
      properties:
        channel_id:
          title: unique channel identifier
          type: string
        port_id:
          title: unique port identifier
          type: string
      title: >-
        FeeEnabledChannel contains the PortID & ChannelID for a fee enabled
        channel
      type: object
    ibc.applications.fee.v1.IdentifiedPacketFees:
      properties:
        packet_fees:
          items:
            properties:
              fee:
                properties:
                  ack_fee:
                    items:
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    title: the packet acknowledgement fee
                    type: array
                  recv_fee:
                    items:
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    title: the packet receive fee
                    type: array
                  timeout_fee:
                    items:
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    title: the packet timeout fee
                    type: array
                title: >-
                  fee encapsulates the recv, ack and timeout fees associated
                  with an IBC packet
                type: object
              refund_address:
                title: the refund address for unspent fees
                type: string
              relayers:
                items:
                  type: string
                title: optional list of relayers permitted to receive fees
                type: array
            title: >-
              PacketFee contains ICS29 relayer fees, refund address and optional
              list of permitted relayers
            type: object
          title: list of packet fees
          type: array
        packet_id:
          properties:
            channel_id:
              title: channel unique identifier
              type: string
            port_id:
              title: channel port identifier
              type: string
            sequence:
              format: uint64
              title: packet sequence
              type: string
          title: >-
            unique packet identifier comprised of the channel ID, port ID and
            sequence
          type: object
      title: >-
        IdentifiedPacketFees contains a list of type PacketFee and associated
        PacketId
      type: object
    ibc.applications.fee.v1.PacketFee:
      properties:
        fee:
          properties:
            ack_fee:
              items:
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
                properties:
                  amount:
                    type: string
                  denom:
                    type: string
                type: object
              title: the packet acknowledgement fee
              type: array
            recv_fee:
              items:
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
                properties:
                  amount:
                    type: string
                  denom:
                    type: string
                type: object
              title: the packet receive fee
              type: array
            timeout_fee:
              items:
                description: >-
                  Coin defines a token with a denomination and an amount.


                  NOTE: The amount field is an Int which implements the custom
                  method

                  signatures required by gogoproto.
                properties:
                  amount:
                    type: string
                  denom:
                    type: string
                type: object
              title: the packet timeout fee
              type: array
          title: >-
            fee encapsulates the recv, ack and timeout fees associated with an
            IBC packet
          type: object
        refund_address:
          title: the refund address for unspent fees
          type: string
        relayers:
          items:
            type: string
          title: optional list of relayers permitted to receive fees
          type: array
      title: >-
        PacketFee contains ICS29 relayer fees, refund address and optional list
        of permitted relayers
      type: object
    ibc.applications.fee.v1.QueryCounterpartyPayeeResponse:
      properties:
        counterparty_payee:
          title: the counterparty payee address used to compensate forward relaying
          type: string
      title: >-
        QueryCounterpartyPayeeResponse defines the response type for the
        CounterpartyPayee rpc
      type: object
    ibc.applications.fee.v1.QueryFeeEnabledChannelResponse:
      properties:
        fee_enabled:
          title: boolean flag representing the fee enabled channel status
          type: boolean
      title: >-
        QueryFeeEnabledChannelResponse defines the response type for the
        FeeEnabledChannel rpc
      type: object
    ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse:
      properties:
        fee_enabled_channels:
          items:
            properties:
              channel_id:
                title: unique channel identifier
                type: string
              port_id:
                title: unique port identifier
                type: string
            title: >-
              FeeEnabledChannel contains the PortID & ChannelID for a fee
              enabled channel
            type: object
          title: list of fee enabled channels
          type: array
      title: >-
        QueryFeeEnabledChannelsResponse defines the response type for the
        FeeEnabledChannels rpc
      type: object
    ibc.applications.fee.v1.QueryIncentivizedPacketResponse:
      properties:
        incentivized_packet:
          properties:
            packet_fees:
              items:
                properties:
                  fee:
                    properties:
                      ack_fee:
                        items:
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                          properties:
                            amount:
                              type: string
                            denom:
                              type: string
                          type: object
                        title: the packet acknowledgement fee
                        type: array
                      recv_fee:
                        items:
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                          properties:
                            amount:
                              type: string
                            denom:
                              type: string
                          type: object
                        title: the packet receive fee
                        type: array
                      timeout_fee:
                        items:
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                          properties:
                            amount:
                              type: string
                            denom:
                              type: string
                          type: object
                        title: the packet timeout fee
                        type: array
                    title: >-
                      fee encapsulates the recv, ack and timeout fees associated
                      with an IBC packet
                    type: object
                  refund_address:
                    title: the refund address for unspent fees
                    type: string
                  relayers:
                    items:
                      type: string
                    title: optional list of relayers permitted to receive fees
                    type: array
                title: >-
                  PacketFee contains ICS29 relayer fees, refund address and
                  optional list of permitted relayers
                type: object
              title: list of packet fees
              type: array
            packet_id:
              properties:
                channel_id:
                  title: channel unique identifier
                  type: string
                port_id:
                  title: channel port identifier
                  type: string
                sequence:
                  format: uint64
                  title: packet sequence
                  type: string
              title: >-
                unique packet identifier comprised of the channel ID, port ID
                and sequence
              type: object
          title: >-
            IdentifiedPacketFees contains a list of type PacketFee and
            associated PacketId
          type: object
      title: >-
        QueryIncentivizedPacketsResponse defines the response type for the
        IncentivizedPacket rpc
      type: object
    ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse:
      properties:
        incentivized_packets:
          items:
            properties:
              packet_fees:
                items:
                  properties:
                    fee:
                      properties:
                        ack_fee:
                          items:
                            description: >-
                              Coin defines a token with a denomination and an
                              amount.


                              NOTE: The amount field is an Int which implements
                              the custom method

                              signatures required by gogoproto.
                            properties:
                              amount:
                                type: string
                              denom:
                                type: string
                            type: object
                          title: the packet acknowledgement fee
                          type: array
                        recv_fee:
                          items:
                            description: >-
                              Coin defines a token with a denomination and an
                              amount.


                              NOTE: The amount field is an Int which implements
                              the custom method

                              signatures required by gogoproto.
                            properties:
                              amount:
                                type: string
                              denom:
                                type: string
                            type: object
                          title: the packet receive fee
                          type: array
                        timeout_fee:
                          items:
                            description: >-
                              Coin defines a token with a denomination and an
                              amount.


                              NOTE: The amount field is an Int which implements
                              the custom method

                              signatures required by gogoproto.
                            properties:
                              amount:
                                type: string
                              denom:
                                type: string
                            type: object
                          title: the packet timeout fee
                          type: array
                      title: >-
                        fee encapsulates the recv, ack and timeout fees
                        associated with an IBC packet
                      type: object
                    refund_address:
                      title: the refund address for unspent fees
                      type: string
                    relayers:
                      items:
                        type: string
                      title: optional list of relayers permitted to receive fees
                      type: array
                  title: >-
                    PacketFee contains ICS29 relayer fees, refund address and
                    optional list of permitted relayers
                  type: object
                title: list of packet fees
                type: array
              packet_id:
                properties:
                  channel_id:
                    title: channel unique identifier
                    type: string
                  port_id:
                    title: channel port identifier
                    type: string
                  sequence:
                    format: uint64
                    title: packet sequence
                    type: string
                title: >-
                  unique packet identifier comprised of the channel ID, port ID
                  and sequence
                type: object
            title: >-
              IdentifiedPacketFees contains a list of type PacketFee and
              associated PacketId
            type: object
          title: Map of all incentivized_packets
          type: array
      title: >-
        QueryIncentivizedPacketsResponse defines the response type for the
        incentivized packets RPC
      type: object
    ibc.applications.fee.v1.QueryIncentivizedPacketsResponse:
      properties:
        incentivized_packets:
          items:
            properties:
              packet_fees:
                items:
                  properties:
                    fee:
                      properties:
                        ack_fee:
                          items:
                            description: >-
                              Coin defines a token with a denomination and an
                              amount.


                              NOTE: The amount field is an Int which implements
                              the custom method

                              signatures required by gogoproto.
                            properties:
                              amount:
                                type: string
                              denom:
                                type: string
                            type: object
                          title: the packet acknowledgement fee
                          type: array
                        recv_fee:
                          items:
                            description: >-
                              Coin defines a token with a denomination and an
                              amount.


                              NOTE: The amount field is an Int which implements
                              the custom method

                              signatures required by gogoproto.
                            properties:
                              amount:
                                type: string
                              denom:
                                type: string
                            type: object
                          title: the packet receive fee
                          type: array
                        timeout_fee:
                          items:
                            description: >-
                              Coin defines a token with a denomination and an
                              amount.


                              NOTE: The amount field is an Int which implements
                              the custom method

                              signatures required by gogoproto.
                            properties:
                              amount:
                                type: string
                              denom:
                                type: string
                            type: object
                          title: the packet timeout fee
                          type: array
                      title: >-
                        fee encapsulates the recv, ack and timeout fees
                        associated with an IBC packet
                      type: object
                    refund_address:
                      title: the refund address for unspent fees
                      type: string
                    relayers:
                      items:
                        type: string
                      title: optional list of relayers permitted to receive fees
                      type: array
                  title: >-
                    PacketFee contains ICS29 relayer fees, refund address and
                    optional list of permitted relayers
                  type: object
                title: list of packet fees
                type: array
              packet_id:
                properties:
                  channel_id:
                    title: channel unique identifier
                    type: string
                  port_id:
                    title: channel port identifier
                    type: string
                  sequence:
                    format: uint64
                    title: packet sequence
                    type: string
                title: >-
                  unique packet identifier comprised of the channel ID, port ID
                  and sequence
                type: object
            title: >-
              IdentifiedPacketFees contains a list of type PacketFee and
              associated PacketId
            type: object
          title: list of identified fees for incentivized packets
          type: array
      title: >-
        QueryIncentivizedPacketsResponse defines the response type for the
        IncentivizedPackets rpc
      type: object
    ibc.applications.fee.v1.QueryPayeeResponse:
      properties:
        payee_address:
          title: the payee address to which packet fees are paid out
          type: string
      title: QueryPayeeResponse defines the response type for the Payee rpc
      type: object
    ibc.applications.fee.v1.QueryTotalAckFeesResponse:
      properties:
        ack_fees:
          items:
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          title: the total packet acknowledgement fees
          type: array
      title: >-
        QueryTotalAckFeesResponse defines the response type for the TotalAckFees
        rpc
      type: object
    ibc.applications.fee.v1.QueryTotalRecvFeesResponse:
      properties:
        recv_fees:
          items:
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          title: the total packet receive fees
          type: array
      title: >-
        QueryTotalRecvFeesResponse defines the response type for the
        TotalRecvFees rpc
      type: object
    ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse:
      properties:
        timeout_fees:
          items:
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          title: the total packet timeout fees
          type: array
      title: >-
        QueryTotalTimeoutFeesResponse defines the response type for the
        TotalTimeoutFees rpc
      type: object
    ibc.applications.interchain_accounts.controller.v1.Params:
      description: >-
        Params defines the set of on-chain interchain accounts parameters.

        The following parameters may be used to disable the controller
        submodule.
      properties:
        controller_enabled:
          description: controller_enabled enables or disables the controller submodule.
          type: boolean
      type: object
    ibc.applications.interchain_accounts.controller.v1.QueryInterchainAccountResponse:
      description: >-
        QueryInterchainAccountResponse the response type for the
        Query/InterchainAccount RPC method.
      properties:
        address:
          type: string
      type: object
    ibc.applications.interchain_accounts.controller.v1.QueryParamsResponse:
      description: >-
        QueryParamsResponse is the response type for the Query/Params RPC
        method.
      properties:
        params:
          description: params defines the parameters of the module.
          properties:
            controller_enabled:
              description: controller_enabled enables or disables the controller submodule.
              type: boolean
          type: object
      type: object
    ibc.applications.interchain_accounts.host.v1.Params:
      description: |-
        Params defines the set of on-chain interchain accounts parameters.
        The following parameters may be used to disable the host submodule.
      properties:
        allow_messages:
          description: >-
            allow_messages defines a list of sdk message typeURLs allowed to be
            executed on a host chain.
          items:
            type: string
          type: array
        host_enabled:
          description: host_enabled enables or disables the host submodule.
          type: boolean
      type: object
    ibc.applications.interchain_accounts.host.v1.QueryParamsResponse:
      description: >-
        QueryParamsResponse is the response type for the Query/Params RPC
        method.
      properties:
        params:
          description: params defines the parameters of the module.
          properties:
            allow_messages:
              description: >-
                allow_messages defines a list of sdk message typeURLs allowed to
                be executed on a host chain.
              items:
                type: string
              type: array
            host_enabled:
              description: host_enabled enables or disables the host submodule.
              type: boolean
          type: object
      type: object
    ibc.applications.transfer.v1.DenomTrace:
      description: >-
        DenomTrace contains the base denomination for ICS20 fungible tokens and
        the

        source tracing information path.
      properties:
        base_denom:
          description: base denomination of the relayed fungible token.
          type: string
        path:
          description: >-
            path defines the chain of port/channel identifiers used for tracing
            the

            source of the fungible token.
          type: string
      type: object
    ibc.applications.transfer.v1.Params:
      description: >-
        Params defines the set of IBC transfer parameters.

        NOTE: To prevent a single token from being transferred, set the

        TransfersEnabled parameter to true and then set the bank module's
        SendEnabled

        parameter for the denomination to false.
      properties:
        receive_enabled:
          description: >-
            receive_enabled enables or disables all cross-chain token transfers
            to this

            chain.
          type: boolean
        send_enabled:
          description: >-
            send_enabled enables or disables all cross-chain token transfers
            from this

            chain.
          type: boolean
      type: object
    ibc.applications.transfer.v1.QueryDenomHashResponse:
      description: |-
        QueryDenomHashResponse is the response type for the Query/DenomHash RPC
        method.
      properties:
        hash:
          description: hash (in hex format) of the denomination trace information.
          type: string
      type: object
    ibc.applications.transfer.v1.QueryDenomTraceResponse:
      description: >-
        QueryDenomTraceResponse is the response type for the Query/DenomTrace
        RPC

        method.
      properties:
        denom_trace:
          description: >-
            DenomTrace contains the base denomination for ICS20 fungible tokens
            and the

            source tracing information path.
          properties:
            base_denom:
              description: base denomination of the relayed fungible token.
              type: string
            path:
              description: >-
                path defines the chain of port/channel identifiers used for
                tracing the

                source of the fungible token.
              type: string
          type: object
      type: object
    ibc.applications.transfer.v1.QueryDenomTracesResponse:
      description: >-
        QueryConnectionsResponse is the response type for the Query/DenomTraces
        RPC

        method.
      properties:
        denom_traces:
          description: denom_traces returns all denominations trace information.
          items:
            description: >-
              DenomTrace contains the base denomination for ICS20 fungible
              tokens and the

              source tracing information path.
            properties:
              base_denom:
                description: base denomination of the relayed fungible token.
                type: string
              path:
                description: >-
                  path defines the chain of port/channel identifiers used for
                  tracing the

                  source of the fungible token.
                type: string
            type: object
          type: array
        pagination:
          description: pagination defines the pagination in the response.
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          type: object
      type: object
    ibc.applications.transfer.v1.QueryEscrowAddressResponse:
      description: >-
        QueryEscrowAddressResponse is the response type of the EscrowAddress RPC
        method.
      properties:
        escrow_address:
          title: the escrow account address
          type: string
      type: object
    ibc.applications.transfer.v1.QueryParamsResponse:
      description: >-
        QueryParamsResponse is the response type for the Query/Params RPC
        method.
      properties:
        params:
          description: params defines the parameters of the module.
          properties:
            receive_enabled:
              description: >-
                receive_enabled enables or disables all cross-chain token
                transfers to this

                chain.
              type: boolean
            send_enabled:
              description: >-
                send_enabled enables or disables all cross-chain token transfers
                from this

                chain.
              type: boolean
          type: object
      type: object
    ibc.core.channel.v1.Channel:
      description: >-
        Channel defines pipeline for exactly-once packet delivery between
        specific

        modules on separate blockchains, which has at least one end capable of

        sending packets and one end capable of receiving packets.
      properties:
        connection_hops:
          items:
            type: string
          title: >-
            list of connection identifiers, in order, along which packets sent
            on

            this channel will travel
          type: array
        counterparty:
          properties:
            channel_id:
              title: channel end on the counterparty chain
              type: string
            port_id:
              description: >-
                port on the counterparty chain which owns the other end of the
                channel.
              type: string
          title: counterparty channel end
          type: object
        ordering:
          default: ORDER_NONE_UNSPECIFIED
          description: |-
            - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
             - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
            which they were sent.
             - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
          enum:
            - ORDER_NONE_UNSPECIFIED
            - ORDER_UNORDERED
            - ORDER_ORDERED
          title: whether the channel is ordered or unordered
          type: string
        state:
          default: STATE_UNINITIALIZED_UNSPECIFIED
          description: |-
            State defines if a channel is in one of the following states:
            CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

             - STATE_UNINITIALIZED_UNSPECIFIED: Default State
             - STATE_INIT: A channel has just started the opening handshake.
             - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
             - STATE_OPEN: A channel has completed the handshake. Open channels are
            ready to send and receive packets.
             - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
            packets.
          enum:
            - STATE_UNINITIALIZED_UNSPECIFIED
            - STATE_INIT
            - STATE_TRYOPEN
            - STATE_OPEN
            - STATE_CLOSED
          title: current state of the channel end
          type: string
        version:
          title: opaque channel version, which is agreed upon during the handshake
          type: string
      type: object
    ibc.core.channel.v1.Counterparty:
      properties:
        channel_id:
          title: channel end on the counterparty chain
          type: string
        port_id:
          description: >-
            port on the counterparty chain which owns the other end of the
            channel.
          type: string
      title: Counterparty defines a channel end counterparty
      type: object
    ibc.core.channel.v1.IdentifiedChannel:
      description: |-
        IdentifiedChannel defines a channel with additional port and channel
        identifier fields.
      properties:
        channel_id:
          title: channel identifier
          type: string
        connection_hops:
          items:
            type: string
          title: >-
            list of connection identifiers, in order, along which packets sent
            on

            this channel will travel
          type: array
        counterparty:
          properties:
            channel_id:
              title: channel end on the counterparty chain
              type: string
            port_id:
              description: >-
                port on the counterparty chain which owns the other end of the
                channel.
              type: string
          title: counterparty channel end
          type: object
        ordering:
          default: ORDER_NONE_UNSPECIFIED
          description: |-
            - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
             - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
            which they were sent.
             - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
          enum:
            - ORDER_NONE_UNSPECIFIED
            - ORDER_UNORDERED
            - ORDER_ORDERED
          title: whether the channel is ordered or unordered
          type: string
        port_id:
          title: port identifier
          type: string
        state:
          default: STATE_UNINITIALIZED_UNSPECIFIED
          description: |-
            State defines if a channel is in one of the following states:
            CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

             - STATE_UNINITIALIZED_UNSPECIFIED: Default State
             - STATE_INIT: A channel has just started the opening handshake.
             - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
             - STATE_OPEN: A channel has completed the handshake. Open channels are
            ready to send and receive packets.
             - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
            packets.
          enum:
            - STATE_UNINITIALIZED_UNSPECIFIED
            - STATE_INIT
            - STATE_TRYOPEN
            - STATE_OPEN
            - STATE_CLOSED
          title: current state of the channel end
          type: string
        version:
          title: opaque channel version, which is agreed upon during the handshake
          type: string
      type: object
    ibc.core.channel.v1.Order:
      default: ORDER_NONE_UNSPECIFIED
      description: |-
        - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
         - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
        which they were sent.
         - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
      enum:
        - ORDER_NONE_UNSPECIFIED
        - ORDER_UNORDERED
        - ORDER_ORDERED
      title: Order defines if a channel is ORDERED or UNORDERED
      type: string
    ibc.core.channel.v1.PacketId:
      properties:
        channel_id:
          title: channel unique identifier
          type: string
        port_id:
          title: channel port identifier
          type: string
        sequence:
          format: uint64
          title: packet sequence
          type: string
      title: |-
        PacketId is an identifer for a unique Packet
        Source chains refer to packets by source port/channel
        Destination chains refer to packets by destination port/channel
      type: object
    ibc.core.channel.v1.PacketState:
      description: >-
        PacketState defines the generic type necessary to retrieve and store

        packet commitments, acknowledgements, and receipts.

        Caller is responsible for knowing the context necessary to interpret
        this

        state as a commitment, acknowledgement, or a receipt.
      properties:
        channel_id:
          description: channel unique identifier.
          type: string
        data:
          description: embedded data that represents packet state.
          format: byte
          type: string
        port_id:
          description: channel port identifier.
          type: string
        sequence:
          description: packet sequence.
          format: uint64
          type: string
      type: object
    ibc.core.channel.v1.QueryChannelClientStateResponse:
      properties:
        identified_client_state:
          description: >-
            IdentifiedClientState defines a client state with an additional
            client

            identifier field.
          properties:
            client_id:
              title: client identifier
              type: string
            client_state:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              title: client state
              type: object
          title: client state associated with the channel
          type: object
        proof:
          format: byte
          title: merkle proof of existence
          type: string
        proof_height:
          description: >-
            Normally the RevisionHeight is incremented at each height while
            keeping

            RevisionNumber the same. However some consensus algorithms may
            choose to

            reset the height in certain conditions e.g. hard forks,
            state-machine

            breaking changes In these cases, the RevisionNumber is incremented
            so that

            height continues to be monitonically increasing even as the
            RevisionHeight

            gets reset
          properties:
            revision_height:
              format: uint64
              title: the height within the given revision
              type: string
            revision_number:
              format: uint64
              title: the revision that the client is currently on
              type: string
          title: height at which the proof was retrieved
          type: object
      title: |-
        QueryChannelClientStateResponse is the Response type for the
        Query/QueryChannelClientState RPC method
      type: object
    ibc.core.channel.v1.QueryChannelConsensusStateResponse:
      properties:
        client_id:
          title: client ID associated with the consensus state
          type: string
        consensus_state:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          title: consensus state associated with the channel
          type: object
        proof:
          format: byte
          title: merkle proof of existence
          type: string
        proof_height:
          description: >-
            Normally the RevisionHeight is incremented at each height while
            keeping

            RevisionNumber the same. However some consensus algorithms may
            choose to

            reset the height in certain conditions e.g. hard forks,
            state-machine

            breaking changes In these cases, the RevisionNumber is incremented
            so that

            height continues to be monitonically increasing even as the
            RevisionHeight

            gets reset
          properties:
            revision_height:
              format: uint64
              title: the height within the given revision
              type: string
            revision_number:
              format: uint64
              title: the revision that the client is currently on
              type: string
          title: height at which the proof was retrieved
          type: object
      title: |-
        QueryChannelClientStateResponse is the Response type for the
        Query/QueryChannelClientState RPC method
      type: object
    ibc.core.channel.v1.QueryChannelResponse:
      description: >-
        QueryChannelResponse is the response type for the Query/Channel RPC
        method.

        Besides the Channel end, it includes a proof and the height from which
        the

        proof was retrieved.
      properties:
        channel:
          description: >-
            Channel defines pipeline for exactly-once packet delivery between
            specific

            modules on separate blockchains, which has at least one end capable
            of

            sending packets and one end capable of receiving packets.
          properties:
            connection_hops:
              items:
                type: string
              title: >-
                list of connection identifiers, in order, along which packets
                sent on

                this channel will travel
              type: array
            counterparty:
              properties:
                channel_id:
                  title: channel end on the counterparty chain
                  type: string
                port_id:
                  description: >-
                    port on the counterparty chain which owns the other end of
                    the channel.
                  type: string
              title: counterparty channel end
              type: object
            ordering:
              default: ORDER_NONE_UNSPECIFIED
              description: |-
                - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                 - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                which they were sent.
                 - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
              enum:
                - ORDER_NONE_UNSPECIFIED
                - ORDER_UNORDERED
                - ORDER_ORDERED
              title: whether the channel is ordered or unordered
              type: string
            state:
              default: STATE_UNINITIALIZED_UNSPECIFIED
              description: |-
                State defines if a channel is in one of the following states:
                CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                 - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                 - STATE_INIT: A channel has just started the opening handshake.
                 - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                 - STATE_OPEN: A channel has completed the handshake. Open channels are
                ready to send and receive packets.
                 - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                packets.
              enum:
                - STATE_UNINITIALIZED_UNSPECIFIED
                - STATE_INIT
                - STATE_TRYOPEN
                - STATE_OPEN
                - STATE_CLOSED
              title: current state of the channel end
              type: string
            version:
              title: >-
                opaque channel version, which is agreed upon during the
                handshake
              type: string
          title: channel associated with the request identifiers
          type: object
        proof:
          format: byte
          title: merkle proof of existence
          type: string
        proof_height:
          description: >-
            Normally the RevisionHeight is incremented at each height while
            keeping

            RevisionNumber the same. However some consensus algorithms may
            choose to

            reset the height in certain conditions e.g. hard forks,
            state-machine

            breaking changes In these cases, the RevisionNumber is incremented
            so that

            height continues to be monitonically increasing even as the
            RevisionHeight

            gets reset
          properties:
            revision_height:
              format: uint64
              title: the height within the given revision
              type: string
            revision_number:
              format: uint64
              title: the revision that the client is currently on
              type: string
          title: height at which the proof was retrieved
          type: object
      type: object
    ibc.core.channel.v1.QueryChannelsResponse:
      description: >-
        QueryChannelsResponse is the response type for the Query/Channels RPC
        method.
      properties:
        channels:
          description: list of stored channels of the chain.
          items:
            description: >-
              IdentifiedChannel defines a channel with additional port and
              channel

              identifier fields.
            properties:
              channel_id:
                title: channel identifier
                type: string
              connection_hops:
                items:
                  type: string
                title: >-
                  list of connection identifiers, in order, along which packets
                  sent on

                  this channel will travel
                type: array
              counterparty:
                properties:
                  channel_id:
                    title: channel end on the counterparty chain
                    type: string
                  port_id:
                    description: >-
                      port on the counterparty chain which owns the other end of
                      the channel.
                    type: string
                title: counterparty channel end
                type: object
              ordering:
                default: ORDER_NONE_UNSPECIFIED
                description: |-
                  - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                   - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                  which they were sent.
                   - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                enum:
                  - ORDER_NONE_UNSPECIFIED
                  - ORDER_UNORDERED
                  - ORDER_ORDERED
                title: whether the channel is ordered or unordered
                type: string
              port_id:
                title: port identifier
                type: string
              state:
                default: STATE_UNINITIALIZED_UNSPECIFIED
                description: |-
                  State defines if a channel is in one of the following states:
                  CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                   - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                   - STATE_INIT: A channel has just started the opening handshake.
                   - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                   - STATE_OPEN: A channel has completed the handshake. Open channels are
                  ready to send and receive packets.
                   - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                  packets.
                enum:
                  - STATE_UNINITIALIZED_UNSPECIFIED
                  - STATE_INIT
                  - STATE_TRYOPEN
                  - STATE_OPEN
                  - STATE_CLOSED
                title: current state of the channel end
                type: string
              version:
                title: >-
                  opaque channel version, which is agreed upon during the
                  handshake
                type: string
            type: object
          type: array
        height:
          description: >-
            Normally the RevisionHeight is incremented at each height while
            keeping

            RevisionNumber the same. However some consensus algorithms may
            choose to

            reset the height in certain conditions e.g. hard forks,
            state-machine

            breaking changes In these cases, the RevisionNumber is incremented
            so that

            height continues to be monitonically increasing even as the
            RevisionHeight

            gets reset
          properties:
            revision_height:
              format: uint64
              title: the height within the given revision
              type: string
            revision_number:
              format: uint64
              title: the revision that the client is currently on
              type: string
          title: query block height
          type: object
        pagination:
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          title: pagination response
          type: object
      type: object
    ibc.core.channel.v1.QueryConnectionChannelsResponse:
      properties:
        channels:
          description: list of channels associated with a connection.
          items:
            description: >-
              IdentifiedChannel defines a channel with additional port and
              channel

              identifier fields.
            properties:
              channel_id:
                title: channel identifier
                type: string
              connection_hops:
                items:
                  type: string
                title: >-
                  list of connection identifiers, in order, along which packets
                  sent on

                  this channel will travel
                type: array
              counterparty:
                properties:
                  channel_id:
                    title: channel end on the counterparty chain
                    type: string
                  port_id:
                    description: >-
                      port on the counterparty chain which owns the other end of
                      the channel.
                    type: string
                title: counterparty channel end
                type: object
              ordering:
                default: ORDER_NONE_UNSPECIFIED
                description: |-
                  - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                   - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                  which they were sent.
                   - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                enum:
                  - ORDER_NONE_UNSPECIFIED
                  - ORDER_UNORDERED
                  - ORDER_ORDERED
                title: whether the channel is ordered or unordered
                type: string
              port_id:
                title: port identifier
                type: string
              state:
                default: STATE_UNINITIALIZED_UNSPECIFIED
                description: |-
                  State defines if a channel is in one of the following states:
                  CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                   - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                   - STATE_INIT: A channel has just started the opening handshake.
                   - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                   - STATE_OPEN: A channel has completed the handshake. Open channels are
                  ready to send and receive packets.
                   - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                  packets.
                enum:
                  - STATE_UNINITIALIZED_UNSPECIFIED
                  - STATE_INIT
                  - STATE_TRYOPEN
                  - STATE_OPEN
                  - STATE_CLOSED
                title: current state of the channel end
                type: string
              version:
                title: >-
                  opaque channel version, which is agreed upon during the
                  handshake
                type: string
            type: object
          type: array
        height:
          description: >-
            Normally the RevisionHeight is incremented at each height while
            keeping

            RevisionNumber the same. However some consensus algorithms may
            choose to

            reset the height in certain conditions e.g. hard forks,
            state-machine

            breaking changes In these cases, the RevisionNumber is incremented
            so that

            height continues to be monitonically increasing even as the
            RevisionHeight

            gets reset
          properties:
            revision_height:
              format: uint64
              title: the height within the given revision
              type: string
            revision_number:
              format: uint64
              title: the revision that the client is currently on
              type: string
          title: query block height
          type: object
        pagination:
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          title: pagination response
          type: object
      title: |-
        QueryConnectionChannelsResponse is the Response type for the
        Query/QueryConnectionChannels RPC method
      type: object
    ibc.core.channel.v1.QueryNextSequenceReceiveResponse:
      properties:
        next_sequence_receive:
          format: uint64
          title: next sequence receive number
          type: string
        proof:
          format: byte
          title: merkle proof of existence
          type: string
        proof_height:
          description: >-
            Normally the RevisionHeight is incremented at each height while
            keeping

            RevisionNumber the same. However some consensus algorithms may
            choose to

            reset the height in certain conditions e.g. hard forks,
            state-machine

            breaking changes In these cases, the RevisionNumber is incremented
            so that

            height continues to be monitonically increasing even as the
            RevisionHeight

            gets reset
          properties:
            revision_height:
              format: uint64
              title: the height within the given revision
              type: string
            revision_number:
              format: uint64
              title: the revision that the client is currently on
              type: string
          title: height at which the proof was retrieved
          type: object
      title: |-
        QuerySequenceResponse is the request type for the
        Query/QueryNextSequenceReceiveResponse RPC method
      type: object
    ibc.core.channel.v1.QueryPacketAcknowledgementResponse:
      properties:
        acknowledgement:
          format: byte
          title: packet associated with the request fields
          type: string
        proof:
          format: byte
          title: merkle proof of existence
          type: string
        proof_height:
          description: >-
            Normally the RevisionHeight is incremented at each height while
            keeping

            RevisionNumber the same. However some consensus algorithms may
            choose to

            reset the height in certain conditions e.g. hard forks,
            state-machine

            breaking changes In these cases, the RevisionNumber is incremented
            so that

            height continues to be monitonically increasing even as the
            RevisionHeight

            gets reset
          properties:
            revision_height:
              format: uint64
              title: the height within the given revision
              type: string
            revision_number:
              format: uint64
              title: the revision that the client is currently on
              type: string
          title: height at which the proof was retrieved
          type: object
      title: >-
        QueryPacketAcknowledgementResponse defines the client query response for
        a

        packet which also includes a proof and the height from which the

        proof was retrieved
      type: object
    ibc.core.channel.v1.QueryPacketAcknowledgementsResponse:
      properties:
        acknowledgements:
          items:
            description: >-
              PacketState defines the generic type necessary to retrieve and
              store

              packet commitments, acknowledgements, and receipts.

              Caller is responsible for knowing the context necessary to
              interpret this

              state as a commitment, acknowledgement, or a receipt.
            properties:
              channel_id:
                description: channel unique identifier.
                type: string
              data:
                description: embedded data that represents packet state.
                format: byte
                type: string
              port_id:
                description: channel port identifier.
                type: string
              sequence:
                description: packet sequence.
                format: uint64
                type: string
            type: object
          type: array
        height:
          description: >-
            Normally the RevisionHeight is incremented at each height while
            keeping

            RevisionNumber the same. However some consensus algorithms may
            choose to

            reset the height in certain conditions e.g. hard forks,
            state-machine

            breaking changes In these cases, the RevisionNumber is incremented
            so that

            height continues to be monitonically increasing even as the
            RevisionHeight

            gets reset
          properties:
            revision_height:
              format: uint64
              title: the height within the given revision
              type: string
            revision_number:
              format: uint64
              title: the revision that the client is currently on
              type: string
          title: query block height
          type: object
        pagination:
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          title: pagination response
          type: object
      title: |-
        QueryPacketAcknowledgemetsResponse is the request type for the
        Query/QueryPacketAcknowledgements RPC method
      type: object
    ibc.core.channel.v1.QueryPacketCommitmentResponse:
      properties:
        commitment:
          format: byte
          title: packet associated with the request fields
          type: string
        proof:
          format: byte
          title: merkle proof of existence
          type: string
        proof_height:
          description: >-
            Normally the RevisionHeight is incremented at each height while
            keeping

            RevisionNumber the same. However some consensus algorithms may
            choose to

            reset the height in certain conditions e.g. hard forks,
            state-machine

            breaking changes In these cases, the RevisionNumber is incremented
            so that

            height continues to be monitonically increasing even as the
            RevisionHeight

            gets reset
          properties:
            revision_height:
              format: uint64
              title: the height within the given revision
              type: string
            revision_number:
              format: uint64
              title: the revision that the client is currently on
              type: string
          title: height at which the proof was retrieved
          type: object
      title: >-
        QueryPacketCommitmentResponse defines the client query response for a
        packet

        which also includes a proof and the height from which the proof was

        retrieved
      type: object
    ibc.core.channel.v1.QueryPacketCommitmentsResponse:
      properties:
        commitments:
          items:
            description: >-
              PacketState defines the generic type necessary to retrieve and
              store

              packet commitments, acknowledgements, and receipts.

              Caller is responsible for knowing the context necessary to
              interpret this

              state as a commitment, acknowledgement, or a receipt.
            properties:
              channel_id:
                description: channel unique identifier.
                type: string
              data:
                description: embedded data that represents packet state.
                format: byte
                type: string
              port_id:
                description: channel port identifier.
                type: string
              sequence:
                description: packet sequence.
                format: uint64
                type: string
            type: object
          type: array
        height:
          description: >-
            Normally the RevisionHeight is incremented at each height while
            keeping

            RevisionNumber the same. However some consensus algorithms may
            choose to

            reset the height in certain conditions e.g. hard forks,
            state-machine

            breaking changes In these cases, the RevisionNumber is incremented
            so that

            height continues to be monitonically increasing even as the
            RevisionHeight

            gets reset
          properties:
            revision_height:
              format: uint64
              title: the height within the given revision
              type: string
            revision_number:
              format: uint64
              title: the revision that the client is currently on
              type: string
          title: query block height
          type: object
        pagination:
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          title: pagination response
          type: object
      title: |-
        QueryPacketCommitmentsResponse is the request type for the
        Query/QueryPacketCommitments RPC method
      type: object
    ibc.core.channel.v1.QueryPacketReceiptResponse:
      properties:
        proof:
          format: byte
          title: merkle proof of existence
          type: string
        proof_height:
          description: >-
            Normally the RevisionHeight is incremented at each height while
            keeping

            RevisionNumber the same. However some consensus algorithms may
            choose to

            reset the height in certain conditions e.g. hard forks,
            state-machine

            breaking changes In these cases, the RevisionNumber is incremented
            so that

            height continues to be monitonically increasing even as the
            RevisionHeight

            gets reset
          properties:
            revision_height:
              format: uint64
              title: the height within the given revision
              type: string
            revision_number:
              format: uint64
              title: the revision that the client is currently on
              type: string
          title: height at which the proof was retrieved
          type: object
        received:
          title: success flag for if receipt exists
          type: boolean
      title: >-
        QueryPacketReceiptResponse defines the client query response for a
        packet

        receipt which also includes a proof, and the height from which the proof
        was

        retrieved
      type: object
    ibc.core.channel.v1.QueryUnreceivedAcksResponse:
      properties:
        height:
          description: >-
            Normally the RevisionHeight is incremented at each height while
            keeping

            RevisionNumber the same. However some consensus algorithms may
            choose to

            reset the height in certain conditions e.g. hard forks,
            state-machine

            breaking changes In these cases, the RevisionNumber is incremented
            so that

            height continues to be monitonically increasing even as the
            RevisionHeight

            gets reset
          properties:
            revision_height:
              format: uint64
              title: the height within the given revision
              type: string
            revision_number:
              format: uint64
              title: the revision that the client is currently on
              type: string
          title: query block height
          type: object
        sequences:
          items:
            format: uint64
            type: string
          title: list of unreceived acknowledgement sequences
          type: array
      title: |-
        QueryUnreceivedAcksResponse is the response type for the
        Query/UnreceivedAcks RPC method
      type: object
    ibc.core.channel.v1.QueryUnreceivedPacketsResponse:
      properties:
        height:
          description: >-
            Normally the RevisionHeight is incremented at each height while
            keeping

            RevisionNumber the same. However some consensus algorithms may
            choose to

            reset the height in certain conditions e.g. hard forks,
            state-machine

            breaking changes In these cases, the RevisionNumber is incremented
            so that

            height continues to be monitonically increasing even as the
            RevisionHeight

            gets reset
          properties:
            revision_height:
              format: uint64
              title: the height within the given revision
              type: string
            revision_number:
              format: uint64
              title: the revision that the client is currently on
              type: string
          title: query block height
          type: object
        sequences:
          items:
            format: uint64
            type: string
          title: list of unreceived packet sequences
          type: array
      title: |-
        QueryUnreceivedPacketsResponse is the response type for the
        Query/UnreceivedPacketCommitments RPC method
      type: object
    ibc.core.channel.v1.State:
      default: STATE_UNINITIALIZED_UNSPECIFIED
      description: |-
        State defines if a channel is in one of the following states:
        CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

         - STATE_UNINITIALIZED_UNSPECIFIED: Default State
         - STATE_INIT: A channel has just started the opening handshake.
         - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
         - STATE_OPEN: A channel has completed the handshake. Open channels are
        ready to send and receive packets.
         - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
        packets.
      enum:
        - STATE_UNINITIALIZED_UNSPECIFIED
        - STATE_INIT
        - STATE_TRYOPEN
        - STATE_OPEN
        - STATE_CLOSED
      type: string
    ibc.core.client.v1.ConsensusStateWithHeight:
      description: >-
        ConsensusStateWithHeight defines a consensus state with an additional
        height

        field.
      properties:
        consensus_state:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          title: consensus state
          type: object
        height:
          description: >-
            Normally the RevisionHeight is incremented at each height while
            keeping

            RevisionNumber the same. However some consensus algorithms may
            choose to

            reset the height in certain conditions e.g. hard forks,
            state-machine

            breaking changes In these cases, the RevisionNumber is incremented
            so that

            height continues to be monitonically increasing even as the
            RevisionHeight

            gets reset
          properties:
            revision_height:
              format: uint64
              title: the height within the given revision
              type: string
            revision_number:
              format: uint64
              title: the revision that the client is currently on
              type: string
          title: consensus state height
          type: object
      type: object
    ibc.core.client.v1.Height:
      description: >-
        Normally the RevisionHeight is incremented at each height while keeping

        RevisionNumber the same. However some consensus algorithms may choose to

        reset the height in certain conditions e.g. hard forks, state-machine

        breaking changes In these cases, the RevisionNumber is incremented so
        that

        height continues to be monitonically increasing even as the
        RevisionHeight

        gets reset
      properties:
        revision_height:
          format: uint64
          title: the height within the given revision
          type: string
        revision_number:
          format: uint64
          title: the revision that the client is currently on
          type: string
      title: >-
        Height is a monotonically increasing data type

        that can be compared against another Height for the purposes of updating
        and

        freezing clients
      type: object
    ibc.core.client.v1.IdentifiedClientState:
      description: |-
        IdentifiedClientState defines a client state with an additional client
        identifier field.
      properties:
        client_id:
          title: client identifier
          type: string
        client_state:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          title: client state
          type: object
      type: object
    ibc.core.client.v1.Params:
      description: Params defines the set of IBC light client parameters.
      properties:
        allowed_clients:
          description: allowed_clients defines the list of allowed client state types.
          items:
            type: string
          type: array
      type: object
    ibc.core.client.v1.QueryClientParamsResponse:
      description: >-
        QueryClientParamsResponse is the response type for the
        Query/ClientParams RPC

        method.
      properties:
        params:
          description: params defines the parameters of the module.
          properties:
            allowed_clients:
              description: allowed_clients defines the list of allowed client state types.
              items:
                type: string
              type: array
          type: object
      type: object
    ibc.core.client.v1.QueryClientStateResponse:
      description: >-
        QueryClientStateResponse is the response type for the Query/ClientState
        RPC

        method. Besides the client state, it includes a proof and the height
        from

        which the proof was retrieved.
      properties:
        client_state:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          title: client state associated with the request identifier
          type: object
        proof:
          format: byte
          title: merkle proof of existence
          type: string
        proof_height:
          description: >-
            Normally the RevisionHeight is incremented at each height while
            keeping

            RevisionNumber the same. However some consensus algorithms may
            choose to

            reset the height in certain conditions e.g. hard forks,
            state-machine

            breaking changes In these cases, the RevisionNumber is incremented
            so that

            height continues to be monitonically increasing even as the
            RevisionHeight

            gets reset
          properties:
            revision_height:
              format: uint64
              title: the height within the given revision
              type: string
            revision_number:
              format: uint64
              title: the revision that the client is currently on
              type: string
          title: height at which the proof was retrieved
          type: object
      type: object
    ibc.core.client.v1.QueryClientStatesResponse:
      description: >-
        QueryClientStatesResponse is the response type for the
        Query/ClientStates RPC

        method.
      properties:
        client_states:
          description: list of stored ClientStates of the chain.
          items:
            description: >-
              IdentifiedClientState defines a client state with an additional
              client

              identifier field.
            properties:
              client_id:
                title: client identifier
                type: string
              client_state:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                title: client state
                type: object
            type: object
          type: array
        pagination:
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          title: pagination response
          type: object
      type: object
    ibc.core.client.v1.QueryClientStatusResponse:
      description: >-
        QueryClientStatusResponse is the response type for the
        Query/ClientStatus RPC

        method. It returns the current status of the IBC client.
      properties:
        status:
          type: string
      type: object
    ibc.core.client.v1.QueryConsensusStateHeightsResponse:
      properties:
        consensus_state_heights:
          items:
            description: >-
              Normally the RevisionHeight is incremented at each height while
              keeping

              RevisionNumber the same. However some consensus algorithms may
              choose to

              reset the height in certain conditions e.g. hard forks,
              state-machine

              breaking changes In these cases, the RevisionNumber is incremented
              so that

              height continues to be monitonically increasing even as the
              RevisionHeight

              gets reset
            properties:
              revision_height:
                format: uint64
                title: the height within the given revision
                type: string
              revision_number:
                format: uint64
                title: the revision that the client is currently on
                type: string
            title: >-
              Height is a monotonically increasing data type

              that can be compared against another Height for the purposes of
              updating and

              freezing clients
            type: object
          title: consensus state heights
          type: array
        pagination:
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          title: pagination response
          type: object
      title: |-
        QueryConsensusStateHeightsResponse is the response type for the
        Query/ConsensusStateHeights RPC method
      type: object
    ibc.core.client.v1.QueryConsensusStateResponse:
      properties:
        consensus_state:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          title: >-
            consensus state associated with the client identifier at the given
            height
          type: object
        proof:
          format: byte
          title: merkle proof of existence
          type: string
        proof_height:
          description: >-
            Normally the RevisionHeight is incremented at each height while
            keeping

            RevisionNumber the same. However some consensus algorithms may
            choose to

            reset the height in certain conditions e.g. hard forks,
            state-machine

            breaking changes In these cases, the RevisionNumber is incremented
            so that

            height continues to be monitonically increasing even as the
            RevisionHeight

            gets reset
          properties:
            revision_height:
              format: uint64
              title: the height within the given revision
              type: string
            revision_number:
              format: uint64
              title: the revision that the client is currently on
              type: string
          title: >-
            Height is a monotonically increasing data type

            that can be compared against another Height for the purposes of
            updating and

            freezing clients
          type: object
      title: >-
        QueryConsensusStateResponse is the response type for the
        Query/ConsensusState

        RPC method
      type: object
    ibc.core.client.v1.QueryConsensusStatesResponse:
      properties:
        consensus_states:
          items:
            description: >-
              ConsensusStateWithHeight defines a consensus state with an
              additional height

              field.
            properties:
              consensus_state:
                description: >-
                  `Any` contains an arbitrary serialized protocol buffer message
                  along with a

                  URL that describes the type of the serialized message.


                  Protobuf library provides support to pack/unpack Any values in
                  the form

                  of utility functions or additional generated methods of the
                  Any type.


                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := anypb.New(foo)
                       if err != nil {
                         ...
                       }
                       ...
                       foo := &pb.Foo{}
                       if err := any.UnmarshalTo(foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default
                  use

                  'type.googleapis.com/full.type.name' as the type URL and the
                  unpack

                  methods only use the fully qualified type name after the last
                  '/'

                  in the type URL, for example "foo.bar.com/x/y.z" will yield
                  type

                  name "y.z".



                  JSON

                  ====

                  The JSON representation of an `Any` value uses the regular

                  representation of the deserialized, embedded message, with an

                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom
                  JSON

                  representation, that representation will be embedded adding a
                  field

                  `value` which holds the custom JSON in addition to the `@type`

                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
                properties:
                  type_url:
                    description: >-
                      A URL/resource name that uniquely identifies the type of
                      the serialized

                      protocol buffer message. This string must contain at least

                      one "/" character. The last segment of the URL's path must
                      represent

                      the fully qualified name of the type (as in

                      `path/google.protobuf.Duration`). The name should be in a
                      canonical form

                      (e.g., leading "." is not accepted).


                      In practice, teams usually precompile into the binary all
                      types that they

                      expect it to use in the context of Any. However, for URLs
                      which use the

                      scheme `http`, `https`, or no scheme, one can optionally
                      set up a type

                      server that maps type URLs to message definitions as
                      follows:


                      * If no scheme is provided, `https` is assumed.

                      * An HTTP GET on the URL must yield a
                      [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based
                      on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the
                      official

                      protobuf release, and it is not used for type URLs
                      beginning with

                      type.googleapis.com.


                      Schemes other than `http`, `https` (or the empty scheme)
                      might be

                      used with implementation specific semantics.
                    type: string
                  value:
                    description: >-
                      Must be a valid serialized protocol buffer of the above
                      specified type.
                    format: byte
                    type: string
                title: consensus state
                type: object
              height:
                description: >-
                  Normally the RevisionHeight is incremented at each height
                  while keeping

                  RevisionNumber the same. However some consensus algorithms may
                  choose to

                  reset the height in certain conditions e.g. hard forks,
                  state-machine

                  breaking changes In these cases, the RevisionNumber is
                  incremented so that

                  height continues to be monitonically increasing even as the
                  RevisionHeight

                  gets reset
                properties:
                  revision_height:
                    format: uint64
                    title: the height within the given revision
                    type: string
                  revision_number:
                    format: uint64
                    title: the revision that the client is currently on
                    type: string
                title: consensus state height
                type: object
            type: object
          title: consensus states associated with the identifier
          type: array
        pagination:
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          title: pagination response
          type: object
      title: |-
        QueryConsensusStatesResponse is the response type for the
        Query/ConsensusStates RPC method
      type: object
    ibc.core.client.v1.QueryUpgradedClientStateResponse:
      description: |-
        QueryUpgradedClientStateResponse is the response type for the
        Query/UpgradedClientState RPC method.
      properties:
        upgraded_client_state:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          title: client state associated with the request identifier
          type: object
      type: object
    ibc.core.client.v1.QueryUpgradedConsensusStateResponse:
      description: |-
        QueryUpgradedConsensusStateResponse is the response type for the
        Query/UpgradedConsensusState RPC method.
      properties:
        upgraded_consensus_state:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          title: Consensus state associated with the request identifier
          type: object
      type: object
    ibc.core.commitment.v1.MerklePrefix:
      properties:
        key_prefix:
          format: byte
          type: string
      title: >-
        MerklePrefix is merkle path prefixed to the key.

        The constructed key from the Path and the key will be
        append(Path.KeyPath,

        append(Path.KeyPrefix, key...))
      type: object
    ibc.core.connection.v1.ConnectionEnd:
      description: |-
        ConnectionEnd defines a stateful object on a chain connected to another
        separate one.
        NOTE: there must only be 2 defined ConnectionEnds to establish
        a connection between two chains.
      properties:
        client_id:
          description: client associated with this connection.
          type: string
        counterparty:
          description: counterparty chain associated with this connection.
          properties:
            client_id:
              description: >-
                identifies the client on the counterparty chain associated with
                a given

                connection.
              type: string
            connection_id:
              description: >-
                identifies the connection end on the counterparty chain
                associated with a

                given connection.
              type: string
            prefix:
              description: commitment merkle prefix of the counterparty chain.
              properties:
                key_prefix:
                  format: byte
                  type: string
              title: >-
                MerklePrefix is merkle path prefixed to the key.

                The constructed key from the Path and the key will be
                append(Path.KeyPath,

                append(Path.KeyPrefix, key...))
              type: object
          type: object
        delay_period:
          description: >-
            delay period that must pass before a consensus state can be used for

            packet-verification NOTE: delay period logic is only implemented by
            some

            clients.
          format: uint64
          type: string
        state:
          default: STATE_UNINITIALIZED_UNSPECIFIED
          description: current state of the connection end.
          enum:
            - STATE_UNINITIALIZED_UNSPECIFIED
            - STATE_INIT
            - STATE_TRYOPEN
            - STATE_OPEN
          type: string
        versions:
          description: >-
            IBC version which can be utilised to determine encodings or
            protocols for

            channels or packets utilising this connection.
          items:
            description: >-
              Version defines the versioning scheme used to negotiate the IBC
              verison in

              the connection handshake.
            properties:
              features:
                items:
                  type: string
                title: list of features compatible with the specified identifier
                type: array
              identifier:
                title: unique version identifier
                type: string
            type: object
          type: array
      type: object
    ibc.core.connection.v1.Counterparty:
      description: >-
        Counterparty defines the counterparty chain associated with a connection
        end.
      properties:
        client_id:
          description: >-
            identifies the client on the counterparty chain associated with a
            given

            connection.
          type: string
        connection_id:
          description: >-
            identifies the connection end on the counterparty chain associated
            with a

            given connection.
          type: string
        prefix:
          description: commitment merkle prefix of the counterparty chain.
          properties:
            key_prefix:
              format: byte
              type: string
          title: >-
            MerklePrefix is merkle path prefixed to the key.

            The constructed key from the Path and the key will be
            append(Path.KeyPath,

            append(Path.KeyPrefix, key...))
          type: object
      type: object
    ibc.core.connection.v1.IdentifiedConnection:
      description: |-
        IdentifiedConnection defines a connection with additional connection
        identifier field.
      properties:
        client_id:
          description: client associated with this connection.
          type: string
        counterparty:
          description: counterparty chain associated with this connection.
          properties:
            client_id:
              description: >-
                identifies the client on the counterparty chain associated with
                a given

                connection.
              type: string
            connection_id:
              description: >-
                identifies the connection end on the counterparty chain
                associated with a

                given connection.
              type: string
            prefix:
              description: commitment merkle prefix of the counterparty chain.
              properties:
                key_prefix:
                  format: byte
                  type: string
              title: >-
                MerklePrefix is merkle path prefixed to the key.

                The constructed key from the Path and the key will be
                append(Path.KeyPath,

                append(Path.KeyPrefix, key...))
              type: object
          type: object
        delay_period:
          description: delay period associated with this connection.
          format: uint64
          type: string
        id:
          description: connection identifier.
          type: string
        state:
          default: STATE_UNINITIALIZED_UNSPECIFIED
          description: current state of the connection end.
          enum:
            - STATE_UNINITIALIZED_UNSPECIFIED
            - STATE_INIT
            - STATE_TRYOPEN
            - STATE_OPEN
          type: string
        versions:
          items:
            description: >-
              Version defines the versioning scheme used to negotiate the IBC
              verison in

              the connection handshake.
            properties:
              features:
                items:
                  type: string
                title: list of features compatible with the specified identifier
                type: array
              identifier:
                title: unique version identifier
                type: string
            type: object
          title: >-
            IBC version which can be utilised to determine encodings or
            protocols for

            channels or packets utilising this connection
          type: array
      type: object
    ibc.core.connection.v1.QueryClientConnectionsResponse:
      properties:
        connection_paths:
          description: slice of all the connection paths associated with a client.
          items:
            type: string
          type: array
        proof:
          format: byte
          title: merkle proof of existence
          type: string
        proof_height:
          description: >-
            Normally the RevisionHeight is incremented at each height while
            keeping

            RevisionNumber the same. However some consensus algorithms may
            choose to

            reset the height in certain conditions e.g. hard forks,
            state-machine

            breaking changes In these cases, the RevisionNumber is incremented
            so that

            height continues to be monitonically increasing even as the
            RevisionHeight

            gets reset
          properties:
            revision_height:
              format: uint64
              title: the height within the given revision
              type: string
            revision_number:
              format: uint64
              title: the revision that the client is currently on
              type: string
          title: >-
            Height is a monotonically increasing data type

            that can be compared against another Height for the purposes of
            updating and

            freezing clients
          type: object
      title: |-
        QueryClientConnectionsResponse is the response type for the
        Query/ClientConnections RPC method
      type: object
    ibc.core.connection.v1.QueryConnectionClientStateResponse:
      properties:
        identified_client_state:
          description: >-
            IdentifiedClientState defines a client state with an additional
            client

            identifier field.
          properties:
            client_id:
              title: client identifier
              type: string
            client_state:
              description: >-
                `Any` contains an arbitrary serialized protocol buffer message
                along with a

                URL that describes the type of the serialized message.


                Protobuf library provides support to pack/unpack Any values in
                the form

                of utility functions or additional generated methods of the Any
                type.


                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := anypb.New(foo)
                     if err != nil {
                       ...
                     }
                     ...
                     foo := &pb.Foo{}
                     if err := any.UnmarshalTo(foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default
                use

                'type.googleapis.com/full.type.name' as the type URL and the
                unpack

                methods only use the fully qualified type name after the last
                '/'

                in the type URL, for example "foo.bar.com/x/y.z" will yield type

                name "y.z".



                JSON

                ====

                The JSON representation of an `Any` value uses the regular

                representation of the deserialized, embedded message, with an

                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON

                representation, that representation will be embedded adding a
                field

                `value` which holds the custom JSON in addition to the `@type`

                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
              properties:
                type_url:
                  description: >-
                    A URL/resource name that uniquely identifies the type of the
                    serialized

                    protocol buffer message. This string must contain at least

                    one "/" character. The last segment of the URL's path must
                    represent

                    the fully qualified name of the type (as in

                    `path/google.protobuf.Duration`). The name should be in a
                    canonical form

                    (e.g., leading "." is not accepted).


                    In practice, teams usually precompile into the binary all
                    types that they

                    expect it to use in the context of Any. However, for URLs
                    which use the

                    scheme `http`, `https`, or no scheme, one can optionally set
                    up a type

                    server that maps type URLs to message definitions as
                    follows:


                    * If no scheme is provided, `https` is assumed.

                    * An HTTP GET on the URL must yield a
                    [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on
                    the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the
                    official

                    protobuf release, and it is not used for type URLs beginning
                    with

                    type.googleapis.com.


                    Schemes other than `http`, `https` (or the empty scheme)
                    might be

                    used with implementation specific semantics.
                  type: string
                value:
                  description: >-
                    Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
                  type: string
              title: client state
              type: object
          title: client state associated with the channel
          type: object
        proof:
          format: byte
          title: merkle proof of existence
          type: string
        proof_height:
          description: >-
            Normally the RevisionHeight is incremented at each height while
            keeping

            RevisionNumber the same. However some consensus algorithms may
            choose to

            reset the height in certain conditions e.g. hard forks,
            state-machine

            breaking changes In these cases, the RevisionNumber is incremented
            so that

            height continues to be monitonically increasing even as the
            RevisionHeight

            gets reset
          properties:
            revision_height:
              format: uint64
              title: the height within the given revision
              type: string
            revision_number:
              format: uint64
              title: the revision that the client is currently on
              type: string
          title: >-
            Height is a monotonically increasing data type

            that can be compared against another Height for the purposes of
            updating and

            freezing clients
          type: object
      title: |-
        QueryConnectionClientStateResponse is the response type for the
        Query/ConnectionClientState RPC method
      type: object
    ibc.core.connection.v1.QueryConnectionConsensusStateResponse:
      properties:
        client_id:
          title: client ID associated with the consensus state
          type: string
        consensus_state:
          description: >-
            `Any` contains an arbitrary serialized protocol buffer message along
            with a

            URL that describes the type of the serialized message.


            Protobuf library provides support to pack/unpack Any values in the
            form

            of utility functions or additional generated methods of the Any
            type.


            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := anypb.New(foo)
                 if err != nil {
                   ...
                 }
                 ...
                 foo := &pb.Foo{}
                 if err := any.UnmarshalTo(foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use

            'type.googleapis.com/full.type.name' as the type URL and the unpack

            methods only use the fully qualified type name after the last '/'

            in the type URL, for example "foo.bar.com/x/y.z" will yield type

            name "y.z".



            JSON

            ====

            The JSON representation of an `Any` value uses the regular

            representation of the deserialized, embedded message, with an

            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON

            representation, that representation will be embedded adding a field

            `value` which holds the custom JSON in addition to the `@type`

            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
          properties:
            type_url:
              description: >-
                A URL/resource name that uniquely identifies the type of the
                serialized

                protocol buffer message. This string must contain at least

                one "/" character. The last segment of the URL's path must
                represent

                the fully qualified name of the type (as in

                `path/google.protobuf.Duration`). The name should be in a
                canonical form

                (e.g., leading "." is not accepted).


                In practice, teams usually precompile into the binary all types
                that they

                expect it to use in the context of Any. However, for URLs which
                use the

                scheme `http`, `https`, or no scheme, one can optionally set up
                a type

                server that maps type URLs to message definitions as follows:


                * If no scheme is provided, `https` is assumed.

                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the
                official

                protobuf release, and it is not used for type URLs beginning
                with

                type.googleapis.com.


                Schemes other than `http`, `https` (or the empty scheme) might
                be

                used with implementation specific semantics.
              type: string
            value:
              description: >-
                Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
              type: string
          title: consensus state associated with the channel
          type: object
        proof:
          format: byte
          title: merkle proof of existence
          type: string
        proof_height:
          description: >-
            Normally the RevisionHeight is incremented at each height while
            keeping

            RevisionNumber the same. However some consensus algorithms may
            choose to

            reset the height in certain conditions e.g. hard forks,
            state-machine

            breaking changes In these cases, the RevisionNumber is incremented
            so that

            height continues to be monitonically increasing even as the
            RevisionHeight

            gets reset
          properties:
            revision_height:
              format: uint64
              title: the height within the given revision
              type: string
            revision_number:
              format: uint64
              title: the revision that the client is currently on
              type: string
          title: >-
            Height is a monotonically increasing data type

            that can be compared against another Height for the purposes of
            updating and

            freezing clients
          type: object
      title: |-
        QueryConnectionConsensusStateResponse is the response type for the
        Query/ConnectionConsensusState RPC method
      type: object
    ibc.core.connection.v1.QueryConnectionResponse:
      description: >-
        QueryConnectionResponse is the response type for the Query/Connection
        RPC

        method. Besides the connection end, it includes a proof and the height
        from

        which the proof was retrieved.
      properties:
        connection:
          description: >-
            ConnectionEnd defines a stateful object on a chain connected to
            another

            separate one.

            NOTE: there must only be 2 defined ConnectionEnds to establish

            a connection between two chains.
          properties:
            client_id:
              description: client associated with this connection.
              type: string
            counterparty:
              description: counterparty chain associated with this connection.
              properties:
                client_id:
                  description: >-
                    identifies the client on the counterparty chain associated
                    with a given

                    connection.
                  type: string
                connection_id:
                  description: >-
                    identifies the connection end on the counterparty chain
                    associated with a

                    given connection.
                  type: string
                prefix:
                  description: commitment merkle prefix of the counterparty chain.
                  properties:
                    key_prefix:
                      format: byte
                      type: string
                  title: >-
                    MerklePrefix is merkle path prefixed to the key.

                    The constructed key from the Path and the key will be
                    append(Path.KeyPath,

                    append(Path.KeyPrefix, key...))
                  type: object
              type: object
            delay_period:
              description: >-
                delay period that must pass before a consensus state can be used
                for

                packet-verification NOTE: delay period logic is only implemented
                by some

                clients.
              format: uint64
              type: string
            state:
              default: STATE_UNINITIALIZED_UNSPECIFIED
              description: current state of the connection end.
              enum:
                - STATE_UNINITIALIZED_UNSPECIFIED
                - STATE_INIT
                - STATE_TRYOPEN
                - STATE_OPEN
              type: string
            versions:
              description: >-
                IBC version which can be utilised to determine encodings or
                protocols for

                channels or packets utilising this connection.
              items:
                description: >-
                  Version defines the versioning scheme used to negotiate the
                  IBC verison in

                  the connection handshake.
                properties:
                  features:
                    items:
                      type: string
                    title: list of features compatible with the specified identifier
                    type: array
                  identifier:
                    title: unique version identifier
                    type: string
                type: object
              type: array
          title: connection associated with the request identifier
          type: object
        proof:
          format: byte
          title: merkle proof of existence
          type: string
        proof_height:
          description: >-
            Normally the RevisionHeight is incremented at each height while
            keeping

            RevisionNumber the same. However some consensus algorithms may
            choose to

            reset the height in certain conditions e.g. hard forks,
            state-machine

            breaking changes In these cases, the RevisionNumber is incremented
            so that

            height continues to be monitonically increasing even as the
            RevisionHeight

            gets reset
          properties:
            revision_height:
              format: uint64
              title: the height within the given revision
              type: string
            revision_number:
              format: uint64
              title: the revision that the client is currently on
              type: string
          title: >-
            Height is a monotonically increasing data type

            that can be compared against another Height for the purposes of
            updating and

            freezing clients
          type: object
      type: object
    ibc.core.connection.v1.QueryConnectionsResponse:
      description: >-
        QueryConnectionsResponse is the response type for the Query/Connections
        RPC

        method.
      properties:
        connections:
          description: list of stored connections of the chain.
          items:
            description: >-
              IdentifiedConnection defines a connection with additional
              connection

              identifier field.
            properties:
              client_id:
                description: client associated with this connection.
                type: string
              counterparty:
                description: counterparty chain associated with this connection.
                properties:
                  client_id:
                    description: >-
                      identifies the client on the counterparty chain associated
                      with a given

                      connection.
                    type: string
                  connection_id:
                    description: >-
                      identifies the connection end on the counterparty chain
                      associated with a

                      given connection.
                    type: string
                  prefix:
                    description: commitment merkle prefix of the counterparty chain.
                    properties:
                      key_prefix:
                        format: byte
                        type: string
                    title: >-
                      MerklePrefix is merkle path prefixed to the key.

                      The constructed key from the Path and the key will be
                      append(Path.KeyPath,

                      append(Path.KeyPrefix, key...))
                    type: object
                type: object
              delay_period:
                description: delay period associated with this connection.
                format: uint64
                type: string
              id:
                description: connection identifier.
                type: string
              state:
                default: STATE_UNINITIALIZED_UNSPECIFIED
                description: current state of the connection end.
                enum:
                  - STATE_UNINITIALIZED_UNSPECIFIED
                  - STATE_INIT
                  - STATE_TRYOPEN
                  - STATE_OPEN
                type: string
              versions:
                items:
                  description: >-
                    Version defines the versioning scheme used to negotiate the
                    IBC verison in

                    the connection handshake.
                  properties:
                    features:
                      items:
                        type: string
                      title: >-
                        list of features compatible with the specified
                        identifier
                      type: array
                    identifier:
                      title: unique version identifier
                      type: string
                  type: object
                title: >-
                  IBC version which can be utilised to determine encodings or
                  protocols for

                  channels or packets utilising this connection
                type: array
            type: object
          type: array
        height:
          description: >-
            Normally the RevisionHeight is incremented at each height while
            keeping

            RevisionNumber the same. However some consensus algorithms may
            choose to

            reset the height in certain conditions e.g. hard forks,
            state-machine

            breaking changes In these cases, the RevisionNumber is incremented
            so that

            height continues to be monitonically increasing even as the
            RevisionHeight

            gets reset
          properties:
            revision_height:
              format: uint64
              title: the height within the given revision
              type: string
            revision_number:
              format: uint64
              title: the revision that the client is currently on
              type: string
          title: >-
            Height is a monotonically increasing data type

            that can be compared against another Height for the purposes of
            updating and

            freezing clients
          type: object
        pagination:
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
          properties:
            next_key:
              format: byte
              title: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently
              type: string
            total:
              format: uint64
              title: >-
                total is total number of results available if
                PageRequest.count_total

                was set, its value is undefined otherwise
              type: string
          title: pagination response
          type: object
      type: object
    ibc.core.connection.v1.State:
      default: STATE_UNINITIALIZED_UNSPECIFIED
      description: |-
        State defines if a connection is in one of the following states:
        INIT, TRYOPEN, OPEN or UNINITIALIZED.

         - STATE_UNINITIALIZED_UNSPECIFIED: Default State
         - STATE_INIT: A connection end has just started the opening handshake.
         - STATE_TRYOPEN: A connection end has acknowledged the handshake step on the counterparty
        chain.
         - STATE_OPEN: A connection end has completed the handshake.
      enum:
        - STATE_UNINITIALIZED_UNSPECIFIED
        - STATE_INIT
        - STATE_TRYOPEN
        - STATE_OPEN
      type: string
    ibc.core.connection.v1.Version:
      description: >-
        Version defines the versioning scheme used to negotiate the IBC verison
        in

        the connection handshake.
      properties:
        features:
          items:
            type: string
          title: list of features compatible with the specified identifier
          type: array
        identifier:
          title: unique version identifier
          type: string
      type: object
    intertx.QueryInterchainAccountResponse:
      properties:
        interchain_account_address:
          type: string
      title: >-
        QueryInterchainAccountResponse the response type for the
        Query/InterchainAccountAddress RPC
      type: object
    router.v1.Params:
      description: Params defines the set of IBC router parameters.
      properties:
        fee_percentage:
          type: string
      type: object
    router.v1.QueryParamsResponse:
      description: >-
        QueryParamsResponse is the response type for the Query/Params RPC
        method.
      properties:
        params:
          description: params defines the parameters of the module.
          properties:
            fee_percentage:
              type: string
          type: object
      type: object
    tendermint.abci.Event:
      description: >-
        Event allows application developers to attach additional information to

        ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and
        ResponseDeliverTx.

        Later, transactions may be queried using these events.
      properties:
        attributes:
          items:
            description: >-
              EventAttribute is a single key-value pair, associated with an
              event.
            properties:
              index:
                type: boolean
              key:
                format: byte
                type: string
              value:
                format: byte
                type: string
            type: object
          type: array
        type:
          type: string
      type: object
    tendermint.abci.EventAttribute:
      description: EventAttribute is a single key-value pair, associated with an event.
      properties:
        index:
          type: boolean
        key:
          format: byte
          type: string
        value:
          format: byte
          type: string
      type: object
    tendermint.crypto.PublicKey:
      properties:
        ed25519:
          format: byte
          type: string
        secp256k1:
          format: byte
          type: string
      title: PublicKey defines the keys available for use with Validators
      type: object
    tendermint.p2p.DefaultNodeInfo:
      properties:
        channels:
          format: byte
          type: string
        default_node_id:
          type: string
        listen_addr:
          type: string
        moniker:
          type: string
        network:
          type: string
        other:
          properties:
            rpc_address:
              type: string
            tx_index:
              type: string
          type: object
        protocol_version:
          properties:
            app:
              format: uint64
              type: string
            block:
              format: uint64
              type: string
            p2p:
              format: uint64
              type: string
          type: object
        version:
          type: string
      type: object
    tendermint.p2p.DefaultNodeInfoOther:
      properties:
        rpc_address:
          type: string
        tx_index:
          type: string
      type: object
    tendermint.p2p.ProtocolVersion:
      properties:
        app:
          format: uint64
          type: string
        block:
          format: uint64
          type: string
        p2p:
          format: uint64
          type: string
      type: object
    tendermint.types.Block:
      properties:
        data:
          properties:
            txs:
              description: >-
                Txs that will be applied by state @ block.Height+1.

                NOTE: not all txs here are valid.  We're just agreeing on the
                order first.

                This means that block.AppHash does not include these txs.
              items:
                format: byte
                type: string
              type: array
          title: Data contains the set of transactions included in the block
          type: object
        evidence:
          properties:
            evidence:
              items:
                properties:
                  duplicate_vote_evidence:
                    description: >-
                      DuplicateVoteEvidence contains evidence of a validator
                      signed two conflicting votes.
                    properties:
                      timestamp:
                        format: date-time
                        type: string
                      total_voting_power:
                        format: int64
                        type: string
                      validator_power:
                        format: int64
                        type: string
                      vote_a:
                        description: >-
                          Vote represents a prevote, precommit, or commit vote
                          from validators for

                          consensus.
                        properties:
                          block_id:
                            properties:
                              hash:
                                format: byte
                                type: string
                              part_set_header:
                                properties:
                                  hash:
                                    format: byte
                                    type: string
                                  total:
                                    format: int64
                                    type: integer
                                title: PartsetHeader
                                type: object
                            title: BlockID
                            type: object
                          height:
                            format: int64
                            type: string
                          round:
                            format: int32
                            type: integer
                          signature:
                            format: byte
                            type: string
                          timestamp:
                            format: date-time
                            type: string
                          type:
                            default: SIGNED_MSG_TYPE_UNKNOWN
                            description: >-
                              SignedMsgType is a type of signed message in the
                              consensus.

                               - SIGNED_MSG_TYPE_PREVOTE: Votes
                               - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            enum:
                              - SIGNED_MSG_TYPE_UNKNOWN
                              - SIGNED_MSG_TYPE_PREVOTE
                              - SIGNED_MSG_TYPE_PRECOMMIT
                              - SIGNED_MSG_TYPE_PROPOSAL
                            type: string
                          validator_address:
                            format: byte
                            type: string
                          validator_index:
                            format: int32
                            type: integer
                        type: object
                      vote_b:
                        description: >-
                          Vote represents a prevote, precommit, or commit vote
                          from validators for

                          consensus.
                        properties:
                          block_id:
                            properties:
                              hash:
                                format: byte
                                type: string
                              part_set_header:
                                properties:
                                  hash:
                                    format: byte
                                    type: string
                                  total:
                                    format: int64
                                    type: integer
                                title: PartsetHeader
                                type: object
                            title: BlockID
                            type: object
                          height:
                            format: int64
                            type: string
                          round:
                            format: int32
                            type: integer
                          signature:
                            format: byte
                            type: string
                          timestamp:
                            format: date-time
                            type: string
                          type:
                            default: SIGNED_MSG_TYPE_UNKNOWN
                            description: >-
                              SignedMsgType is a type of signed message in the
                              consensus.

                               - SIGNED_MSG_TYPE_PREVOTE: Votes
                               - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                            enum:
                              - SIGNED_MSG_TYPE_UNKNOWN
                              - SIGNED_MSG_TYPE_PREVOTE
                              - SIGNED_MSG_TYPE_PRECOMMIT
                              - SIGNED_MSG_TYPE_PROPOSAL
                            type: string
                          validator_address:
                            format: byte
                            type: string
                          validator_index:
                            format: int32
                            type: integer
                        type: object
                    type: object
                  light_client_attack_evidence:
                    description: >-
                      LightClientAttackEvidence contains evidence of a set of
                      validators attempting to mislead a light client.
                    properties:
                      byzantine_validators:
                        items:
                          properties:
                            address:
                              format: byte
                              type: string
                            proposer_priority:
                              format: int64
                              type: string
                            pub_key:
                              properties:
                                ed25519:
                                  format: byte
                                  type: string
                                secp256k1:
                                  format: byte
                                  type: string
                              title: >-
                                PublicKey defines the keys available for use
                                with Validators
                              type: object
                            voting_power:
                              format: int64
                              type: string
                          type: object
                        type: array
                      common_height:
                        format: int64
                        type: string
                      conflicting_block:
                        properties:
                          signed_header:
                            properties:
                              commit:
                                description: >-
                                  Commit contains the evidence that a block was
                                  committed by a set of validators.
                                properties:
                                  block_id:
                                    properties:
                                      hash:
                                        format: byte
                                        type: string
                                      part_set_header:
                                        properties:
                                          hash:
                                            format: byte
                                            type: string
                                          total:
                                            format: int64
                                            type: integer
                                        title: PartsetHeader
                                        type: object
                                    title: BlockID
                                    type: object
                                  height:
                                    format: int64
                                    type: string
                                  round:
                                    format: int32
                                    type: integer
                                  signatures:
                                    items:
                                      description: >-
                                        CommitSig is a part of the Vote included
                                        in a Commit.
                                      properties:
                                        block_id_flag:
                                          default: BLOCK_ID_FLAG_UNKNOWN
                                          enum:
                                            - BLOCK_ID_FLAG_UNKNOWN
                                            - BLOCK_ID_FLAG_ABSENT
                                            - BLOCK_ID_FLAG_COMMIT
                                            - BLOCK_ID_FLAG_NIL
                                          title: >-
                                            BlockIdFlag indicates which BlcokID the
                                            signature is for
                                          type: string
                                        signature:
                                          format: byte
                                          type: string
                                        timestamp:
                                          format: date-time
                                          type: string
                                        validator_address:
                                          format: byte
                                          type: string
                                      type: object
                                    type: array
                                type: object
                              header:
                                description: >-
                                  Header defines the structure of a block
                                  header.
                                properties:
                                  app_hash:
                                    format: byte
                                    type: string
                                  chain_id:
                                    type: string
                                  consensus_hash:
                                    format: byte
                                    type: string
                                  data_hash:
                                    format: byte
                                    type: string
                                  evidence_hash:
                                    format: byte
                                    title: consensus info
                                    type: string
                                  height:
                                    format: int64
                                    type: string
                                  last_block_id:
                                    properties:
                                      hash:
                                        format: byte
                                        type: string
                                      part_set_header:
                                        properties:
                                          hash:
                                            format: byte
                                            type: string
                                          total:
                                            format: int64
                                            type: integer
                                        title: PartsetHeader
                                        type: object
                                    title: prev block info
                                    type: object
                                  last_commit_hash:
                                    format: byte
                                    title: hashes of block data
                                    type: string
                                  last_results_hash:
                                    format: byte
                                    type: string
                                  next_validators_hash:
                                    format: byte
                                    type: string
                                  proposer_address:
                                    format: byte
                                    type: string
                                  time:
                                    format: date-time
                                    type: string
                                  validators_hash:
                                    format: byte
                                    title: >-
                                      hashes from the app output from the prev
                                      block
                                    type: string
                                  version:
                                    description: >-
                                      Consensus captures the consensus rules for
                                      processing a block in the blockchain,

                                      including all blockchain data structures
                                      and the rules of the application's

                                      state transition machine.
                                    properties:
                                      app:
                                        format: uint64
                                        type: string
                                      block:
                                        format: uint64
                                        type: string
                                    title: basic block info
                                    type: object
                                type: object
                            type: object
                          validator_set:
                            properties:
                              proposer:
                                properties:
                                  address:
                                    format: byte
                                    type: string
                                  proposer_priority:
                                    format: int64
                                    type: string
                                  pub_key:
                                    properties:
                                      ed25519:
                                        format: byte
                                        type: string
                                      secp256k1:
                                        format: byte
                                        type: string
                                    title: >-
                                      PublicKey defines the keys available for
                                      use with Validators
                                    type: object
                                  voting_power:
                                    format: int64
                                    type: string
                                type: object
                              total_voting_power:
                                format: int64
                                type: string
                              validators:
                                items:
                                  properties:
                                    address:
                                      format: byte
                                      type: string
                                    proposer_priority:
                                      format: int64
                                      type: string
                                    pub_key:
                                      properties:
                                        ed25519:
                                          format: byte
                                          type: string
                                        secp256k1:
                                          format: byte
                                          type: string
                                      title: >-
                                        PublicKey defines the keys available for
                                        use with Validators
                                      type: object
                                    voting_power:
                                      format: int64
                                      type: string
                                  type: object
                                type: array
                            type: object
                        type: object
                      timestamp:
                        format: date-time
                        type: string
                      total_voting_power:
                        format: int64
                        type: string
                    type: object
                type: object
              type: array
          type: object
        header:
          description: Header defines the structure of a block header.
          properties:
            app_hash:
              format: byte
              type: string
            chain_id:
              type: string
            consensus_hash:
              format: byte
              type: string
            data_hash:
              format: byte
              type: string
            evidence_hash:
              format: byte
              title: consensus info
              type: string
            height:
              format: int64
              type: string
            last_block_id:
              properties:
                hash:
                  format: byte
                  type: string
                part_set_header:
                  properties:
                    hash:
                      format: byte
                      type: string
                    total:
                      format: int64
                      type: integer
                  title: PartsetHeader
                  type: object
              title: prev block info
              type: object
            last_commit_hash:
              format: byte
              title: hashes of block data
              type: string
            last_results_hash:
              format: byte
              type: string
            next_validators_hash:
              format: byte
              type: string
            proposer_address:
              format: byte
              type: string
            time:
              format: date-time
              type: string
            validators_hash:
              format: byte
              title: hashes from the app output from the prev block
              type: string
            version:
              description: >-
                Consensus captures the consensus rules for processing a block in
                the blockchain,

                including all blockchain data structures and the rules of the
                application's

                state transition machine.
              properties:
                app:
                  format: uint64
                  type: string
                block:
                  format: uint64
                  type: string
              title: basic block info
              type: object
          type: object
        last_commit:
          description: >-
            Commit contains the evidence that a block was committed by a set of
            validators.
          properties:
            block_id:
              properties:
                hash:
                  format: byte
                  type: string
                part_set_header:
                  properties:
                    hash:
                      format: byte
                      type: string
                    total:
                      format: int64
                      type: integer
                  title: PartsetHeader
                  type: object
              title: BlockID
              type: object
            height:
              format: int64
              type: string
            round:
              format: int32
              type: integer
            signatures:
              items:
                description: CommitSig is a part of the Vote included in a Commit.
                properties:
                  block_id_flag:
                    default: BLOCK_ID_FLAG_UNKNOWN
                    enum:
                      - BLOCK_ID_FLAG_UNKNOWN
                      - BLOCK_ID_FLAG_ABSENT
                      - BLOCK_ID_FLAG_COMMIT
                      - BLOCK_ID_FLAG_NIL
                    title: BlockIdFlag indicates which BlcokID the signature is for
                    type: string
                  signature:
                    format: byte
                    type: string
                  timestamp:
                    format: date-time
                    type: string
                  validator_address:
                    format: byte
                    type: string
                type: object
              type: array
          type: object
      type: object
    tendermint.types.BlockID:
      properties:
        hash:
          format: byte
          type: string
        part_set_header:
          properties:
            hash:
              format: byte
              type: string
            total:
              format: int64
              type: integer
          title: PartsetHeader
          type: object
      title: BlockID
      type: object
    tendermint.types.BlockIDFlag:
      default: BLOCK_ID_FLAG_UNKNOWN
      enum:
        - BLOCK_ID_FLAG_UNKNOWN
        - BLOCK_ID_FLAG_ABSENT
        - BLOCK_ID_FLAG_COMMIT
        - BLOCK_ID_FLAG_NIL
      title: BlockIdFlag indicates which BlcokID the signature is for
      type: string
    tendermint.types.Commit:
      description: >-
        Commit contains the evidence that a block was committed by a set of
        validators.
      properties:
        block_id:
          properties:
            hash:
              format: byte
              type: string
            part_set_header:
              properties:
                hash:
                  format: byte
                  type: string
                total:
                  format: int64
                  type: integer
              title: PartsetHeader
              type: object
          title: BlockID
          type: object
        height:
          format: int64
          type: string
        round:
          format: int32
          type: integer
        signatures:
          items:
            description: CommitSig is a part of the Vote included in a Commit.
            properties:
              block_id_flag:
                default: BLOCK_ID_FLAG_UNKNOWN
                enum:
                  - BLOCK_ID_FLAG_UNKNOWN
                  - BLOCK_ID_FLAG_ABSENT
                  - BLOCK_ID_FLAG_COMMIT
                  - BLOCK_ID_FLAG_NIL
                title: BlockIdFlag indicates which BlcokID the signature is for
                type: string
              signature:
                format: byte
                type: string
              timestamp:
                format: date-time
                type: string
              validator_address:
                format: byte
                type: string
            type: object
          type: array
      type: object
    tendermint.types.CommitSig:
      description: CommitSig is a part of the Vote included in a Commit.
      properties:
        block_id_flag:
          default: BLOCK_ID_FLAG_UNKNOWN
          enum:
            - BLOCK_ID_FLAG_UNKNOWN
            - BLOCK_ID_FLAG_ABSENT
            - BLOCK_ID_FLAG_COMMIT
            - BLOCK_ID_FLAG_NIL
          title: BlockIdFlag indicates which BlcokID the signature is for
          type: string
        signature:
          format: byte
          type: string
        timestamp:
          format: date-time
          type: string
        validator_address:
          format: byte
          type: string
      type: object
    tendermint.types.Data:
      properties:
        txs:
          description: >-
            Txs that will be applied by state @ block.Height+1.

            NOTE: not all txs here are valid.  We're just agreeing on the order
            first.

            This means that block.AppHash does not include these txs.
          items:
            format: byte
            type: string
          type: array
      title: Data contains the set of transactions included in the block
      type: object
    tendermint.types.DuplicateVoteEvidence:
      description: >-
        DuplicateVoteEvidence contains evidence of a validator signed two
        conflicting votes.
      properties:
        timestamp:
          format: date-time
          type: string
        total_voting_power:
          format: int64
          type: string
        validator_power:
          format: int64
          type: string
        vote_a:
          description: >-
            Vote represents a prevote, precommit, or commit vote from validators
            for

            consensus.
          properties:
            block_id:
              properties:
                hash:
                  format: byte
                  type: string
                part_set_header:
                  properties:
                    hash:
                      format: byte
                      type: string
                    total:
                      format: int64
                      type: integer
                  title: PartsetHeader
                  type: object
              title: BlockID
              type: object
            height:
              format: int64
              type: string
            round:
              format: int32
              type: integer
            signature:
              format: byte
              type: string
            timestamp:
              format: date-time
              type: string
            type:
              default: SIGNED_MSG_TYPE_UNKNOWN
              description: |-
                SignedMsgType is a type of signed message in the consensus.

                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
              enum:
                - SIGNED_MSG_TYPE_UNKNOWN
                - SIGNED_MSG_TYPE_PREVOTE
                - SIGNED_MSG_TYPE_PRECOMMIT
                - SIGNED_MSG_TYPE_PROPOSAL
              type: string
            validator_address:
              format: byte
              type: string
            validator_index:
              format: int32
              type: integer
          type: object
        vote_b:
          description: >-
            Vote represents a prevote, precommit, or commit vote from validators
            for

            consensus.
          properties:
            block_id:
              properties:
                hash:
                  format: byte
                  type: string
                part_set_header:
                  properties:
                    hash:
                      format: byte
                      type: string
                    total:
                      format: int64
                      type: integer
                  title: PartsetHeader
                  type: object
              title: BlockID
              type: object
            height:
              format: int64
              type: string
            round:
              format: int32
              type: integer
            signature:
              format: byte
              type: string
            timestamp:
              format: date-time
              type: string
            type:
              default: SIGNED_MSG_TYPE_UNKNOWN
              description: |-
                SignedMsgType is a type of signed message in the consensus.

                 - SIGNED_MSG_TYPE_PREVOTE: Votes
                 - SIGNED_MSG_TYPE_PROPOSAL: Proposals
              enum:
                - SIGNED_MSG_TYPE_UNKNOWN
                - SIGNED_MSG_TYPE_PREVOTE
                - SIGNED_MSG_TYPE_PRECOMMIT
                - SIGNED_MSG_TYPE_PROPOSAL
              type: string
            validator_address:
              format: byte
              type: string
            validator_index:
              format: int32
              type: integer
          type: object
      type: object
    tendermint.types.Evidence:
      properties:
        duplicate_vote_evidence:
          description: >-
            DuplicateVoteEvidence contains evidence of a validator signed two
            conflicting votes.
          properties:
            timestamp:
              format: date-time
              type: string
            total_voting_power:
              format: int64
              type: string
            validator_power:
              format: int64
              type: string
            vote_a:
              description: >-
                Vote represents a prevote, precommit, or commit vote from
                validators for

                consensus.
              properties:
                block_id:
                  properties:
                    hash:
                      format: byte
                      type: string
                    part_set_header:
                      properties:
                        hash:
                          format: byte
                          type: string
                        total:
                          format: int64
                          type: integer
                      title: PartsetHeader
                      type: object
                  title: BlockID
                  type: object
                height:
                  format: int64
                  type: string
                round:
                  format: int32
                  type: integer
                signature:
                  format: byte
                  type: string
                timestamp:
                  format: date-time
                  type: string
                type:
                  default: SIGNED_MSG_TYPE_UNKNOWN
                  description: |-
                    SignedMsgType is a type of signed message in the consensus.

                     - SIGNED_MSG_TYPE_PREVOTE: Votes
                     - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                  enum:
                    - SIGNED_MSG_TYPE_UNKNOWN
                    - SIGNED_MSG_TYPE_PREVOTE
                    - SIGNED_MSG_TYPE_PRECOMMIT
                    - SIGNED_MSG_TYPE_PROPOSAL
                  type: string
                validator_address:
                  format: byte
                  type: string
                validator_index:
                  format: int32
                  type: integer
              type: object
            vote_b:
              description: >-
                Vote represents a prevote, precommit, or commit vote from
                validators for

                consensus.
              properties:
                block_id:
                  properties:
                    hash:
                      format: byte
                      type: string
                    part_set_header:
                      properties:
                        hash:
                          format: byte
                          type: string
                        total:
                          format: int64
                          type: integer
                      title: PartsetHeader
                      type: object
                  title: BlockID
                  type: object
                height:
                  format: int64
                  type: string
                round:
                  format: int32
                  type: integer
                signature:
                  format: byte
                  type: string
                timestamp:
                  format: date-time
                  type: string
                type:
                  default: SIGNED_MSG_TYPE_UNKNOWN
                  description: |-
                    SignedMsgType is a type of signed message in the consensus.

                     - SIGNED_MSG_TYPE_PREVOTE: Votes
                     - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                  enum:
                    - SIGNED_MSG_TYPE_UNKNOWN
                    - SIGNED_MSG_TYPE_PREVOTE
                    - SIGNED_MSG_TYPE_PRECOMMIT
                    - SIGNED_MSG_TYPE_PROPOSAL
                  type: string
                validator_address:
                  format: byte
                  type: string
                validator_index:
                  format: int32
                  type: integer
              type: object
          type: object
        light_client_attack_evidence:
          description: >-
            LightClientAttackEvidence contains evidence of a set of validators
            attempting to mislead a light client.
          properties:
            byzantine_validators:
              items:
                properties:
                  address:
                    format: byte
                    type: string
                  proposer_priority:
                    format: int64
                    type: string
                  pub_key:
                    properties:
                      ed25519:
                        format: byte
                        type: string
                      secp256k1:
                        format: byte
                        type: string
                    title: >-
                      PublicKey defines the keys available for use with
                      Validators
                    type: object
                  voting_power:
                    format: int64
                    type: string
                type: object
              type: array
            common_height:
              format: int64
              type: string
            conflicting_block:
              properties:
                signed_header:
                  properties:
                    commit:
                      description: >-
                        Commit contains the evidence that a block was committed
                        by a set of validators.
                      properties:
                        block_id:
                          properties:
                            hash:
                              format: byte
                              type: string
                            part_set_header:
                              properties:
                                hash:
                                  format: byte
                                  type: string
                                total:
                                  format: int64
                                  type: integer
                              title: PartsetHeader
                              type: object
                          title: BlockID
                          type: object
                        height:
                          format: int64
                          type: string
                        round:
                          format: int32
                          type: integer
                        signatures:
                          items:
                            description: >-
                              CommitSig is a part of the Vote included in a
                              Commit.
                            properties:
                              block_id_flag:
                                default: BLOCK_ID_FLAG_UNKNOWN
                                enum:
                                  - BLOCK_ID_FLAG_UNKNOWN
                                  - BLOCK_ID_FLAG_ABSENT
                                  - BLOCK_ID_FLAG_COMMIT
                                  - BLOCK_ID_FLAG_NIL
                                title: >-
                                  BlockIdFlag indicates which BlcokID the
                                  signature is for
                                type: string
                              signature:
                                format: byte
                                type: string
                              timestamp:
                                format: date-time
                                type: string
                              validator_address:
                                format: byte
                                type: string
                            type: object
                          type: array
                      type: object
                    header:
                      description: Header defines the structure of a block header.
                      properties:
                        app_hash:
                          format: byte
                          type: string
                        chain_id:
                          type: string
                        consensus_hash:
                          format: byte
                          type: string
                        data_hash:
                          format: byte
                          type: string
                        evidence_hash:
                          format: byte
                          title: consensus info
                          type: string
                        height:
                          format: int64
                          type: string
                        last_block_id:
                          properties:
                            hash:
                              format: byte
                              type: string
                            part_set_header:
                              properties:
                                hash:
                                  format: byte
                                  type: string
                                total:
                                  format: int64
                                  type: integer
                              title: PartsetHeader
                              type: object
                          title: prev block info
                          type: object
                        last_commit_hash:
                          format: byte
                          title: hashes of block data
                          type: string
                        last_results_hash:
                          format: byte
                          type: string
                        next_validators_hash:
                          format: byte
                          type: string
                        proposer_address:
                          format: byte
                          type: string
                        time:
                          format: date-time
                          type: string
                        validators_hash:
                          format: byte
                          title: hashes from the app output from the prev block
                          type: string
                        version:
                          description: >-
                            Consensus captures the consensus rules for
                            processing a block in the blockchain,

                            including all blockchain data structures and the
                            rules of the application's

                            state transition machine.
                          properties:
                            app:
                              format: uint64
                              type: string
                            block:
                              format: uint64
                              type: string
                          title: basic block info
                          type: object
                      type: object
                  type: object
                validator_set:
                  properties:
                    proposer:
                      properties:
                        address:
                          format: byte
                          type: string
                        proposer_priority:
                          format: int64
                          type: string
                        pub_key:
                          properties:
                            ed25519:
                              format: byte
                              type: string
                            secp256k1:
                              format: byte
                              type: string
                          title: >-
                            PublicKey defines the keys available for use with
                            Validators
                          type: object
                        voting_power:
                          format: int64
                          type: string
                      type: object
                    total_voting_power:
                      format: int64
                      type: string
                    validators:
                      items:
                        properties:
                          address:
                            format: byte
                            type: string
                          proposer_priority:
                            format: int64
                            type: string
                          pub_key:
                            properties:
                              ed25519:
                                format: byte
                                type: string
                              secp256k1:
                                format: byte
                                type: string
                            title: >-
                              PublicKey defines the keys available for use with
                              Validators
                            type: object
                          voting_power:
                            format: int64
                            type: string
                        type: object
                      type: array
                  type: object
              type: object
            timestamp:
              format: date-time
              type: string
            total_voting_power:
              format: int64
              type: string
          type: object
      type: object
    tendermint.types.EvidenceList:
      properties:
        evidence:
          items:
            properties:
              duplicate_vote_evidence:
                description: >-
                  DuplicateVoteEvidence contains evidence of a validator signed
                  two conflicting votes.
                properties:
                  timestamp:
                    format: date-time
                    type: string
                  total_voting_power:
                    format: int64
                    type: string
                  validator_power:
                    format: int64
                    type: string
                  vote_a:
                    description: >-
                      Vote represents a prevote, precommit, or commit vote from
                      validators for

                      consensus.
                    properties:
                      block_id:
                        properties:
                          hash:
                            format: byte
                            type: string
                          part_set_header:
                            properties:
                              hash:
                                format: byte
                                type: string
                              total:
                                format: int64
                                type: integer
                            title: PartsetHeader
                            type: object
                        title: BlockID
                        type: object
                      height:
                        format: int64
                        type: string
                      round:
                        format: int32
                        type: integer
                      signature:
                        format: byte
                        type: string
                      timestamp:
                        format: date-time
                        type: string
                      type:
                        default: SIGNED_MSG_TYPE_UNKNOWN
                        description: >-
                          SignedMsgType is a type of signed message in the
                          consensus.

                           - SIGNED_MSG_TYPE_PREVOTE: Votes
                           - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                        enum:
                          - SIGNED_MSG_TYPE_UNKNOWN
                          - SIGNED_MSG_TYPE_PREVOTE
                          - SIGNED_MSG_TYPE_PRECOMMIT
                          - SIGNED_MSG_TYPE_PROPOSAL
                        type: string
                      validator_address:
                        format: byte
                        type: string
                      validator_index:
                        format: int32
                        type: integer
                    type: object
                  vote_b:
                    description: >-
                      Vote represents a prevote, precommit, or commit vote from
                      validators for

                      consensus.
                    properties:
                      block_id:
                        properties:
                          hash:
                            format: byte
                            type: string
                          part_set_header:
                            properties:
                              hash:
                                format: byte
                                type: string
                              total:
                                format: int64
                                type: integer
                            title: PartsetHeader
                            type: object
                        title: BlockID
                        type: object
                      height:
                        format: int64
                        type: string
                      round:
                        format: int32
                        type: integer
                      signature:
                        format: byte
                        type: string
                      timestamp:
                        format: date-time
                        type: string
                      type:
                        default: SIGNED_MSG_TYPE_UNKNOWN
                        description: >-
                          SignedMsgType is a type of signed message in the
                          consensus.

                           - SIGNED_MSG_TYPE_PREVOTE: Votes
                           - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                        enum:
                          - SIGNED_MSG_TYPE_UNKNOWN
                          - SIGNED_MSG_TYPE_PREVOTE
                          - SIGNED_MSG_TYPE_PRECOMMIT
                          - SIGNED_MSG_TYPE_PROPOSAL
                        type: string
                      validator_address:
                        format: byte
                        type: string
                      validator_index:
                        format: int32
                        type: integer
                    type: object
                type: object
              light_client_attack_evidence:
                description: >-
                  LightClientAttackEvidence contains evidence of a set of
                  validators attempting to mislead a light client.
                properties:
                  byzantine_validators:
                    items:
                      properties:
                        address:
                          format: byte
                          type: string
                        proposer_priority:
                          format: int64
                          type: string
                        pub_key:
                          properties:
                            ed25519:
                              format: byte
                              type: string
                            secp256k1:
                              format: byte
                              type: string
                          title: >-
                            PublicKey defines the keys available for use with
                            Validators
                          type: object
                        voting_power:
                          format: int64
                          type: string
                      type: object
                    type: array
                  common_height:
                    format: int64
                    type: string
                  conflicting_block:
                    properties:
                      signed_header:
                        properties:
                          commit:
                            description: >-
                              Commit contains the evidence that a block was
                              committed by a set of validators.
                            properties:
                              block_id:
                                properties:
                                  hash:
                                    format: byte
                                    type: string
                                  part_set_header:
                                    properties:
                                      hash:
                                        format: byte
                                        type: string
                                      total:
                                        format: int64
                                        type: integer
                                    title: PartsetHeader
                                    type: object
                                title: BlockID
                                type: object
                              height:
                                format: int64
                                type: string
                              round:
                                format: int32
                                type: integer
                              signatures:
                                items:
                                  description: >-
                                    CommitSig is a part of the Vote included in
                                    a Commit.
                                  properties:
                                    block_id_flag:
                                      default: BLOCK_ID_FLAG_UNKNOWN
                                      enum:
                                        - BLOCK_ID_FLAG_UNKNOWN
                                        - BLOCK_ID_FLAG_ABSENT
                                        - BLOCK_ID_FLAG_COMMIT
                                        - BLOCK_ID_FLAG_NIL
                                      title: >-
                                        BlockIdFlag indicates which BlcokID the
                                        signature is for
                                      type: string
                                    signature:
                                      format: byte
                                      type: string
                                    timestamp:
                                      format: date-time
                                      type: string
                                    validator_address:
                                      format: byte
                                      type: string
                                  type: object
                                type: array
                            type: object
                          header:
                            description: Header defines the structure of a block header.
                            properties:
                              app_hash:
                                format: byte
                                type: string
                              chain_id:
                                type: string
                              consensus_hash:
                                format: byte
                                type: string
                              data_hash:
                                format: byte
                                type: string
                              evidence_hash:
                                format: byte
                                title: consensus info
                                type: string
                              height:
                                format: int64
                                type: string
                              last_block_id:
                                properties:
                                  hash:
                                    format: byte
                                    type: string
                                  part_set_header:
                                    properties:
                                      hash:
                                        format: byte
                                        type: string
                                      total:
                                        format: int64
                                        type: integer
                                    title: PartsetHeader
                                    type: object
                                title: prev block info
                                type: object
                              last_commit_hash:
                                format: byte
                                title: hashes of block data
                                type: string
                              last_results_hash:
                                format: byte
                                type: string
                              next_validators_hash:
                                format: byte
                                type: string
                              proposer_address:
                                format: byte
                                type: string
                              time:
                                format: date-time
                                type: string
                              validators_hash:
                                format: byte
                                title: hashes from the app output from the prev block
                                type: string
                              version:
                                description: >-
                                  Consensus captures the consensus rules for
                                  processing a block in the blockchain,

                                  including all blockchain data structures and
                                  the rules of the application's

                                  state transition machine.
                                properties:
                                  app:
                                    format: uint64
                                    type: string
                                  block:
                                    format: uint64
                                    type: string
                                title: basic block info
                                type: object
                            type: object
                        type: object
                      validator_set:
                        properties:
                          proposer:
                            properties:
                              address:
                                format: byte
                                type: string
                              proposer_priority:
                                format: int64
                                type: string
                              pub_key:
                                properties:
                                  ed25519:
                                    format: byte
                                    type: string
                                  secp256k1:
                                    format: byte
                                    type: string
                                title: >-
                                  PublicKey defines the keys available for use
                                  with Validators
                                type: object
                              voting_power:
                                format: int64
                                type: string
                            type: object
                          total_voting_power:
                            format: int64
                            type: string
                          validators:
                            items:
                              properties:
                                address:
                                  format: byte
                                  type: string
                                proposer_priority:
                                  format: int64
                                  type: string
                                pub_key:
                                  properties:
                                    ed25519:
                                      format: byte
                                      type: string
                                    secp256k1:
                                      format: byte
                                      type: string
                                  title: >-
                                    PublicKey defines the keys available for use
                                    with Validators
                                  type: object
                                voting_power:
                                  format: int64
                                  type: string
                              type: object
                            type: array
                        type: object
                    type: object
                  timestamp:
                    format: date-time
                    type: string
                  total_voting_power:
                    format: int64
                    type: string
                type: object
            type: object
          type: array
      type: object
    tendermint.types.Header:
      description: Header defines the structure of a block header.
      properties:
        app_hash:
          format: byte
          type: string
        chain_id:
          type: string
        consensus_hash:
          format: byte
          type: string
        data_hash:
          format: byte
          type: string
        evidence_hash:
          format: byte
          title: consensus info
          type: string
        height:
          format: int64
          type: string
        last_block_id:
          properties:
            hash:
              format: byte
              type: string
            part_set_header:
              properties:
                hash:
                  format: byte
                  type: string
                total:
                  format: int64
                  type: integer
              title: PartsetHeader
              type: object
          title: prev block info
          type: object
        last_commit_hash:
          format: byte
          title: hashes of block data
          type: string
        last_results_hash:
          format: byte
          type: string
        next_validators_hash:
          format: byte
          type: string
        proposer_address:
          format: byte
          type: string
        time:
          format: date-time
          type: string
        validators_hash:
          format: byte
          title: hashes from the app output from the prev block
          type: string
        version:
          description: >-
            Consensus captures the consensus rules for processing a block in the
            blockchain,

            including all blockchain data structures and the rules of the
            application's

            state transition machine.
          properties:
            app:
              format: uint64
              type: string
            block:
              format: uint64
              type: string
          title: basic block info
          type: object
      type: object
    tendermint.types.LightBlock:
      properties:
        signed_header:
          properties:
            commit:
              description: >-
                Commit contains the evidence that a block was committed by a set
                of validators.
              properties:
                block_id:
                  properties:
                    hash:
                      format: byte
                      type: string
                    part_set_header:
                      properties:
                        hash:
                          format: byte
                          type: string
                        total:
                          format: int64
                          type: integer
                      title: PartsetHeader
                      type: object
                  title: BlockID
                  type: object
                height:
                  format: int64
                  type: string
                round:
                  format: int32
                  type: integer
                signatures:
                  items:
                    description: CommitSig is a part of the Vote included in a Commit.
                    properties:
                      block_id_flag:
                        default: BLOCK_ID_FLAG_UNKNOWN
                        enum:
                          - BLOCK_ID_FLAG_UNKNOWN
                          - BLOCK_ID_FLAG_ABSENT
                          - BLOCK_ID_FLAG_COMMIT
                          - BLOCK_ID_FLAG_NIL
                        title: >-
                          BlockIdFlag indicates which BlcokID the signature is
                          for
                        type: string
                      signature:
                        format: byte
                        type: string
                      timestamp:
                        format: date-time
                        type: string
                      validator_address:
                        format: byte
                        type: string
                    type: object
                  type: array
              type: object
            header:
              description: Header defines the structure of a block header.
              properties:
                app_hash:
                  format: byte
                  type: string
                chain_id:
                  type: string
                consensus_hash:
                  format: byte
                  type: string
                data_hash:
                  format: byte
                  type: string
                evidence_hash:
                  format: byte
                  title: consensus info
                  type: string
                height:
                  format: int64
                  type: string
                last_block_id:
                  properties:
                    hash:
                      format: byte
                      type: string
                    part_set_header:
                      properties:
                        hash:
                          format: byte
                          type: string
                        total:
                          format: int64
                          type: integer
                      title: PartsetHeader
                      type: object
                  title: prev block info
                  type: object
                last_commit_hash:
                  format: byte
                  title: hashes of block data
                  type: string
                last_results_hash:
                  format: byte
                  type: string
                next_validators_hash:
                  format: byte
                  type: string
                proposer_address:
                  format: byte
                  type: string
                time:
                  format: date-time
                  type: string
                validators_hash:
                  format: byte
                  title: hashes from the app output from the prev block
                  type: string
                version:
                  description: >-
                    Consensus captures the consensus rules for processing a
                    block in the blockchain,

                    including all blockchain data structures and the rules of
                    the application's

                    state transition machine.
                  properties:
                    app:
                      format: uint64
                      type: string
                    block:
                      format: uint64
                      type: string
                  title: basic block info
                  type: object
              type: object
          type: object
        validator_set:
          properties:
            proposer:
              properties:
                address:
                  format: byte
                  type: string
                proposer_priority:
                  format: int64
                  type: string
                pub_key:
                  properties:
                    ed25519:
                      format: byte
                      type: string
                    secp256k1:
                      format: byte
                      type: string
                  title: PublicKey defines the keys available for use with Validators
                  type: object
                voting_power:
                  format: int64
                  type: string
              type: object
            total_voting_power:
              format: int64
              type: string
            validators:
              items:
                properties:
                  address:
                    format: byte
                    type: string
                  proposer_priority:
                    format: int64
                    type: string
                  pub_key:
                    properties:
                      ed25519:
                        format: byte
                        type: string
                      secp256k1:
                        format: byte
                        type: string
                    title: >-
                      PublicKey defines the keys available for use with
                      Validators
                    type: object
                  voting_power:
                    format: int64
                    type: string
                type: object
              type: array
          type: object
      type: object
    tendermint.types.LightClientAttackEvidence:
      description: >-
        LightClientAttackEvidence contains evidence of a set of validators
        attempting to mislead a light client.
      properties:
        byzantine_validators:
          items:
            properties:
              address:
                format: byte
                type: string
              proposer_priority:
                format: int64
                type: string
              pub_key:
                properties:
                  ed25519:
                    format: byte
                    type: string
                  secp256k1:
                    format: byte
                    type: string
                title: PublicKey defines the keys available for use with Validators
                type: object
              voting_power:
                format: int64
                type: string
            type: object
          type: array
        common_height:
          format: int64
          type: string
        conflicting_block:
          properties:
            signed_header:
              properties:
                commit:
                  description: >-
                    Commit contains the evidence that a block was committed by a
                    set of validators.
                  properties:
                    block_id:
                      properties:
                        hash:
                          format: byte
                          type: string
                        part_set_header:
                          properties:
                            hash:
                              format: byte
                              type: string
                            total:
                              format: int64
                              type: integer
                          title: PartsetHeader
                          type: object
                      title: BlockID
                      type: object
                    height:
                      format: int64
                      type: string
                    round:
                      format: int32
                      type: integer
                    signatures:
                      items:
                        description: CommitSig is a part of the Vote included in a Commit.
                        properties:
                          block_id_flag:
                            default: BLOCK_ID_FLAG_UNKNOWN
                            enum:
                              - BLOCK_ID_FLAG_UNKNOWN
                              - BLOCK_ID_FLAG_ABSENT
                              - BLOCK_ID_FLAG_COMMIT
                              - BLOCK_ID_FLAG_NIL
                            title: >-
                              BlockIdFlag indicates which BlcokID the signature
                              is for
                            type: string
                          signature:
                            format: byte
                            type: string
                          timestamp:
                            format: date-time
                            type: string
                          validator_address:
                            format: byte
                            type: string
                        type: object
                      type: array
                  type: object
                header:
                  description: Header defines the structure of a block header.
                  properties:
                    app_hash:
                      format: byte
                      type: string
                    chain_id:
                      type: string
                    consensus_hash:
                      format: byte
                      type: string
                    data_hash:
                      format: byte
                      type: string
                    evidence_hash:
                      format: byte
                      title: consensus info
                      type: string
                    height:
                      format: int64
                      type: string
                    last_block_id:
                      properties:
                        hash:
                          format: byte
                          type: string
                        part_set_header:
                          properties:
                            hash:
                              format: byte
                              type: string
                            total:
                              format: int64
                              type: integer
                          title: PartsetHeader
                          type: object
                      title: prev block info
                      type: object
                    last_commit_hash:
                      format: byte
                      title: hashes of block data
                      type: string
                    last_results_hash:
                      format: byte
                      type: string
                    next_validators_hash:
                      format: byte
                      type: string
                    proposer_address:
                      format: byte
                      type: string
                    time:
                      format: date-time
                      type: string
                    validators_hash:
                      format: byte
                      title: hashes from the app output from the prev block
                      type: string
                    version:
                      description: >-
                        Consensus captures the consensus rules for processing a
                        block in the blockchain,

                        including all blockchain data structures and the rules
                        of the application's

                        state transition machine.
                      properties:
                        app:
                          format: uint64
                          type: string
                        block:
                          format: uint64
                          type: string
                      title: basic block info
                      type: object
                  type: object
              type: object
            validator_set:
              properties:
                proposer:
                  properties:
                    address:
                      format: byte
                      type: string
                    proposer_priority:
                      format: int64
                      type: string
                    pub_key:
                      properties:
                        ed25519:
                          format: byte
                          type: string
                        secp256k1:
                          format: byte
                          type: string
                      title: >-
                        PublicKey defines the keys available for use with
                        Validators
                      type: object
                    voting_power:
                      format: int64
                      type: string
                  type: object
                total_voting_power:
                  format: int64
                  type: string
                validators:
                  items:
                    properties:
                      address:
                        format: byte
                        type: string
                      proposer_priority:
                        format: int64
                        type: string
                      pub_key:
                        properties:
                          ed25519:
                            format: byte
                            type: string
                          secp256k1:
                            format: byte
                            type: string
                        title: >-
                          PublicKey defines the keys available for use with
                          Validators
                        type: object
                      voting_power:
                        format: int64
                        type: string
                    type: object
                  type: array
              type: object
          type: object
        timestamp:
          format: date-time
          type: string
        total_voting_power:
          format: int64
          type: string
      type: object
    tendermint.types.PartSetHeader:
      properties:
        hash:
          format: byte
          type: string
        total:
          format: int64
          type: integer
      title: PartsetHeader
      type: object
    tendermint.types.SignedHeader:
      properties:
        commit:
          description: >-
            Commit contains the evidence that a block was committed by a set of
            validators.
          properties:
            block_id:
              properties:
                hash:
                  format: byte
                  type: string
                part_set_header:
                  properties:
                    hash:
                      format: byte
                      type: string
                    total:
                      format: int64
                      type: integer
                  title: PartsetHeader
                  type: object
              title: BlockID
              type: object
            height:
              format: int64
              type: string
            round:
              format: int32
              type: integer
            signatures:
              items:
                description: CommitSig is a part of the Vote included in a Commit.
                properties:
                  block_id_flag:
                    default: BLOCK_ID_FLAG_UNKNOWN
                    enum:
                      - BLOCK_ID_FLAG_UNKNOWN
                      - BLOCK_ID_FLAG_ABSENT
                      - BLOCK_ID_FLAG_COMMIT
                      - BLOCK_ID_FLAG_NIL
                    title: BlockIdFlag indicates which BlcokID the signature is for
                    type: string
                  signature:
                    format: byte
                    type: string
                  timestamp:
                    format: date-time
                    type: string
                  validator_address:
                    format: byte
                    type: string
                type: object
              type: array
          type: object
        header:
          description: Header defines the structure of a block header.
          properties:
            app_hash:
              format: byte
              type: string
            chain_id:
              type: string
            consensus_hash:
              format: byte
              type: string
            data_hash:
              format: byte
              type: string
            evidence_hash:
              format: byte
              title: consensus info
              type: string
            height:
              format: int64
              type: string
            last_block_id:
              properties:
                hash:
                  format: byte
                  type: string
                part_set_header:
                  properties:
                    hash:
                      format: byte
                      type: string
                    total:
                      format: int64
                      type: integer
                  title: PartsetHeader
                  type: object
              title: prev block info
              type: object
            last_commit_hash:
              format: byte
              title: hashes of block data
              type: string
            last_results_hash:
              format: byte
              type: string
            next_validators_hash:
              format: byte
              type: string
            proposer_address:
              format: byte
              type: string
            time:
              format: date-time
              type: string
            validators_hash:
              format: byte
              title: hashes from the app output from the prev block
              type: string
            version:
              description: >-
                Consensus captures the consensus rules for processing a block in
                the blockchain,

                including all blockchain data structures and the rules of the
                application's

                state transition machine.
              properties:
                app:
                  format: uint64
                  type: string
                block:
                  format: uint64
                  type: string
              title: basic block info
              type: object
          type: object
      type: object
    tendermint.types.SignedMsgType:
      default: SIGNED_MSG_TYPE_UNKNOWN
      description: |-
        SignedMsgType is a type of signed message in the consensus.

         - SIGNED_MSG_TYPE_PREVOTE: Votes
         - SIGNED_MSG_TYPE_PROPOSAL: Proposals
      enum:
        - SIGNED_MSG_TYPE_UNKNOWN
        - SIGNED_MSG_TYPE_PREVOTE
        - SIGNED_MSG_TYPE_PRECOMMIT
        - SIGNED_MSG_TYPE_PROPOSAL
      type: string
    tendermint.types.Validator:
      properties:
        address:
          format: byte
          type: string
        proposer_priority:
          format: int64
          type: string
        pub_key:
          properties:
            ed25519:
              format: byte
              type: string
            secp256k1:
              format: byte
              type: string
          title: PublicKey defines the keys available for use with Validators
          type: object
        voting_power:
          format: int64
          type: string
      type: object
    tendermint.types.ValidatorSet:
      properties:
        proposer:
          properties:
            address:
              format: byte
              type: string
            proposer_priority:
              format: int64
              type: string
            pub_key:
              properties:
                ed25519:
                  format: byte
                  type: string
                secp256k1:
                  format: byte
                  type: string
              title: PublicKey defines the keys available for use with Validators
              type: object
            voting_power:
              format: int64
              type: string
          type: object
        total_voting_power:
          format: int64
          type: string
        validators:
          items:
            properties:
              address:
                format: byte
                type: string
              proposer_priority:
                format: int64
                type: string
              pub_key:
                properties:
                  ed25519:
                    format: byte
                    type: string
                  secp256k1:
                    format: byte
                    type: string
                title: PublicKey defines the keys available for use with Validators
                type: object
              voting_power:
                format: int64
                type: string
            type: object
          type: array
      type: object
    tendermint.types.Vote:
      description: |-
        Vote represents a prevote, precommit, or commit vote from validators for
        consensus.
      properties:
        block_id:
          properties:
            hash:
              format: byte
              type: string
            part_set_header:
              properties:
                hash:
                  format: byte
                  type: string
                total:
                  format: int64
                  type: integer
              title: PartsetHeader
              type: object
          title: BlockID
          type: object
        height:
          format: int64
          type: string
        round:
          format: int32
          type: integer
        signature:
          format: byte
          type: string
        timestamp:
          format: date-time
          type: string
        type:
          default: SIGNED_MSG_TYPE_UNKNOWN
          description: |-
            SignedMsgType is a type of signed message in the consensus.

             - SIGNED_MSG_TYPE_PREVOTE: Votes
             - SIGNED_MSG_TYPE_PROPOSAL: Proposals
          enum:
            - SIGNED_MSG_TYPE_UNKNOWN
            - SIGNED_MSG_TYPE_PREVOTE
            - SIGNED_MSG_TYPE_PRECOMMIT
            - SIGNED_MSG_TYPE_PROPOSAL
          type: string
        validator_address:
          format: byte
          type: string
        validator_index:
          format: int32
          type: integer
      type: object
    tendermint.version.Consensus:
      description: >-
        Consensus captures the consensus rules for processing a block in the
        blockchain,

        including all blockchain data structures and the rules of the
        application's

        state transition machine.
      properties:
        app:
          format: uint64
          type: string
        block:
          format: uint64
          type: string
      type: object
    xpla.reward.v1beta1.Params:
      description: Params defines the set of params for the reward module.
      properties:
        community_pool_rate:
          type: string
        fee_pool_rate:
          type: string
        reserve_account:
          type: string
        reserve_rate:
          type: string
        reward_distribute_account:
          type: string
      type: object
    xpla.reward.v1beta1.QueryParamsResponse:
      description: >-
        QueryParamsResponse is the response type for the Query/Params RPC
        method.
      properties:
        params:
          description: params defines the parameters of the module.
          properties:
            community_pool_rate:
              type: string
            fee_pool_rate:
              type: string
            reserve_account:
              type: string
            reserve_rate:
              type: string
            reward_distribute_account:
              type: string
          type: object
      type: object
    xpla.reward.v1beta1.QueryPoolResponse:
      description: |-
        QueryPoolResponse is the response type for the Query/Pool
        RPC method.
      properties:
        pool:
          description: pool defines reward pool's coins.
          items:
            description: >-
              Coin defines a token with a denomination and an amount.


              NOTE: The amount field is an Int which implements the custom
              method

              signatures required by gogoproto.
            properties:
              amount:
                type: string
              denom:
                type: string
            type: object
          type: array
      type: object
    xpla.volunteer.v1beta1.QueryVolunteerValidatorsResponse:
      properties:
        volunteer_validators:
          items:
            type: string
          type: array
      type: object
info:
  title: XPLA Chain
  version: xpla
openapi: 3.0.0
paths:
  /cosmos/auth/v1beta1/accounts:
    get:
      description: 'Since: cosmos-sdk 0.43'
      operationId: Accounts
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryAccountsResponse is the response type for the
                  Query/Accounts RPC method.


                  Since: cosmos-sdk 0.43
                properties:
                  accounts:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    title: accounts are the existing accounts
                    type: array
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Accounts returns all the existing accounts
      tags:
        - cosmos/auth/v1beta1
  /cosmos/auth/v1beta1/accounts/{address}:
    get:
      operationId: Account
      parameters:
        - description: address defines the address to query for.
          in: path
          name: address
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryAccountResponse is the response type for the
                  Query/Account RPC method.
                properties:
                  account:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Account returns account details based on address.
      tags:
        - cosmos/auth/v1beta1
  /cosmos/auth/v1beta1/module_accounts/{name}:
    get:
      operationId: ModuleAccountByName
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryModuleAccountByNameResponse is the response type for the
                  Query/ModuleAccountByName RPC method.
                properties:
                  account:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: ModuleAccountByName returns the module account info by module name
      tags:
        - cosmos/auth/v1beta1
  /cosmos/auth/v1beta1/params:
    get:
      operationId: Params
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryParamsResponse is the response type for the Query/Params
                  RPC method.
                properties:
                  params:
                    description: params defines the parameters of the module.
                    properties:
                      max_memo_characters:
                        format: uint64
                        type: string
                      sig_verify_cost_ed25519:
                        format: uint64
                        type: string
                      sig_verify_cost_secp256k1:
                        format: uint64
                        type: string
                      tx_sig_limit:
                        format: uint64
                        type: string
                      tx_size_cost_per_byte:
                        format: uint64
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Params queries all parameters.
      tags:
        - cosmos/auth/v1beta1
  /cosmos/authz/v1beta1/grants:
    get:
      operationId: Grants
      parameters:
        - in: query
          name: granter
          required: false
          schema:
            type: string
        - in: query
          name: grantee
          required: false
          schema:
            type: string
        - description: >-
            Optional, msg_type_url, when set, will query only grants matching
            given msg type.
          in: query
          name: msg_type_url
          required: false
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryGrantsResponse is the response type for the
                  Query/Authorizations RPC method.
                properties:
                  grants:
                    description: >-
                      authorizations is a list of grants granted for grantee by
                      granter.
                    items:
                      description: |-
                        Grant gives permissions to execute
                        the provide method with expiration time.
                      properties:
                        authorization:
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized
                            message.


                            Protobuf library provides support to pack/unpack Any
                            values in the form

                            of utility functions or additional generated methods
                            of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := anypb.New(foo)
                                 if err != nil {
                                   ...
                                 }
                                 ...
                                 foo := &pb.Foo{}
                                 if err := any.UnmarshalTo(foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will
                            by default use

                            'type.googleapis.com/full.type.name' as the type URL
                            and the unpack

                            methods only use the fully qualified type name after
                            the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z"
                            will yield type

                            name "y.z".



                            JSON

                            ====

                            The JSON representation of an `Any` value uses the
                            regular

                            representation of the deserialized, embedded
                            message, with an

                            additional field `@type` which contains the type
                            URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a
                            custom JSON

                            representation, that representation will be embedded
                            adding a field

                            `value` which holds the custom JSON in addition to
                            the `@type`

                            field. Example (for message
                            [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                          properties:
                            type_url:
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must
                                contain at least

                                one "/" character. The last segment of the URL's
                                path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name
                                should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the
                                binary all types that they

                                expect it to use in the context of Any. However,
                                for URLs which use the

                                scheme `http`, `https`, or no scheme, one can
                                optionally set up a type

                                server that maps type URLs to message
                                definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a
                                [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup
                                results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently
                                available in the official

                                protobuf release, and it is not used for type
                                URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty
                                scheme) might be

                                used with implementation specific semantics.
                              type: string
                            value:
                              description: >-
                                Must be a valid serialized protocol buffer of
                                the above specified type.
                              format: byte
                              type: string
                          type: object
                        expiration:
                          format: date-time
                          type: string
                      type: object
                    type: array
                  pagination:
                    description: pagination defines an pagination for the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Returns list of `Authorization`, granted to the grantee by the granter.
      tags:
        - cosmos/authz/v1beta1
  /cosmos/authz/v1beta1/grants/grantee/{grantee}:
    get:
      description: 'Since: cosmos-sdk 0.45.2'
      operationId: GranteeGrants
      parameters:
        - in: path
          name: grantee
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryGranteeGrantsResponse is the response type for the
                  Query/GranteeGrants RPC method.
                properties:
                  grants:
                    description: grants is a list of grants granted to the grantee.
                    items:
                      description: 'Since: cosmos-sdk 0.45.2'
                      properties:
                        authorization:
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized
                            message.


                            Protobuf library provides support to pack/unpack Any
                            values in the form

                            of utility functions or additional generated methods
                            of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := anypb.New(foo)
                                 if err != nil {
                                   ...
                                 }
                                 ...
                                 foo := &pb.Foo{}
                                 if err := any.UnmarshalTo(foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will
                            by default use

                            'type.googleapis.com/full.type.name' as the type URL
                            and the unpack

                            methods only use the fully qualified type name after
                            the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z"
                            will yield type

                            name "y.z".



                            JSON

                            ====

                            The JSON representation of an `Any` value uses the
                            regular

                            representation of the deserialized, embedded
                            message, with an

                            additional field `@type` which contains the type
                            URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a
                            custom JSON

                            representation, that representation will be embedded
                            adding a field

                            `value` which holds the custom JSON in addition to
                            the `@type`

                            field. Example (for message
                            [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                          properties:
                            type_url:
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must
                                contain at least

                                one "/" character. The last segment of the URL's
                                path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name
                                should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the
                                binary all types that they

                                expect it to use in the context of Any. However,
                                for URLs which use the

                                scheme `http`, `https`, or no scheme, one can
                                optionally set up a type

                                server that maps type URLs to message
                                definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a
                                [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup
                                results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently
                                available in the official

                                protobuf release, and it is not used for type
                                URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty
                                scheme) might be

                                used with implementation specific semantics.
                              type: string
                            value:
                              description: >-
                                Must be a valid serialized protocol buffer of
                                the above specified type.
                              format: byte
                              type: string
                          type: object
                        expiration:
                          format: date-time
                          type: string
                        grantee:
                          type: string
                        granter:
                          type: string
                      title: >-
                        GrantAuthorization extends a grant with both the
                        addresses of the grantee and granter.

                        It is used in genesis.proto and query.proto
                      type: object
                    type: array
                  pagination:
                    description: pagination defines an pagination for the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: GranteeGrants returns a list of `GrantAuthorization` by grantee.
      tags:
        - cosmos/authz/v1beta1
  /cosmos/authz/v1beta1/grants/granter/{granter}:
    get:
      description: 'Since: cosmos-sdk 0.45.2'
      operationId: GranterGrants
      parameters:
        - in: path
          name: granter
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryGranterGrantsResponse is the response type for the
                  Query/GranterGrants RPC method.
                properties:
                  grants:
                    description: grants is a list of grants granted by the granter.
                    items:
                      description: 'Since: cosmos-sdk 0.45.2'
                      properties:
                        authorization:
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized
                            message.


                            Protobuf library provides support to pack/unpack Any
                            values in the form

                            of utility functions or additional generated methods
                            of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := anypb.New(foo)
                                 if err != nil {
                                   ...
                                 }
                                 ...
                                 foo := &pb.Foo{}
                                 if err := any.UnmarshalTo(foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will
                            by default use

                            'type.googleapis.com/full.type.name' as the type URL
                            and the unpack

                            methods only use the fully qualified type name after
                            the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z"
                            will yield type

                            name "y.z".



                            JSON

                            ====

                            The JSON representation of an `Any` value uses the
                            regular

                            representation of the deserialized, embedded
                            message, with an

                            additional field `@type` which contains the type
                            URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a
                            custom JSON

                            representation, that representation will be embedded
                            adding a field

                            `value` which holds the custom JSON in addition to
                            the `@type`

                            field. Example (for message
                            [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                          properties:
                            type_url:
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must
                                contain at least

                                one "/" character. The last segment of the URL's
                                path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name
                                should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the
                                binary all types that they

                                expect it to use in the context of Any. However,
                                for URLs which use the

                                scheme `http`, `https`, or no scheme, one can
                                optionally set up a type

                                server that maps type URLs to message
                                definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a
                                [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup
                                results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently
                                available in the official

                                protobuf release, and it is not used for type
                                URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty
                                scheme) might be

                                used with implementation specific semantics.
                              type: string
                            value:
                              description: >-
                                Must be a valid serialized protocol buffer of
                                the above specified type.
                              format: byte
                              type: string
                          type: object
                        expiration:
                          format: date-time
                          type: string
                        grantee:
                          type: string
                        granter:
                          type: string
                      title: >-
                        GrantAuthorization extends a grant with both the
                        addresses of the grantee and granter.

                        It is used in genesis.proto and query.proto
                      type: object
                    type: array
                  pagination:
                    description: pagination defines an pagination for the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: GranterGrants returns list of `GrantAuthorization`, granted by granter.
      tags:
        - cosmos/authz/v1beta1
  /cosmos/bank/v1beta1/balances/{address}:
    get:
      operationId: AllBalances
      parameters:
        - description: address is the address to query balances for.
          in: path
          name: address
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryAllBalancesResponse is the response type for the
                  Query/AllBalances RPC

                  method.
                properties:
                  balances:
                    description: balances is the balances of all the coins.
                    items:
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    type: array
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: AllBalances queries the balance of all coins for a single account.
      tags:
        - cosmos/bank/v1beta1
  /cosmos/bank/v1beta1/balances/{address}/by_denom:
    get:
      operationId: Balance
      parameters:
        - description: address is the address to query balances for.
          in: path
          name: address
          required: true
          schema:
            type: string
        - description: denom is the coin denom to query balances for.
          in: query
          name: denom
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryBalanceResponse is the response type for the
                  Query/Balance RPC method.
                properties:
                  balance:
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                    properties:
                      amount:
                        type: string
                      denom:
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Balance queries the balance of a single coin for a single account.
      tags:
        - cosmos/bank/v1beta1
  /cosmos/bank/v1beta1/denoms_metadata:
    get:
      operationId: DenomsMetadata
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryDenomsMetadataResponse is the response type for the
                  Query/DenomsMetadata RPC

                  method.
                properties:
                  metadatas:
                    description: >-
                      metadata provides the client information for all the
                      registered tokens.
                    items:
                      description: |-
                        Metadata represents a struct that describes
                        a basic token.
                      properties:
                        base:
                          description: >-
                            base represents the base denom (should be the
                            DenomUnit with exponent = 0).
                          type: string
                        denom_units:
                          items:
                            description: >-
                              DenomUnit represents a struct that describes a
                              given

                              denomination unit of the basic token.
                            properties:
                              aliases:
                                items:
                                  type: string
                                title: >-
                                  aliases is a list of string aliases for the
                                  given denom
                                type: array
                              denom:
                                description: >-
                                  denom represents the string name of the given
                                  denom unit (e.g uatom).
                                type: string
                              exponent:
                                description: >-
                                  exponent represents power of 10 exponent that
                                  one must

                                  raise the base_denom to in order to equal the
                                  given DenomUnit's denom

                                  1 denom = 1^exponent base_denom

                                  (e.g. with a base_denom of uatom, one can
                                  create a DenomUnit of 'atom' with

                                  exponent = 6, thus: 1 atom = 10^6 uatom).
                                format: int64
                                type: integer
                            type: object
                          title: >-
                            denom_units represents the list of DenomUnit's for a
                            given coin
                          type: array
                        description:
                          type: string
                        display:
                          description: |-
                            display indicates the suggested denom that should be
                            displayed in clients.
                          type: string
                        name:
                          description: 'Since: cosmos-sdk 0.43'
                          title: 'name defines the name of the token (eg: Cosmos Atom)'
                          type: string
                        symbol:
                          description: >-
                            symbol is the token symbol usually shown on
                            exchanges (eg: ATOM). This can

                            be the same as the display.


                            Since: cosmos-sdk 0.43
                          type: string
                      type: object
                    type: array
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        DenomsMetadata queries the client metadata for all registered coin
        denominations.
      tags:
        - cosmos/bank/v1beta1
  /cosmos/bank/v1beta1/denoms_metadata/{denom}:
    get:
      operationId: DenomMetadata
      parameters:
        - description: denom is the coin denom to query the metadata for.
          in: path
          name: denom
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryDenomMetadataResponse is the response type for the
                  Query/DenomMetadata RPC

                  method.
                properties:
                  metadata:
                    description: |-
                      Metadata represents a struct that describes
                      a basic token.
                    properties:
                      base:
                        description: >-
                          base represents the base denom (should be the
                          DenomUnit with exponent = 0).
                        type: string
                      denom_units:
                        items:
                          description: |-
                            DenomUnit represents a struct that describes a given
                            denomination unit of the basic token.
                          properties:
                            aliases:
                              items:
                                type: string
                              title: >-
                                aliases is a list of string aliases for the
                                given denom
                              type: array
                            denom:
                              description: >-
                                denom represents the string name of the given
                                denom unit (e.g uatom).
                              type: string
                            exponent:
                              description: >-
                                exponent represents power of 10 exponent that
                                one must

                                raise the base_denom to in order to equal the
                                given DenomUnit's denom

                                1 denom = 1^exponent base_denom

                                (e.g. with a base_denom of uatom, one can create
                                a DenomUnit of 'atom' with

                                exponent = 6, thus: 1 atom = 10^6 uatom).
                              format: int64
                              type: integer
                          type: object
                        title: >-
                          denom_units represents the list of DenomUnit's for a
                          given coin
                        type: array
                      description:
                        type: string
                      display:
                        description: |-
                          display indicates the suggested denom that should be
                          displayed in clients.
                        type: string
                      name:
                        description: 'Since: cosmos-sdk 0.43'
                        title: 'name defines the name of the token (eg: Cosmos Atom)'
                        type: string
                      symbol:
                        description: >-
                          symbol is the token symbol usually shown on exchanges
                          (eg: ATOM). This can

                          be the same as the display.


                          Since: cosmos-sdk 0.43
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: DenomsMetadata queries the client metadata of a given coin denomination.
      tags:
        - cosmos/bank/v1beta1
  /cosmos/bank/v1beta1/params:
    get:
      operationId: Params
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryParamsResponse defines the response type for querying
                  x/bank parameters.
                properties:
                  params:
                    description: Params defines the parameters for the bank module.
                    properties:
                      default_send_enabled:
                        type: boolean
                      send_enabled:
                        items:
                          description: >-
                            SendEnabled maps coin denom to a send_enabled status
                            (whether a denom is

                            sendable).
                          properties:
                            denom:
                              type: string
                            enabled:
                              type: boolean
                          type: object
                        type: array
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Params queries the parameters of x/bank module.
      tags:
        - cosmos/bank/v1beta1
  /cosmos/bank/v1beta1/spendable_balances/{address}:
    get:
      operationId: SpendableBalances
      parameters:
        - description: address is the address to query spendable balances for.
          in: path
          name: address
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QuerySpendableBalancesResponse defines the gRPC response
                  structure for querying

                  an account's spendable balances.
                properties:
                  balances:
                    description: balances is the spendable balances of all the coins.
                    items:
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    type: array
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: |-
        SpendableBalances queries the spenable balance of all coins for a single
        account.
      tags:
        - cosmos/bank/v1beta1
  /cosmos/bank/v1beta1/supply:
    get:
      operationId: TotalSupply
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  pagination:
                    description: |-
                      pagination defines the pagination in the response.

                      Since: cosmos-sdk 0.43
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                  supply:
                    items:
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    title: supply is the supply of the coins
                    type: array
                title: >-
                  QueryTotalSupplyResponse is the response type for the
                  Query/TotalSupply RPC

                  method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: TotalSupply queries the total supply of all coins.
      tags:
        - cosmos/bank/v1beta1
  /cosmos/bank/v1beta1/supply/{denom}:
    get:
      operationId: SupplyOf
      parameters:
        - description: denom is the coin denom to query balances for.
          in: path
          name: denom
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QuerySupplyOfResponse is the response type for the
                  Query/SupplyOf RPC method.
                properties:
                  amount:
                    description: >-
                      Coin defines a token with a denomination and an amount.


                      NOTE: The amount field is an Int which implements the
                      custom method

                      signatures required by gogoproto.
                    properties:
                      amount:
                        type: string
                      denom:
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: SupplyOf queries the supply of a single coin.
      tags:
        - cosmos/bank/v1beta1
  /cosmos/base/node/v1beta1/config:
    get:
      operationId: Config
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  ConfigResponse defines the response structure for the Config
                  gRPC query.
                properties:
                  minimum_gas_price:
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Config queries for the operator configuration.
      tags:
        - cosmos/base/node
  /cosmos/base/tendermint/v1beta1/blocks/latest:
    get:
      operationId: GetLatestBlock
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  GetLatestBlockResponse is the response type for the
                  Query/GetLatestBlock RPC method.
                properties:
                  block:
                    properties:
                      data:
                        properties:
                          txs:
                            description: >-
                              Txs that will be applied by state @
                              block.Height+1.

                              NOTE: not all txs here are valid.  We're just
                              agreeing on the order first.

                              This means that block.AppHash does not include
                              these txs.
                            items:
                              format: byte
                              type: string
                            type: array
                        title: >-
                          Data contains the set of transactions included in the
                          block
                        type: object
                      evidence:
                        properties:
                          evidence:
                            items:
                              properties:
                                duplicate_vote_evidence:
                                  description: >-
                                    DuplicateVoteEvidence contains evidence of a
                                    validator signed two conflicting votes.
                                  properties:
                                    timestamp:
                                      format: date-time
                                      type: string
                                    total_voting_power:
                                      format: int64
                                      type: string
                                    validator_power:
                                      format: int64
                                      type: string
                                    vote_a:
                                      description: >-
                                        Vote represents a prevote, precommit, or
                                        commit vote from validators for

                                        consensus.
                                      properties:
                                        block_id:
                                          properties:
                                            hash:
                                              format: byte
                                              type: string
                                            part_set_header:
                                              properties:
                                                hash:
                                                  format: byte
                                                  type: string
                                                total:
                                                  format: int64
                                                  type: integer
                                              title: PartsetHeader
                                              type: object
                                          title: BlockID
                                          type: object
                                        height:
                                          format: int64
                                          type: string
                                        round:
                                          format: int32
                                          type: integer
                                        signature:
                                          format: byte
                                          type: string
                                        timestamp:
                                          format: date-time
                                          type: string
                                        type:
                                          default: SIGNED_MSG_TYPE_UNKNOWN
                                          description: >-
                                            SignedMsgType is a type of signed
                                            message in the consensus.

                                             - SIGNED_MSG_TYPE_PREVOTE: Votes
                                             - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                          enum:
                                            - SIGNED_MSG_TYPE_UNKNOWN
                                            - SIGNED_MSG_TYPE_PREVOTE
                                            - SIGNED_MSG_TYPE_PRECOMMIT
                                            - SIGNED_MSG_TYPE_PROPOSAL
                                          type: string
                                        validator_address:
                                          format: byte
                                          type: string
                                        validator_index:
                                          format: int32
                                          type: integer
                                      type: object
                                    vote_b:
                                      description: >-
                                        Vote represents a prevote, precommit, or
                                        commit vote from validators for

                                        consensus.
                                      properties:
                                        block_id:
                                          properties:
                                            hash:
                                              format: byte
                                              type: string
                                            part_set_header:
                                              properties:
                                                hash:
                                                  format: byte
                                                  type: string
                                                total:
                                                  format: int64
                                                  type: integer
                                              title: PartsetHeader
                                              type: object
                                          title: BlockID
                                          type: object
                                        height:
                                          format: int64
                                          type: string
                                        round:
                                          format: int32
                                          type: integer
                                        signature:
                                          format: byte
                                          type: string
                                        timestamp:
                                          format: date-time
                                          type: string
                                        type:
                                          default: SIGNED_MSG_TYPE_UNKNOWN
                                          description: >-
                                            SignedMsgType is a type of signed
                                            message in the consensus.

                                             - SIGNED_MSG_TYPE_PREVOTE: Votes
                                             - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                          enum:
                                            - SIGNED_MSG_TYPE_UNKNOWN
                                            - SIGNED_MSG_TYPE_PREVOTE
                                            - SIGNED_MSG_TYPE_PRECOMMIT
                                            - SIGNED_MSG_TYPE_PROPOSAL
                                          type: string
                                        validator_address:
                                          format: byte
                                          type: string
                                        validator_index:
                                          format: int32
                                          type: integer
                                      type: object
                                  type: object
                                light_client_attack_evidence:
                                  description: >-
                                    LightClientAttackEvidence contains evidence
                                    of a set of validators attempting to mislead
                                    a light client.
                                  properties:
                                    byzantine_validators:
                                      items:
                                        properties:
                                          address:
                                            format: byte
                                            type: string
                                          proposer_priority:
                                            format: int64
                                            type: string
                                          pub_key:
                                            properties:
                                              ed25519:
                                                format: byte
                                                type: string
                                              secp256k1:
                                                format: byte
                                                type: string
                                            title: >-
                                              PublicKey defines the keys available for
                                              use with Validators
                                            type: object
                                          voting_power:
                                            format: int64
                                            type: string
                                        type: object
                                      type: array
                                    common_height:
                                      format: int64
                                      type: string
                                    conflicting_block:
                                      properties:
                                        signed_header:
                                          properties:
                                            commit:
                                              description: >-
                                                Commit contains the evidence that a
                                                block was committed by a set of
                                                validators.
                                              properties:
                                                block_id:
                                                  properties:
                                                    hash:
                                                      format: byte
                                                      type: string
                                                    part_set_header:
                                                      properties:
                                                        hash:
                                                          format: byte
                                                          type: string
                                                        total:
                                                          format: int64
                                                          type: integer
                                                      title: PartsetHeader
                                                      type: object
                                                  title: BlockID
                                                  type: object
                                                height:
                                                  format: int64
                                                  type: string
                                                round:
                                                  format: int32
                                                  type: integer
                                                signatures:
                                                  items:
                                                    description: >-
                                                      CommitSig is a part of the Vote included
                                                      in a Commit.
                                                    properties:
                                                      block_id_flag:
                                                        default: BLOCK_ID_FLAG_UNKNOWN
                                                        enum:
                                                          - BLOCK_ID_FLAG_UNKNOWN
                                                          - BLOCK_ID_FLAG_ABSENT
                                                          - BLOCK_ID_FLAG_COMMIT
                                                          - BLOCK_ID_FLAG_NIL
                                                        title: >-
                                                          BlockIdFlag indicates which BlcokID the
                                                          signature is for
                                                        type: string
                                                      signature:
                                                        format: byte
                                                        type: string
                                                      timestamp:
                                                        format: date-time
                                                        type: string
                                                      validator_address:
                                                        format: byte
                                                        type: string
                                                    type: object
                                                  type: array
                                              type: object
                                            header:
                                              description: >-
                                                Header defines the structure of a block
                                                header.
                                              properties:
                                                app_hash:
                                                  format: byte
                                                  type: string
                                                chain_id:
                                                  type: string
                                                consensus_hash:
                                                  format: byte
                                                  type: string
                                                data_hash:
                                                  format: byte
                                                  type: string
                                                evidence_hash:
                                                  format: byte
                                                  title: consensus info
                                                  type: string
                                                height:
                                                  format: int64
                                                  type: string
                                                last_block_id:
                                                  properties:
                                                    hash:
                                                      format: byte
                                                      type: string
                                                    part_set_header:
                                                      properties:
                                                        hash:
                                                          format: byte
                                                          type: string
                                                        total:
                                                          format: int64
                                                          type: integer
                                                      title: PartsetHeader
                                                      type: object
                                                  title: prev block info
                                                  type: object
                                                last_commit_hash:
                                                  format: byte
                                                  title: hashes of block data
                                                  type: string
                                                last_results_hash:
                                                  format: byte
                                                  type: string
                                                next_validators_hash:
                                                  format: byte
                                                  type: string
                                                proposer_address:
                                                  format: byte
                                                  type: string
                                                time:
                                                  format: date-time
                                                  type: string
                                                validators_hash:
                                                  format: byte
                                                  title: >-
                                                    hashes from the app output from the prev
                                                    block
                                                  type: string
                                                version:
                                                  description: >-
                                                    Consensus captures the consensus rules
                                                    for processing a block in the
                                                    blockchain,

                                                    including all blockchain data structures
                                                    and the rules of the application's

                                                    state transition machine.
                                                  properties:
                                                    app:
                                                      format: uint64
                                                      type: string
                                                    block:
                                                      format: uint64
                                                      type: string
                                                  title: basic block info
                                                  type: object
                                              type: object
                                          type: object
                                        validator_set:
                                          properties:
                                            proposer:
                                              properties:
                                                address:
                                                  format: byte
                                                  type: string
                                                proposer_priority:
                                                  format: int64
                                                  type: string
                                                pub_key:
                                                  properties:
                                                    ed25519:
                                                      format: byte
                                                      type: string
                                                    secp256k1:
                                                      format: byte
                                                      type: string
                                                  title: >-
                                                    PublicKey defines the keys available for
                                                    use with Validators
                                                  type: object
                                                voting_power:
                                                  format: int64
                                                  type: string
                                              type: object
                                            total_voting_power:
                                              format: int64
                                              type: string
                                            validators:
                                              items:
                                                properties:
                                                  address:
                                                    format: byte
                                                    type: string
                                                  proposer_priority:
                                                    format: int64
                                                    type: string
                                                  pub_key:
                                                    properties:
                                                      ed25519:
                                                        format: byte
                                                        type: string
                                                      secp256k1:
                                                        format: byte
                                                        type: string
                                                    title: >-
                                                      PublicKey defines the keys available for
                                                      use with Validators
                                                    type: object
                                                  voting_power:
                                                    format: int64
                                                    type: string
                                                type: object
                                              type: array
                                          type: object
                                      type: object
                                    timestamp:
                                      format: date-time
                                      type: string
                                    total_voting_power:
                                      format: int64
                                      type: string
                                  type: object
                              type: object
                            type: array
                        type: object
                      header:
                        description: Header defines the structure of a block header.
                        properties:
                          app_hash:
                            format: byte
                            type: string
                          chain_id:
                            type: string
                          consensus_hash:
                            format: byte
                            type: string
                          data_hash:
                            format: byte
                            type: string
                          evidence_hash:
                            format: byte
                            title: consensus info
                            type: string
                          height:
                            format: int64
                            type: string
                          last_block_id:
                            properties:
                              hash:
                                format: byte
                                type: string
                              part_set_header:
                                properties:
                                  hash:
                                    format: byte
                                    type: string
                                  total:
                                    format: int64
                                    type: integer
                                title: PartsetHeader
                                type: object
                            title: prev block info
                            type: object
                          last_commit_hash:
                            format: byte
                            title: hashes of block data
                            type: string
                          last_results_hash:
                            format: byte
                            type: string
                          next_validators_hash:
                            format: byte
                            type: string
                          proposer_address:
                            format: byte
                            type: string
                          time:
                            format: date-time
                            type: string
                          validators_hash:
                            format: byte
                            title: hashes from the app output from the prev block
                            type: string
                          version:
                            description: >-
                              Consensus captures the consensus rules for
                              processing a block in the blockchain,

                              including all blockchain data structures and the
                              rules of the application's

                              state transition machine.
                            properties:
                              app:
                                format: uint64
                                type: string
                              block:
                                format: uint64
                                type: string
                            title: basic block info
                            type: object
                        type: object
                      last_commit:
                        description: >-
                          Commit contains the evidence that a block was
                          committed by a set of validators.
                        properties:
                          block_id:
                            properties:
                              hash:
                                format: byte
                                type: string
                              part_set_header:
                                properties:
                                  hash:
                                    format: byte
                                    type: string
                                  total:
                                    format: int64
                                    type: integer
                                title: PartsetHeader
                                type: object
                            title: BlockID
                            type: object
                          height:
                            format: int64
                            type: string
                          round:
                            format: int32
                            type: integer
                          signatures:
                            items:
                              description: >-
                                CommitSig is a part of the Vote included in a
                                Commit.
                              properties:
                                block_id_flag:
                                  default: BLOCK_ID_FLAG_UNKNOWN
                                  enum:
                                    - BLOCK_ID_FLAG_UNKNOWN
                                    - BLOCK_ID_FLAG_ABSENT
                                    - BLOCK_ID_FLAG_COMMIT
                                    - BLOCK_ID_FLAG_NIL
                                  title: >-
                                    BlockIdFlag indicates which BlcokID the
                                    signature is for
                                  type: string
                                signature:
                                  format: byte
                                  type: string
                                timestamp:
                                  format: date-time
                                  type: string
                                validator_address:
                                  format: byte
                                  type: string
                              type: object
                            type: array
                        type: object
                    type: object
                  block_id:
                    properties:
                      hash:
                        format: byte
                        type: string
                      part_set_header:
                        properties:
                          hash:
                            format: byte
                            type: string
                          total:
                            format: int64
                            type: integer
                        title: PartsetHeader
                        type: object
                    title: BlockID
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: GetLatestBlock returns the latest block.
      tags:
        - cosmos/base/tendermint
  /cosmos/base/tendermint/v1beta1/blocks/{height}:
    get:
      operationId: GetBlockByHeight
      parameters:
        - in: path
          name: height
          required: true
          schema:
            format: int64
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  GetBlockByHeightResponse is the response type for the
                  Query/GetBlockByHeight RPC method.
                properties:
                  block:
                    properties:
                      data:
                        properties:
                          txs:
                            description: >-
                              Txs that will be applied by state @
                              block.Height+1.

                              NOTE: not all txs here are valid.  We're just
                              agreeing on the order first.

                              This means that block.AppHash does not include
                              these txs.
                            items:
                              format: byte
                              type: string
                            type: array
                        title: >-
                          Data contains the set of transactions included in the
                          block
                        type: object
                      evidence:
                        properties:
                          evidence:
                            items:
                              properties:
                                duplicate_vote_evidence:
                                  description: >-
                                    DuplicateVoteEvidence contains evidence of a
                                    validator signed two conflicting votes.
                                  properties:
                                    timestamp:
                                      format: date-time
                                      type: string
                                    total_voting_power:
                                      format: int64
                                      type: string
                                    validator_power:
                                      format: int64
                                      type: string
                                    vote_a:
                                      description: >-
                                        Vote represents a prevote, precommit, or
                                        commit vote from validators for

                                        consensus.
                                      properties:
                                        block_id:
                                          properties:
                                            hash:
                                              format: byte
                                              type: string
                                            part_set_header:
                                              properties:
                                                hash:
                                                  format: byte
                                                  type: string
                                                total:
                                                  format: int64
                                                  type: integer
                                              title: PartsetHeader
                                              type: object
                                          title: BlockID
                                          type: object
                                        height:
                                          format: int64
                                          type: string
                                        round:
                                          format: int32
                                          type: integer
                                        signature:
                                          format: byte
                                          type: string
                                        timestamp:
                                          format: date-time
                                          type: string
                                        type:
                                          default: SIGNED_MSG_TYPE_UNKNOWN
                                          description: >-
                                            SignedMsgType is a type of signed
                                            message in the consensus.

                                             - SIGNED_MSG_TYPE_PREVOTE: Votes
                                             - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                          enum:
                                            - SIGNED_MSG_TYPE_UNKNOWN
                                            - SIGNED_MSG_TYPE_PREVOTE
                                            - SIGNED_MSG_TYPE_PRECOMMIT
                                            - SIGNED_MSG_TYPE_PROPOSAL
                                          type: string
                                        validator_address:
                                          format: byte
                                          type: string
                                        validator_index:
                                          format: int32
                                          type: integer
                                      type: object
                                    vote_b:
                                      description: >-
                                        Vote represents a prevote, precommit, or
                                        commit vote from validators for

                                        consensus.
                                      properties:
                                        block_id:
                                          properties:
                                            hash:
                                              format: byte
                                              type: string
                                            part_set_header:
                                              properties:
                                                hash:
                                                  format: byte
                                                  type: string
                                                total:
                                                  format: int64
                                                  type: integer
                                              title: PartsetHeader
                                              type: object
                                          title: BlockID
                                          type: object
                                        height:
                                          format: int64
                                          type: string
                                        round:
                                          format: int32
                                          type: integer
                                        signature:
                                          format: byte
                                          type: string
                                        timestamp:
                                          format: date-time
                                          type: string
                                        type:
                                          default: SIGNED_MSG_TYPE_UNKNOWN
                                          description: >-
                                            SignedMsgType is a type of signed
                                            message in the consensus.

                                             - SIGNED_MSG_TYPE_PREVOTE: Votes
                                             - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                          enum:
                                            - SIGNED_MSG_TYPE_UNKNOWN
                                            - SIGNED_MSG_TYPE_PREVOTE
                                            - SIGNED_MSG_TYPE_PRECOMMIT
                                            - SIGNED_MSG_TYPE_PROPOSAL
                                          type: string
                                        validator_address:
                                          format: byte
                                          type: string
                                        validator_index:
                                          format: int32
                                          type: integer
                                      type: object
                                  type: object
                                light_client_attack_evidence:
                                  description: >-
                                    LightClientAttackEvidence contains evidence
                                    of a set of validators attempting to mislead
                                    a light client.
                                  properties:
                                    byzantine_validators:
                                      items:
                                        properties:
                                          address:
                                            format: byte
                                            type: string
                                          proposer_priority:
                                            format: int64
                                            type: string
                                          pub_key:
                                            properties:
                                              ed25519:
                                                format: byte
                                                type: string
                                              secp256k1:
                                                format: byte
                                                type: string
                                            title: >-
                                              PublicKey defines the keys available for
                                              use with Validators
                                            type: object
                                          voting_power:
                                            format: int64
                                            type: string
                                        type: object
                                      type: array
                                    common_height:
                                      format: int64
                                      type: string
                                    conflicting_block:
                                      properties:
                                        signed_header:
                                          properties:
                                            commit:
                                              description: >-
                                                Commit contains the evidence that a
                                                block was committed by a set of
                                                validators.
                                              properties:
                                                block_id:
                                                  properties:
                                                    hash:
                                                      format: byte
                                                      type: string
                                                    part_set_header:
                                                      properties:
                                                        hash:
                                                          format: byte
                                                          type: string
                                                        total:
                                                          format: int64
                                                          type: integer
                                                      title: PartsetHeader
                                                      type: object
                                                  title: BlockID
                                                  type: object
                                                height:
                                                  format: int64
                                                  type: string
                                                round:
                                                  format: int32
                                                  type: integer
                                                signatures:
                                                  items:
                                                    description: >-
                                                      CommitSig is a part of the Vote included
                                                      in a Commit.
                                                    properties:
                                                      block_id_flag:
                                                        default: BLOCK_ID_FLAG_UNKNOWN
                                                        enum:
                                                          - BLOCK_ID_FLAG_UNKNOWN
                                                          - BLOCK_ID_FLAG_ABSENT
                                                          - BLOCK_ID_FLAG_COMMIT
                                                          - BLOCK_ID_FLAG_NIL
                                                        title: >-
                                                          BlockIdFlag indicates which BlcokID the
                                                          signature is for
                                                        type: string
                                                      signature:
                                                        format: byte
                                                        type: string
                                                      timestamp:
                                                        format: date-time
                                                        type: string
                                                      validator_address:
                                                        format: byte
                                                        type: string
                                                    type: object
                                                  type: array
                                              type: object
                                            header:
                                              description: >-
                                                Header defines the structure of a block
                                                header.
                                              properties:
                                                app_hash:
                                                  format: byte
                                                  type: string
                                                chain_id:
                                                  type: string
                                                consensus_hash:
                                                  format: byte
                                                  type: string
                                                data_hash:
                                                  format: byte
                                                  type: string
                                                evidence_hash:
                                                  format: byte
                                                  title: consensus info
                                                  type: string
                                                height:
                                                  format: int64
                                                  type: string
                                                last_block_id:
                                                  properties:
                                                    hash:
                                                      format: byte
                                                      type: string
                                                    part_set_header:
                                                      properties:
                                                        hash:
                                                          format: byte
                                                          type: string
                                                        total:
                                                          format: int64
                                                          type: integer
                                                      title: PartsetHeader
                                                      type: object
                                                  title: prev block info
                                                  type: object
                                                last_commit_hash:
                                                  format: byte
                                                  title: hashes of block data
                                                  type: string
                                                last_results_hash:
                                                  format: byte
                                                  type: string
                                                next_validators_hash:
                                                  format: byte
                                                  type: string
                                                proposer_address:
                                                  format: byte
                                                  type: string
                                                time:
                                                  format: date-time
                                                  type: string
                                                validators_hash:
                                                  format: byte
                                                  title: >-
                                                    hashes from the app output from the prev
                                                    block
                                                  type: string
                                                version:
                                                  description: >-
                                                    Consensus captures the consensus rules
                                                    for processing a block in the
                                                    blockchain,

                                                    including all blockchain data structures
                                                    and the rules of the application's

                                                    state transition machine.
                                                  properties:
                                                    app:
                                                      format: uint64
                                                      type: string
                                                    block:
                                                      format: uint64
                                                      type: string
                                                  title: basic block info
                                                  type: object
                                              type: object
                                          type: object
                                        validator_set:
                                          properties:
                                            proposer:
                                              properties:
                                                address:
                                                  format: byte
                                                  type: string
                                                proposer_priority:
                                                  format: int64
                                                  type: string
                                                pub_key:
                                                  properties:
                                                    ed25519:
                                                      format: byte
                                                      type: string
                                                    secp256k1:
                                                      format: byte
                                                      type: string
                                                  title: >-
                                                    PublicKey defines the keys available for
                                                    use with Validators
                                                  type: object
                                                voting_power:
                                                  format: int64
                                                  type: string
                                              type: object
                                            total_voting_power:
                                              format: int64
                                              type: string
                                            validators:
                                              items:
                                                properties:
                                                  address:
                                                    format: byte
                                                    type: string
                                                  proposer_priority:
                                                    format: int64
                                                    type: string
                                                  pub_key:
                                                    properties:
                                                      ed25519:
                                                        format: byte
                                                        type: string
                                                      secp256k1:
                                                        format: byte
                                                        type: string
                                                    title: >-
                                                      PublicKey defines the keys available for
                                                      use with Validators
                                                    type: object
                                                  voting_power:
                                                    format: int64
                                                    type: string
                                                type: object
                                              type: array
                                          type: object
                                      type: object
                                    timestamp:
                                      format: date-time
                                      type: string
                                    total_voting_power:
                                      format: int64
                                      type: string
                                  type: object
                              type: object
                            type: array
                        type: object
                      header:
                        description: Header defines the structure of a block header.
                        properties:
                          app_hash:
                            format: byte
                            type: string
                          chain_id:
                            type: string
                          consensus_hash:
                            format: byte
                            type: string
                          data_hash:
                            format: byte
                            type: string
                          evidence_hash:
                            format: byte
                            title: consensus info
                            type: string
                          height:
                            format: int64
                            type: string
                          last_block_id:
                            properties:
                              hash:
                                format: byte
                                type: string
                              part_set_header:
                                properties:
                                  hash:
                                    format: byte
                                    type: string
                                  total:
                                    format: int64
                                    type: integer
                                title: PartsetHeader
                                type: object
                            title: prev block info
                            type: object
                          last_commit_hash:
                            format: byte
                            title: hashes of block data
                            type: string
                          last_results_hash:
                            format: byte
                            type: string
                          next_validators_hash:
                            format: byte
                            type: string
                          proposer_address:
                            format: byte
                            type: string
                          time:
                            format: date-time
                            type: string
                          validators_hash:
                            format: byte
                            title: hashes from the app output from the prev block
                            type: string
                          version:
                            description: >-
                              Consensus captures the consensus rules for
                              processing a block in the blockchain,

                              including all blockchain data structures and the
                              rules of the application's

                              state transition machine.
                            properties:
                              app:
                                format: uint64
                                type: string
                              block:
                                format: uint64
                                type: string
                            title: basic block info
                            type: object
                        type: object
                      last_commit:
                        description: >-
                          Commit contains the evidence that a block was
                          committed by a set of validators.
                        properties:
                          block_id:
                            properties:
                              hash:
                                format: byte
                                type: string
                              part_set_header:
                                properties:
                                  hash:
                                    format: byte
                                    type: string
                                  total:
                                    format: int64
                                    type: integer
                                title: PartsetHeader
                                type: object
                            title: BlockID
                            type: object
                          height:
                            format: int64
                            type: string
                          round:
                            format: int32
                            type: integer
                          signatures:
                            items:
                              description: >-
                                CommitSig is a part of the Vote included in a
                                Commit.
                              properties:
                                block_id_flag:
                                  default: BLOCK_ID_FLAG_UNKNOWN
                                  enum:
                                    - BLOCK_ID_FLAG_UNKNOWN
                                    - BLOCK_ID_FLAG_ABSENT
                                    - BLOCK_ID_FLAG_COMMIT
                                    - BLOCK_ID_FLAG_NIL
                                  title: >-
                                    BlockIdFlag indicates which BlcokID the
                                    signature is for
                                  type: string
                                signature:
                                  format: byte
                                  type: string
                                timestamp:
                                  format: date-time
                                  type: string
                                validator_address:
                                  format: byte
                                  type: string
                              type: object
                            type: array
                        type: object
                    type: object
                  block_id:
                    properties:
                      hash:
                        format: byte
                        type: string
                      part_set_header:
                        properties:
                          hash:
                            format: byte
                            type: string
                          total:
                            format: int64
                            type: integer
                        title: PartsetHeader
                        type: object
                    title: BlockID
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: GetBlockByHeight queries block for given height.
      tags:
        - cosmos/base/tendermint
  /cosmos/base/tendermint/v1beta1/node_info:
    get:
      operationId: GetNodeInfo
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  GetNodeInfoResponse is the request type for the
                  Query/GetNodeInfo RPC method.
                properties:
                  application_version:
                    description: >-
                      VersionInfo is the type for the GetNodeInfoResponse
                      message.
                    properties:
                      app_name:
                        type: string
                      build_deps:
                        items:
                          properties:
                            path:
                              title: module path
                              type: string
                            sum:
                              title: checksum
                              type: string
                            version:
                              title: module version
                              type: string
                          title: Module is the type for VersionInfo
                          type: object
                        type: array
                      build_tags:
                        type: string
                      cosmos_sdk_version:
                        title: 'Since: cosmos-sdk 0.43'
                        type: string
                      git_commit:
                        type: string
                      go_version:
                        type: string
                      name:
                        type: string
                      version:
                        type: string
                    type: object
                  default_node_info:
                    properties:
                      channels:
                        format: byte
                        type: string
                      default_node_id:
                        type: string
                      listen_addr:
                        type: string
                      moniker:
                        type: string
                      network:
                        type: string
                      other:
                        properties:
                          rpc_address:
                            type: string
                          tx_index:
                            type: string
                        type: object
                      protocol_version:
                        properties:
                          app:
                            format: uint64
                            type: string
                          block:
                            format: uint64
                            type: string
                          p2p:
                            format: uint64
                            type: string
                        type: object
                      version:
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: GetNodeInfo queries the current node info.
      tags:
        - cosmos/base/tendermint
  /cosmos/base/tendermint/v1beta1/syncing:
    get:
      operationId: GetSyncing
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  GetSyncingResponse is the response type for the
                  Query/GetSyncing RPC method.
                properties:
                  syncing:
                    type: boolean
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: GetSyncing queries node syncing.
      tags:
        - cosmos/base/tendermint
  /cosmos/base/tendermint/v1beta1/validatorsets/latest:
    get:
      operationId: GetLatestValidatorSet
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  GetLatestValidatorSetResponse is the response type for the
                  Query/GetValidatorSetByHeight RPC method.
                properties:
                  block_height:
                    format: int64
                    type: string
                  pagination:
                    description: pagination defines an pagination for the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                  validators:
                    items:
                      description: Validator is the type for the validator-set.
                      properties:
                        address:
                          type: string
                        proposer_priority:
                          format: int64
                          type: string
                        pub_key:
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized
                            message.


                            Protobuf library provides support to pack/unpack Any
                            values in the form

                            of utility functions or additional generated methods
                            of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := anypb.New(foo)
                                 if err != nil {
                                   ...
                                 }
                                 ...
                                 foo := &pb.Foo{}
                                 if err := any.UnmarshalTo(foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will
                            by default use

                            'type.googleapis.com/full.type.name' as the type URL
                            and the unpack

                            methods only use the fully qualified type name after
                            the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z"
                            will yield type

                            name "y.z".



                            JSON

                            ====

                            The JSON representation of an `Any` value uses the
                            regular

                            representation of the deserialized, embedded
                            message, with an

                            additional field `@type` which contains the type
                            URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a
                            custom JSON

                            representation, that representation will be embedded
                            adding a field

                            `value` which holds the custom JSON in addition to
                            the `@type`

                            field. Example (for message
                            [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                          properties:
                            type_url:
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must
                                contain at least

                                one "/" character. The last segment of the URL's
                                path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name
                                should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the
                                binary all types that they

                                expect it to use in the context of Any. However,
                                for URLs which use the

                                scheme `http`, `https`, or no scheme, one can
                                optionally set up a type

                                server that maps type URLs to message
                                definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a
                                [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup
                                results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently
                                available in the official

                                protobuf release, and it is not used for type
                                URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty
                                scheme) might be

                                used with implementation specific semantics.
                              type: string
                            value:
                              description: >-
                                Must be a valid serialized protocol buffer of
                                the above specified type.
                              format: byte
                              type: string
                          type: object
                        voting_power:
                          format: int64
                          type: string
                      type: object
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: GetLatestValidatorSet queries latest validator-set.
      tags:
        - cosmos/base/tendermint
  /cosmos/base/tendermint/v1beta1/validatorsets/{height}:
    get:
      operationId: GetValidatorSetByHeight
      parameters:
        - in: path
          name: height
          required: true
          schema:
            format: int64
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  GetValidatorSetByHeightResponse is the response type for the
                  Query/GetValidatorSetByHeight RPC method.
                properties:
                  block_height:
                    format: int64
                    type: string
                  pagination:
                    description: pagination defines an pagination for the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                  validators:
                    items:
                      description: Validator is the type for the validator-set.
                      properties:
                        address:
                          type: string
                        proposer_priority:
                          format: int64
                          type: string
                        pub_key:
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized
                            message.


                            Protobuf library provides support to pack/unpack Any
                            values in the form

                            of utility functions or additional generated methods
                            of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := anypb.New(foo)
                                 if err != nil {
                                   ...
                                 }
                                 ...
                                 foo := &pb.Foo{}
                                 if err := any.UnmarshalTo(foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will
                            by default use

                            'type.googleapis.com/full.type.name' as the type URL
                            and the unpack

                            methods only use the fully qualified type name after
                            the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z"
                            will yield type

                            name "y.z".



                            JSON

                            ====

                            The JSON representation of an `Any` value uses the
                            regular

                            representation of the deserialized, embedded
                            message, with an

                            additional field `@type` which contains the type
                            URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a
                            custom JSON

                            representation, that representation will be embedded
                            adding a field

                            `value` which holds the custom JSON in addition to
                            the `@type`

                            field. Example (for message
                            [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                          properties:
                            type_url:
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must
                                contain at least

                                one "/" character. The last segment of the URL's
                                path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name
                                should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the
                                binary all types that they

                                expect it to use in the context of Any. However,
                                for URLs which use the

                                scheme `http`, `https`, or no scheme, one can
                                optionally set up a type

                                server that maps type URLs to message
                                definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a
                                [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup
                                results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently
                                available in the official

                                protobuf release, and it is not used for type
                                URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty
                                scheme) might be

                                used with implementation specific semantics.
                              type: string
                            value:
                              description: >-
                                Must be a valid serialized protocol buffer of
                                the above specified type.
                              format: byte
                              type: string
                          type: object
                        voting_power:
                          format: int64
                          type: string
                      type: object
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: GetValidatorSetByHeight queries validator-set at a given height.
      tags:
        - cosmos/base/tendermint
  /cosmos/distribution/v1beta1/community_pool:
    get:
      operationId: CommunityPool
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryCommunityPoolResponse is the response type for the
                  Query/CommunityPool

                  RPC method.
                properties:
                  pool:
                    description: pool defines community pool's coins.
                    items:
                      description: >-
                        DecCoin defines a token with a denomination and a
                        decimal amount.


                        NOTE: The amount field is an Dec which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: CommunityPool queries the community pool coins.
      tags:
        - cosmos/distribution/v1beta1
  /cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards:
    get:
      operationId: DelegationTotalRewards
      parameters:
        - description: delegator_address defines the delegator address to query for.
          in: path
          name: delegator_address
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryDelegationTotalRewardsResponse is the response type for
                  the

                  Query/DelegationTotalRewards RPC method.
                properties:
                  rewards:
                    description: rewards defines all the rewards accrued by a delegator.
                    items:
                      description: |-
                        DelegationDelegatorReward represents the properties
                        of a delegator's delegation reward.
                      properties:
                        reward:
                          items:
                            description: >-
                              DecCoin defines a token with a denomination and a
                              decimal amount.


                              NOTE: The amount field is an Dec which implements
                              the custom method

                              signatures required by gogoproto.
                            properties:
                              amount:
                                type: string
                              denom:
                                type: string
                            type: object
                          type: array
                        validator_address:
                          type: string
                      type: object
                    type: array
                  total:
                    description: total defines the sum of all the rewards.
                    items:
                      description: >-
                        DecCoin defines a token with a denomination and a
                        decimal amount.


                        NOTE: The amount field is an Dec which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: |-
        DelegationTotalRewards queries the total rewards accrued by a each
        validator.
      tags:
        - cosmos/distribution/v1beta1
  /cosmos/distribution/v1beta1/delegators/{delegator_address}/rewards/{validator_address}:
    get:
      operationId: DelegationRewards
      parameters:
        - description: delegator_address defines the delegator address to query for.
          in: path
          name: delegator_address
          required: true
          schema:
            type: string
        - description: validator_address defines the validator address to query for.
          in: path
          name: validator_address
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: |-
                  QueryDelegationRewardsResponse is the response type for the
                  Query/DelegationRewards RPC method.
                properties:
                  rewards:
                    description: rewards defines the rewards accrued by a delegation.
                    items:
                      description: >-
                        DecCoin defines a token with a denomination and a
                        decimal amount.


                        NOTE: The amount field is an Dec which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: DelegationRewards queries the total rewards accrued by a delegation.
      tags:
        - cosmos/distribution/v1beta1
  /cosmos/distribution/v1beta1/delegators/{delegator_address}/validators:
    get:
      operationId: DelegatorValidators
      parameters:
        - description: delegator_address defines the delegator address to query for.
          in: path
          name: delegator_address
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: |-
                  QueryDelegatorValidatorsResponse is the response type for the
                  Query/DelegatorValidators RPC method.
                properties:
                  validators:
                    description: >-
                      validators defines the validators a delegator is
                      delegating for.
                    items:
                      type: string
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: DelegatorValidators queries the validators of a delegator.
      tags:
        - cosmos/distribution/v1beta1
  /cosmos/distribution/v1beta1/delegators/{delegator_address}/withdraw_address:
    get:
      operationId: DelegatorWithdrawAddress
      parameters:
        - description: delegator_address defines the delegator address to query for.
          in: path
          name: delegator_address
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryDelegatorWithdrawAddressResponse is the response type for
                  the

                  Query/DelegatorWithdrawAddress RPC method.
                properties:
                  withdraw_address:
                    description: >-
                      withdraw_address defines the delegator address to query
                      for.
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: DelegatorWithdrawAddress queries withdraw address of a delegator.
      tags:
        - cosmos/distribution/v1beta1
  /cosmos/distribution/v1beta1/params:
    get:
      operationId: Params
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryParamsResponse is the response type for the Query/Params
                  RPC method.
                properties:
                  params:
                    description: params defines the parameters of the module.
                    properties:
                      base_proposer_reward:
                        type: string
                      bonus_proposer_reward:
                        type: string
                      community_tax:
                        type: string
                      withdraw_addr_enabled:
                        type: boolean
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Params queries params of the distribution module.
      tags:
        - cosmos/distribution/v1beta1
  /cosmos/distribution/v1beta1/validators/{validator_address}/commission:
    get:
      operationId: ValidatorCommission
      parameters:
        - description: validator_address defines the validator address to query for.
          in: path
          name: validator_address
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  commission:
                    description: commission defines the commision the validator received.
                    properties:
                      commission:
                        items:
                          description: >-
                            DecCoin defines a token with a denomination and a
                            decimal amount.


                            NOTE: The amount field is an Dec which implements
                            the custom method

                            signatures required by gogoproto.
                          properties:
                            amount:
                              type: string
                            denom:
                              type: string
                          type: object
                        type: array
                    type: object
                title: |-
                  QueryValidatorCommissionResponse is the response type for the
                  Query/ValidatorCommission RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: ValidatorCommission queries accumulated commission for a validator.
      tags:
        - cosmos/distribution/v1beta1
  /cosmos/distribution/v1beta1/validators/{validator_address}/outstanding_rewards:
    get:
      operationId: ValidatorOutstandingRewards
      parameters:
        - description: validator_address defines the validator address to query for.
          in: path
          name: validator_address
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryValidatorOutstandingRewardsResponse is the response type
                  for the

                  Query/ValidatorOutstandingRewards RPC method.
                properties:
                  rewards:
                    description: >-
                      ValidatorOutstandingRewards represents outstanding
                      (un-withdrawn) rewards

                      for a validator inexpensive to track, allows simple sanity
                      checks.
                    properties:
                      rewards:
                        items:
                          description: >-
                            DecCoin defines a token with a denomination and a
                            decimal amount.


                            NOTE: The amount field is an Dec which implements
                            the custom method

                            signatures required by gogoproto.
                          properties:
                            amount:
                              type: string
                            denom:
                              type: string
                          type: object
                        type: array
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: ValidatorOutstandingRewards queries rewards of a validator address.
      tags:
        - cosmos/distribution/v1beta1
  /cosmos/distribution/v1beta1/validators/{validator_address}/slashes:
    get:
      operationId: ValidatorSlashes
      parameters:
        - description: validator_address defines the validator address to query for.
          in: path
          name: validator_address
          required: true
          schema:
            type: string
        - description: >-
            starting_height defines the optional starting height to query the
            slashes.
          in: query
          name: starting_height
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            starting_height defines the optional ending height to query the
            slashes.
          in: query
          name: ending_height
          required: false
          schema:
            format: uint64
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: |-
                  QueryValidatorSlashesResponse is the response type for the
                  Query/ValidatorSlashes RPC method.
                properties:
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                  slashes:
                    description: slashes defines the slashes the validator received.
                    items:
                      description: >-
                        ValidatorSlashEvent represents a validator slash event.

                        Height is implicit within the store key.

                        This is needed to calculate appropriate amount of
                        staking tokens

                        for delegations which are withdrawn after a slash has
                        occurred.
                      properties:
                        fraction:
                          type: string
                        validator_period:
                          format: uint64
                          type: string
                      type: object
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: ValidatorSlashes queries slash events of a validator.
      tags:
        - cosmos/distribution/v1beta1
  /cosmos/evidence/v1beta1/evidence:
    get:
      operationId: AllEvidence
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryAllEvidenceResponse is the response type for the
                  Query/AllEvidence RPC

                  method.
                properties:
                  evidence:
                    description: evidence returns all evidences.
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: AllEvidence queries all evidence.
      tags:
        - cosmos/evidence/v1beta1
  /cosmos/evidence/v1beta1/evidence/{evidence_hash}:
    get:
      operationId: Evidence
      parameters:
        - description: evidence_hash defines the hash of the requested evidence.
          in: path
          name: evidence_hash
          required: true
          schema:
            format: byte
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryEvidenceResponse is the response type for the
                  Query/Evidence RPC method.
                properties:
                  evidence:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Evidence queries evidence based on evidence hash.
      tags:
        - cosmos/evidence/v1beta1
  /cosmos/feegrant/v1beta1/allowance/{granter}/{grantee}:
    get:
      operationId: Allowance
      parameters:
        - description: >-
            granter is the address of the user granting an allowance of their
            funds.
          in: path
          name: granter
          required: true
          schema:
            type: string
        - description: >-
            grantee is the address of the user being granted an allowance of
            another user's funds.
          in: path
          name: grantee
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryAllowanceResponse is the response type for the
                  Query/Allowance RPC method.
                properties:
                  allowance:
                    description: allowance is a allowance granted for grantee by granter.
                    properties:
                      allowance:
                        description: >-
                          `Any` contains an arbitrary serialized protocol buffer
                          message along with a

                          URL that describes the type of the serialized message.


                          Protobuf library provides support to pack/unpack Any
                          values in the form

                          of utility functions or additional generated methods
                          of the Any type.


                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }

                           Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                           Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := anypb.New(foo)
                               if err != nil {
                                 ...
                               }
                               ...
                               foo := &pb.Foo{}
                               if err := any.UnmarshalTo(foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by
                          default use

                          'type.googleapis.com/full.type.name' as the type URL
                          and the unpack

                          methods only use the fully qualified type name after
                          the last '/'

                          in the type URL, for example "foo.bar.com/x/y.z" will
                          yield type

                          name "y.z".



                          JSON

                          ====

                          The JSON representation of an `Any` value uses the
                          regular

                          representation of the deserialized, embedded message,
                          with an

                          additional field `@type` which contains the type URL.
                          Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a
                          custom JSON

                          representation, that representation will be embedded
                          adding a field

                          `value` which holds the custom JSON in addition to the
                          `@type`

                          field. Example (for message
                          [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                        properties:
                          type_url:
                            description: >-
                              A URL/resource name that uniquely identifies the
                              type of the serialized

                              protocol buffer message. This string must contain
                              at least

                              one "/" character. The last segment of the URL's
                              path must represent

                              the fully qualified name of the type (as in

                              `path/google.protobuf.Duration`). The name should
                              be in a canonical form

                              (e.g., leading "." is not accepted).


                              In practice, teams usually precompile into the
                              binary all types that they

                              expect it to use in the context of Any. However,
                              for URLs which use the

                              scheme `http`, `https`, or no scheme, one can
                              optionally set up a type

                              server that maps type URLs to message definitions
                              as follows:


                              * If no scheme is provided, `https` is assumed.

                              * An HTTP GET on the URL must yield a
                              [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results
                              based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently
                              available in the official

                              protobuf release, and it is not used for type URLs
                              beginning with

                              type.googleapis.com.


                              Schemes other than `http`, `https` (or the empty
                              scheme) might be

                              used with implementation specific semantics.
                            type: string
                          value:
                            description: >-
                              Must be a valid serialized protocol buffer of the
                              above specified type.
                            format: byte
                            type: string
                        type: object
                      grantee:
                        description: >-
                          grantee is the address of the user being granted an
                          allowance of another user's funds.
                        type: string
                      granter:
                        description: >-
                          granter is the address of the user granting an
                          allowance of their funds.
                        type: string
                    title: >-
                      Grant is stored in the KVStore to record a grant with full
                      context
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Allowance returns fee granted to the grantee by the granter.
      tags:
        - cosmos/feegrant/v1beta1
  /cosmos/feegrant/v1beta1/allowances/{grantee}:
    get:
      operationId: Allowances
      parameters:
        - in: path
          name: grantee
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryAllowancesResponse is the response type for the
                  Query/Allowances RPC method.
                properties:
                  allowances:
                    description: allowances are allowance's granted for grantee by granter.
                    items:
                      properties:
                        allowance:
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized
                            message.


                            Protobuf library provides support to pack/unpack Any
                            values in the form

                            of utility functions or additional generated methods
                            of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := anypb.New(foo)
                                 if err != nil {
                                   ...
                                 }
                                 ...
                                 foo := &pb.Foo{}
                                 if err := any.UnmarshalTo(foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will
                            by default use

                            'type.googleapis.com/full.type.name' as the type URL
                            and the unpack

                            methods only use the fully qualified type name after
                            the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z"
                            will yield type

                            name "y.z".



                            JSON

                            ====

                            The JSON representation of an `Any` value uses the
                            regular

                            representation of the deserialized, embedded
                            message, with an

                            additional field `@type` which contains the type
                            URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a
                            custom JSON

                            representation, that representation will be embedded
                            adding a field

                            `value` which holds the custom JSON in addition to
                            the `@type`

                            field. Example (for message
                            [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                          properties:
                            type_url:
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must
                                contain at least

                                one "/" character. The last segment of the URL's
                                path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name
                                should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the
                                binary all types that they

                                expect it to use in the context of Any. However,
                                for URLs which use the

                                scheme `http`, `https`, or no scheme, one can
                                optionally set up a type

                                server that maps type URLs to message
                                definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a
                                [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup
                                results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently
                                available in the official

                                protobuf release, and it is not used for type
                                URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty
                                scheme) might be

                                used with implementation specific semantics.
                              type: string
                            value:
                              description: >-
                                Must be a valid serialized protocol buffer of
                                the above specified type.
                              format: byte
                              type: string
                          type: object
                        grantee:
                          description: >-
                            grantee is the address of the user being granted an
                            allowance of another user's funds.
                          type: string
                        granter:
                          description: >-
                            granter is the address of the user granting an
                            allowance of their funds.
                          type: string
                      title: >-
                        Grant is stored in the KVStore to record a grant with
                        full context
                      type: object
                    type: array
                  pagination:
                    description: pagination defines an pagination for the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Allowances returns all the grants for address.
      tags:
        - cosmos/feegrant/v1beta1
  /cosmos/feegrant/v1beta1/issued/{granter}:
    get:
      operationId: AllowancesByGranter
      parameters:
        - in: path
          name: granter
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryAllowancesByGranterResponse is the response type for the
                  Query/AllowancesByGranter RPC method.
                properties:
                  allowances:
                    description: allowances that have been issued by the granter.
                    items:
                      properties:
                        allowance:
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized
                            message.


                            Protobuf library provides support to pack/unpack Any
                            values in the form

                            of utility functions or additional generated methods
                            of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := anypb.New(foo)
                                 if err != nil {
                                   ...
                                 }
                                 ...
                                 foo := &pb.Foo{}
                                 if err := any.UnmarshalTo(foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will
                            by default use

                            'type.googleapis.com/full.type.name' as the type URL
                            and the unpack

                            methods only use the fully qualified type name after
                            the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z"
                            will yield type

                            name "y.z".



                            JSON

                            ====

                            The JSON representation of an `Any` value uses the
                            regular

                            representation of the deserialized, embedded
                            message, with an

                            additional field `@type` which contains the type
                            URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a
                            custom JSON

                            representation, that representation will be embedded
                            adding a field

                            `value` which holds the custom JSON in addition to
                            the `@type`

                            field. Example (for message
                            [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                          properties:
                            type_url:
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must
                                contain at least

                                one "/" character. The last segment of the URL's
                                path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name
                                should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the
                                binary all types that they

                                expect it to use in the context of Any. However,
                                for URLs which use the

                                scheme `http`, `https`, or no scheme, one can
                                optionally set up a type

                                server that maps type URLs to message
                                definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a
                                [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup
                                results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently
                                available in the official

                                protobuf release, and it is not used for type
                                URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty
                                scheme) might be

                                used with implementation specific semantics.
                              type: string
                            value:
                              description: >-
                                Must be a valid serialized protocol buffer of
                                the above specified type.
                              format: byte
                              type: string
                          type: object
                        grantee:
                          description: >-
                            grantee is the address of the user being granted an
                            allowance of another user's funds.
                          type: string
                        granter:
                          description: >-
                            granter is the address of the user granting an
                            allowance of their funds.
                          type: string
                      title: >-
                        Grant is stored in the KVStore to record a grant with
                        full context
                      type: object
                    type: array
                  pagination:
                    description: pagination defines an pagination for the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: |-
        AllowancesByGranter returns all the grants given by an address
        Since v0.46
      tags:
        - cosmos/feegrant/v1beta1
  /cosmos/gov/v1beta1/params/{params_type}:
    get:
      operationId: Params
      parameters:
        - description: >-
            params_type defines which parameters to query for, can be one of
            "voting",

            "tallying" or "deposit".
          in: path
          name: params_type
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryParamsResponse is the response type for the Query/Params
                  RPC method.
                properties:
                  deposit_params:
                    description: deposit_params defines the parameters related to deposit.
                    properties:
                      max_deposit_period:
                        description: >-
                          Maximum period for Atom holders to deposit on a
                          proposal. Initial value: 2
                           months.
                        type: string
                      min_deposit:
                        description: Minimum deposit for a proposal to enter voting period.
                        items:
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                          properties:
                            amount:
                              type: string
                            denom:
                              type: string
                          type: object
                        type: array
                    type: object
                  tally_params:
                    description: tally_params defines the parameters related to tally.
                    properties:
                      quorum:
                        description: >-
                          Minimum percentage of total stake needed to vote for a
                          result to be
                           considered valid.
                        format: byte
                        type: string
                      threshold:
                        description: >-
                          Minimum proportion of Yes votes for proposal to pass.
                          Default value: 0.5.
                        format: byte
                        type: string
                      veto_threshold:
                        description: >-
                          Minimum value of Veto votes to Total votes ratio for
                          proposal to be
                           vetoed. Default value: 1/3.
                        format: byte
                        type: string
                    type: object
                  voting_params:
                    description: voting_params defines the parameters related to voting.
                    properties:
                      voting_period:
                        description: Length of the voting period.
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Params queries all parameters of the gov module.
      tags:
        - cosmos/gov/v1beta1
  /cosmos/gov/v1beta1/proposals:
    get:
      operationId: Proposals
      parameters:
        - description: |-
            proposal_status defines the status of the proposals.

             - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
             - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
            period.
             - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
            period.
             - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
            passed.
             - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
            been rejected.
             - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
            failed.
          in: query
          name: proposal_status
          required: false
          schema:
            default: PROPOSAL_STATUS_UNSPECIFIED
            enum:
              - PROPOSAL_STATUS_UNSPECIFIED
              - PROPOSAL_STATUS_DEPOSIT_PERIOD
              - PROPOSAL_STATUS_VOTING_PERIOD
              - PROPOSAL_STATUS_PASSED
              - PROPOSAL_STATUS_REJECTED
              - PROPOSAL_STATUS_FAILED
            type: string
        - description: voter defines the voter address for the proposals.
          in: query
          name: voter
          required: false
          schema:
            type: string
        - description: depositor defines the deposit addresses from the proposals.
          in: query
          name: depositor
          required: false
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryProposalsResponse is the response type for the
                  Query/Proposals RPC

                  method.
                properties:
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                  proposals:
                    items:
                      description: >-
                        Proposal defines the core field members of a governance
                        proposal.
                      properties:
                        content:
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized
                            message.


                            Protobuf library provides support to pack/unpack Any
                            values in the form

                            of utility functions or additional generated methods
                            of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := anypb.New(foo)
                                 if err != nil {
                                   ...
                                 }
                                 ...
                                 foo := &pb.Foo{}
                                 if err := any.UnmarshalTo(foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will
                            by default use

                            'type.googleapis.com/full.type.name' as the type URL
                            and the unpack

                            methods only use the fully qualified type name after
                            the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z"
                            will yield type

                            name "y.z".



                            JSON

                            ====

                            The JSON representation of an `Any` value uses the
                            regular

                            representation of the deserialized, embedded
                            message, with an

                            additional field `@type` which contains the type
                            URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a
                            custom JSON

                            representation, that representation will be embedded
                            adding a field

                            `value` which holds the custom JSON in addition to
                            the `@type`

                            field. Example (for message
                            [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                          properties:
                            type_url:
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must
                                contain at least

                                one "/" character. The last segment of the URL's
                                path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name
                                should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the
                                binary all types that they

                                expect it to use in the context of Any. However,
                                for URLs which use the

                                scheme `http`, `https`, or no scheme, one can
                                optionally set up a type

                                server that maps type URLs to message
                                definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a
                                [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup
                                results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently
                                available in the official

                                protobuf release, and it is not used for type
                                URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty
                                scheme) might be

                                used with implementation specific semantics.
                              type: string
                            value:
                              description: >-
                                Must be a valid serialized protocol buffer of
                                the above specified type.
                              format: byte
                              type: string
                          type: object
                        deposit_end_time:
                          format: date-time
                          type: string
                        final_tally_result:
                          description: >-
                            TallyResult defines a standard tally for a
                            governance proposal.
                          properties:
                            abstain:
                              type: string
                            'no':
                              type: string
                            no_with_veto:
                              type: string
                            'yes':
                              type: string
                          type: object
                        proposal_id:
                          format: uint64
                          type: string
                        status:
                          default: PROPOSAL_STATUS_UNSPECIFIED
                          description: >-
                            ProposalStatus enumerates the valid statuses of a
                            proposal.

                             - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
                             - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
                            period.
                             - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
                            period.
                             - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
                            passed.
                             - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
                            been rejected.
                             - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
                            failed.
                          enum:
                            - PROPOSAL_STATUS_UNSPECIFIED
                            - PROPOSAL_STATUS_DEPOSIT_PERIOD
                            - PROPOSAL_STATUS_VOTING_PERIOD
                            - PROPOSAL_STATUS_PASSED
                            - PROPOSAL_STATUS_REJECTED
                            - PROPOSAL_STATUS_FAILED
                          type: string
                        submit_time:
                          format: date-time
                          type: string
                        total_deposit:
                          items:
                            description: >-
                              Coin defines a token with a denomination and an
                              amount.


                              NOTE: The amount field is an Int which implements
                              the custom method

                              signatures required by gogoproto.
                            properties:
                              amount:
                                type: string
                              denom:
                                type: string
                            type: object
                          type: array
                        voting_end_time:
                          format: date-time
                          type: string
                        voting_start_time:
                          format: date-time
                          type: string
                      type: object
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Proposals queries all proposals based on given status.
      tags:
        - cosmos/gov/v1beta1
  /cosmos/gov/v1beta1/proposals/{proposal_id}:
    get:
      operationId: Proposal
      parameters:
        - description: proposal_id defines the unique id of the proposal.
          in: path
          name: proposal_id
          required: true
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryProposalResponse is the response type for the
                  Query/Proposal RPC method.
                properties:
                  proposal:
                    description: >-
                      Proposal defines the core field members of a governance
                      proposal.
                    properties:
                      content:
                        description: >-
                          `Any` contains an arbitrary serialized protocol buffer
                          message along with a

                          URL that describes the type of the serialized message.


                          Protobuf library provides support to pack/unpack Any
                          values in the form

                          of utility functions or additional generated methods
                          of the Any type.


                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }

                           Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                           Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := anypb.New(foo)
                               if err != nil {
                                 ...
                               }
                               ...
                               foo := &pb.Foo{}
                               if err := any.UnmarshalTo(foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by
                          default use

                          'type.googleapis.com/full.type.name' as the type URL
                          and the unpack

                          methods only use the fully qualified type name after
                          the last '/'

                          in the type URL, for example "foo.bar.com/x/y.z" will
                          yield type

                          name "y.z".



                          JSON

                          ====

                          The JSON representation of an `Any` value uses the
                          regular

                          representation of the deserialized, embedded message,
                          with an

                          additional field `@type` which contains the type URL.
                          Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a
                          custom JSON

                          representation, that representation will be embedded
                          adding a field

                          `value` which holds the custom JSON in addition to the
                          `@type`

                          field. Example (for message
                          [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                        properties:
                          type_url:
                            description: >-
                              A URL/resource name that uniquely identifies the
                              type of the serialized

                              protocol buffer message. This string must contain
                              at least

                              one "/" character. The last segment of the URL's
                              path must represent

                              the fully qualified name of the type (as in

                              `path/google.protobuf.Duration`). The name should
                              be in a canonical form

                              (e.g., leading "." is not accepted).


                              In practice, teams usually precompile into the
                              binary all types that they

                              expect it to use in the context of Any. However,
                              for URLs which use the

                              scheme `http`, `https`, or no scheme, one can
                              optionally set up a type

                              server that maps type URLs to message definitions
                              as follows:


                              * If no scheme is provided, `https` is assumed.

                              * An HTTP GET on the URL must yield a
                              [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results
                              based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently
                              available in the official

                              protobuf release, and it is not used for type URLs
                              beginning with

                              type.googleapis.com.


                              Schemes other than `http`, `https` (or the empty
                              scheme) might be

                              used with implementation specific semantics.
                            type: string
                          value:
                            description: >-
                              Must be a valid serialized protocol buffer of the
                              above specified type.
                            format: byte
                            type: string
                        type: object
                      deposit_end_time:
                        format: date-time
                        type: string
                      final_tally_result:
                        description: >-
                          TallyResult defines a standard tally for a governance
                          proposal.
                        properties:
                          abstain:
                            type: string
                          'no':
                            type: string
                          no_with_veto:
                            type: string
                          'yes':
                            type: string
                        type: object
                      proposal_id:
                        format: uint64
                        type: string
                      status:
                        default: PROPOSAL_STATUS_UNSPECIFIED
                        description: >-
                          ProposalStatus enumerates the valid statuses of a
                          proposal.

                           - PROPOSAL_STATUS_UNSPECIFIED: PROPOSAL_STATUS_UNSPECIFIED defines the default propopsal status.
                           - PROPOSAL_STATUS_DEPOSIT_PERIOD: PROPOSAL_STATUS_DEPOSIT_PERIOD defines a proposal status during the deposit
                          period.
                           - PROPOSAL_STATUS_VOTING_PERIOD: PROPOSAL_STATUS_VOTING_PERIOD defines a proposal status during the voting
                          period.
                           - PROPOSAL_STATUS_PASSED: PROPOSAL_STATUS_PASSED defines a proposal status of a proposal that has
                          passed.
                           - PROPOSAL_STATUS_REJECTED: PROPOSAL_STATUS_REJECTED defines a proposal status of a proposal that has
                          been rejected.
                           - PROPOSAL_STATUS_FAILED: PROPOSAL_STATUS_FAILED defines a proposal status of a proposal that has
                          failed.
                        enum:
                          - PROPOSAL_STATUS_UNSPECIFIED
                          - PROPOSAL_STATUS_DEPOSIT_PERIOD
                          - PROPOSAL_STATUS_VOTING_PERIOD
                          - PROPOSAL_STATUS_PASSED
                          - PROPOSAL_STATUS_REJECTED
                          - PROPOSAL_STATUS_FAILED
                        type: string
                      submit_time:
                        format: date-time
                        type: string
                      total_deposit:
                        items:
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                          properties:
                            amount:
                              type: string
                            denom:
                              type: string
                          type: object
                        type: array
                      voting_end_time:
                        format: date-time
                        type: string
                      voting_start_time:
                        format: date-time
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Proposal queries proposal details based on ProposalID.
      tags:
        - cosmos/gov/v1beta1
  /cosmos/gov/v1beta1/proposals/{proposal_id}/deposits:
    get:
      operationId: Deposits
      parameters:
        - description: proposal_id defines the unique id of the proposal.
          in: path
          name: proposal_id
          required: true
          schema:
            format: uint64
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryDepositsResponse is the response type for the
                  Query/Deposits RPC method.
                properties:
                  deposits:
                    items:
                      description: >-
                        Deposit defines an amount deposited by an account
                        address to an active

                        proposal.
                      properties:
                        amount:
                          items:
                            description: >-
                              Coin defines a token with a denomination and an
                              amount.


                              NOTE: The amount field is an Int which implements
                              the custom method

                              signatures required by gogoproto.
                            properties:
                              amount:
                                type: string
                              denom:
                                type: string
                            type: object
                          type: array
                        depositor:
                          type: string
                        proposal_id:
                          format: uint64
                          type: string
                      type: object
                    type: array
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Deposits queries all deposits of a single proposal.
      tags:
        - cosmos/gov/v1beta1
  /cosmos/gov/v1beta1/proposals/{proposal_id}/deposits/{depositor}:
    get:
      operationId: Deposit
      parameters:
        - description: proposal_id defines the unique id of the proposal.
          in: path
          name: proposal_id
          required: true
          schema:
            format: uint64
            type: string
        - description: depositor defines the deposit addresses from the proposals.
          in: path
          name: depositor
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryDepositResponse is the response type for the
                  Query/Deposit RPC method.
                properties:
                  deposit:
                    description: >-
                      Deposit defines an amount deposited by an account address
                      to an active

                      proposal.
                    properties:
                      amount:
                        items:
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                          properties:
                            amount:
                              type: string
                            denom:
                              type: string
                          type: object
                        type: array
                      depositor:
                        type: string
                      proposal_id:
                        format: uint64
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        Deposit queries single deposit information based proposalID,
        depositAddr.
      tags:
        - cosmos/gov/v1beta1
  /cosmos/gov/v1beta1/proposals/{proposal_id}/tally:
    get:
      operationId: TallyResult
      parameters:
        - description: proposal_id defines the unique id of the proposal.
          in: path
          name: proposal_id
          required: true
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryTallyResultResponse is the response type for the
                  Query/Tally RPC method.
                properties:
                  tally:
                    description: >-
                      TallyResult defines a standard tally for a governance
                      proposal.
                    properties:
                      abstain:
                        type: string
                      'no':
                        type: string
                      no_with_veto:
                        type: string
                      'yes':
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: TallyResult queries the tally of a proposal vote.
      tags:
        - cosmos/gov/v1beta1
  /cosmos/gov/v1beta1/proposals/{proposal_id}/votes:
    get:
      operationId: Votes
      parameters:
        - description: proposal_id defines the unique id of the proposal.
          in: path
          name: proposal_id
          required: true
          schema:
            format: uint64
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryVotesResponse is the response type for the Query/Votes
                  RPC method.
                properties:
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                  votes:
                    description: votes defined the queried votes.
                    items:
                      description: >-
                        Vote defines a vote on a governance proposal.

                        A Vote consists of a proposal ID, the voter, and the
                        vote option.
                      properties:
                        option:
                          default: VOTE_OPTION_UNSPECIFIED
                          description: >-
                            Deprecated: Prefer to use `options` instead. This
                            field is set in queries

                            if and only if `len(options) == 1` and that option
                            has weight 1. In all

                            other cases, this field will default to
                            VOTE_OPTION_UNSPECIFIED.
                          enum:
                            - VOTE_OPTION_UNSPECIFIED
                            - VOTE_OPTION_YES
                            - VOTE_OPTION_ABSTAIN
                            - VOTE_OPTION_NO
                            - VOTE_OPTION_NO_WITH_VETO
                          type: string
                        options:
                          items:
                            description: >-
                              WeightedVoteOption defines a unit of vote for vote
                              split.


                              Since: cosmos-sdk 0.43
                            properties:
                              option:
                                default: VOTE_OPTION_UNSPECIFIED
                                description: >-
                                  VoteOption enumerates the valid vote options
                                  for a given governance proposal.

                                   - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                                   - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                                   - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                                   - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                                   - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
                                enum:
                                  - VOTE_OPTION_UNSPECIFIED
                                  - VOTE_OPTION_YES
                                  - VOTE_OPTION_ABSTAIN
                                  - VOTE_OPTION_NO
                                  - VOTE_OPTION_NO_WITH_VETO
                                type: string
                              weight:
                                type: string
                            type: object
                          title: 'Since: cosmos-sdk 0.43'
                          type: array
                        proposal_id:
                          format: uint64
                          type: string
                        voter:
                          type: string
                      type: object
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Votes queries votes of a given proposal.
      tags:
        - cosmos/gov/v1beta1
  /cosmos/gov/v1beta1/proposals/{proposal_id}/votes/{voter}:
    get:
      operationId: Vote
      parameters:
        - description: proposal_id defines the unique id of the proposal.
          in: path
          name: proposal_id
          required: true
          schema:
            format: uint64
            type: string
        - description: voter defines the oter address for the proposals.
          in: path
          name: voter
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryVoteResponse is the response type for the Query/Vote RPC
                  method.
                properties:
                  vote:
                    description: >-
                      Vote defines a vote on a governance proposal.

                      A Vote consists of a proposal ID, the voter, and the vote
                      option.
                    properties:
                      option:
                        default: VOTE_OPTION_UNSPECIFIED
                        description: >-
                          Deprecated: Prefer to use `options` instead. This
                          field is set in queries

                          if and only if `len(options) == 1` and that option has
                          weight 1. In all

                          other cases, this field will default to
                          VOTE_OPTION_UNSPECIFIED.
                        enum:
                          - VOTE_OPTION_UNSPECIFIED
                          - VOTE_OPTION_YES
                          - VOTE_OPTION_ABSTAIN
                          - VOTE_OPTION_NO
                          - VOTE_OPTION_NO_WITH_VETO
                        type: string
                      options:
                        items:
                          description: >-
                            WeightedVoteOption defines a unit of vote for vote
                            split.


                            Since: cosmos-sdk 0.43
                          properties:
                            option:
                              default: VOTE_OPTION_UNSPECIFIED
                              description: >-
                                VoteOption enumerates the valid vote options for
                                a given governance proposal.

                                 - VOTE_OPTION_UNSPECIFIED: VOTE_OPTION_UNSPECIFIED defines a no-op vote option.
                                 - VOTE_OPTION_YES: VOTE_OPTION_YES defines a yes vote option.
                                 - VOTE_OPTION_ABSTAIN: VOTE_OPTION_ABSTAIN defines an abstain vote option.
                                 - VOTE_OPTION_NO: VOTE_OPTION_NO defines a no vote option.
                                 - VOTE_OPTION_NO_WITH_VETO: VOTE_OPTION_NO_WITH_VETO defines a no with veto vote option.
                              enum:
                                - VOTE_OPTION_UNSPECIFIED
                                - VOTE_OPTION_YES
                                - VOTE_OPTION_ABSTAIN
                                - VOTE_OPTION_NO
                                - VOTE_OPTION_NO_WITH_VETO
                              type: string
                            weight:
                              type: string
                          type: object
                        title: 'Since: cosmos-sdk 0.43'
                        type: array
                      proposal_id:
                        format: uint64
                        type: string
                      voter:
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Vote queries voted information based on proposalID, voterAddr.
      tags:
        - cosmos/gov/v1beta1
  /cosmos/mint/v1beta1/annual_provisions:
    get:
      operationId: AnnualProvisions
      responses:
        '200':
          content:
            application/json:
              schema:
                description: |-
                  QueryAnnualProvisionsResponse is the response type for the
                  Query/AnnualProvisions RPC method.
                properties:
                  annual_provisions:
                    description: >-
                      annual_provisions is the current minting annual provisions
                      value.
                    format: byte
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: AnnualProvisions current minting annual provisions value.
      tags:
        - cosmos/mint/v1beta1
  /cosmos/mint/v1beta1/inflation:
    get:
      operationId: Inflation
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryInflationResponse is the response type for the
                  Query/Inflation RPC

                  method.
                properties:
                  inflation:
                    description: inflation is the current minting inflation value.
                    format: byte
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Inflation returns the current minting inflation value.
      tags:
        - cosmos/mint/v1beta1
  /cosmos/mint/v1beta1/params:
    get:
      operationId: Params
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryParamsResponse is the response type for the Query/Params
                  RPC method.
                properties:
                  params:
                    description: params defines the parameters of the module.
                    properties:
                      blocks_per_year:
                        format: uint64
                        title: expected blocks per year
                        type: string
                      goal_bonded:
                        title: goal of percent bonded atoms
                        type: string
                      inflation_max:
                        title: maximum inflation rate
                        type: string
                      inflation_min:
                        title: minimum inflation rate
                        type: string
                      inflation_rate_change:
                        title: maximum annual change in inflation rate
                        type: string
                      mint_denom:
                        title: type of coin to mint
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Params returns the total set of minting parameters.
      tags:
        - cosmos/mint/v1beta1
  /cosmos/params/v1beta1/params:
    get:
      operationId: Params
      parameters:
        - description: subspace defines the module to query the parameter for.
          in: query
          name: subspace
          required: false
          schema:
            type: string
        - description: key defines the key of the parameter in the subspace.
          in: query
          name: key
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryParamsResponse is response type for the Query/Params RPC
                  method.
                properties:
                  param:
                    description: param defines the queried parameter.
                    properties:
                      key:
                        type: string
                      subspace:
                        type: string
                      value:
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: |-
        Params queries a specific parameter of a module, given its subspace and
        key.
      tags:
        - cosmos/params/v1beta1
  /cosmos/slashing/v1beta1/params:
    get:
      operationId: Params
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  params:
                    description: >-
                      Params represents the parameters used for by the slashing
                      module.
                    properties:
                      downtime_jail_duration:
                        type: string
                      min_signed_per_window:
                        format: byte
                        type: string
                      signed_blocks_window:
                        format: int64
                        type: string
                      slash_fraction_double_sign:
                        format: byte
                        type: string
                      slash_fraction_downtime:
                        format: byte
                        type: string
                    type: object
                title: >-
                  QueryParamsResponse is the response type for the Query/Params
                  RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Params queries the parameters of slashing module
      tags:
        - cosmos/slashing/v1beta1
  /cosmos/slashing/v1beta1/signing_infos:
    get:
      operationId: SigningInfos
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  info:
                    items:
                      description: >-
                        ValidatorSigningInfo defines a validator's signing info
                        for monitoring their

                        liveness activity.
                      properties:
                        address:
                          type: string
                        index_offset:
                          description: >-
                            Index which is incremented each time the validator
                            was a bonded

                            in a block and may have signed a precommit or not.
                            This in conjunction with the

                            `SignedBlocksWindow` param determines the index in
                            the `MissedBlocksBitArray`.
                          format: int64
                          type: string
                        jailed_until:
                          description: >-
                            Timestamp until which the validator is jailed due to
                            liveness downtime.
                          format: date-time
                          type: string
                        missed_blocks_counter:
                          description: >-
                            A counter kept to avoid unnecessary array reads.

                            Note that `Sum(MissedBlocksBitArray)` always equals
                            `MissedBlocksCounter`.
                          format: int64
                          type: string
                        start_height:
                          format: int64
                          title: >-
                            Height at which validator was first a candidate OR
                            was unjailed
                          type: string
                        tombstoned:
                          description: >-
                            Whether or not a validator has been tombstoned
                            (killed out of validator set). It is set

                            once the validator commits an equivocation or for
                            any other configured misbehiavor.
                          type: boolean
                      type: object
                    title: info is the signing info of all validators
                    type: array
                  pagination:
                    description: >-
                      PageResponse is to be embedded in gRPC response messages
                      where the

                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                title: >-
                  QuerySigningInfosResponse is the response type for the
                  Query/SigningInfos RPC

                  method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: SigningInfos queries signing info of all validators
      tags:
        - cosmos/slashing/v1beta1
  /cosmos/slashing/v1beta1/signing_infos/{cons_address}:
    get:
      operationId: SigningInfo
      parameters:
        - description: cons_address is the address to query signing info of
          in: path
          name: cons_address
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  val_signing_info:
                    description: >-
                      ValidatorSigningInfo defines a validator's signing info
                      for monitoring their

                      liveness activity.
                    properties:
                      address:
                        type: string
                      index_offset:
                        description: >-
                          Index which is incremented each time the validator was
                          a bonded

                          in a block and may have signed a precommit or not.
                          This in conjunction with the

                          `SignedBlocksWindow` param determines the index in the
                          `MissedBlocksBitArray`.
                        format: int64
                        type: string
                      jailed_until:
                        description: >-
                          Timestamp until which the validator is jailed due to
                          liveness downtime.
                        format: date-time
                        type: string
                      missed_blocks_counter:
                        description: >-
                          A counter kept to avoid unnecessary array reads.

                          Note that `Sum(MissedBlocksBitArray)` always equals
                          `MissedBlocksCounter`.
                        format: int64
                        type: string
                      start_height:
                        format: int64
                        title: >-
                          Height at which validator was first a candidate OR was
                          unjailed
                        type: string
                      tombstoned:
                        description: >-
                          Whether or not a validator has been tombstoned (killed
                          out of validator set). It is set

                          once the validator commits an equivocation or for any
                          other configured misbehiavor.
                        type: boolean
                    title: >-
                      val_signing_info is the signing info of requested val cons
                      address
                    type: object
                title: >-
                  QuerySigningInfoResponse is the response type for the
                  Query/SigningInfo RPC

                  method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: SigningInfo queries the signing info of given cons address
      tags:
        - cosmos/slashing/v1beta1
  /cosmos/staking/v1beta1/delegations/{delegator_addr}:
    get:
      operationId: DelegatorDelegations
      parameters:
        - description: delegator_addr defines the delegator address to query for.
          in: path
          name: delegator_addr
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: |-
                  QueryDelegatorDelegationsResponse is response type for the
                  Query/DelegatorDelegations RPC method.
                properties:
                  delegation_responses:
                    description: >-
                      delegation_responses defines all the delegations' info of
                      a delegator.
                    items:
                      description: >-
                        DelegationResponse is equivalent to Delegation except
                        that it contains a

                        balance in addition to shares which is more suitable for
                        client responses.
                      properties:
                        balance:
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                          properties:
                            amount:
                              type: string
                            denom:
                              type: string
                          type: object
                        delegation:
                          description: >-
                            Delegation represents the bond with tokens held by
                            an account. It is

                            owned by one delegator, and is associated with the
                            voting power of one

                            validator.
                          properties:
                            delegator_address:
                              description: >-
                                delegator_address is the bech32-encoded address
                                of the delegator.
                              type: string
                            shares:
                              description: shares define the delegation shares received.
                              type: string
                            validator_address:
                              description: >-
                                validator_address is the bech32-encoded address
                                of the validator.
                              type: string
                          type: object
                      type: object
                    type: array
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        DelegatorDelegations queries all delegations of a given delegator
        address.
      tags:
        - cosmos/staking/v1beta1
  /cosmos/staking/v1beta1/delegators/{delegator_addr}/redelegations:
    get:
      operationId: Redelegations
      parameters:
        - description: delegator_addr defines the delegator address to query for.
          in: path
          name: delegator_addr
          required: true
          schema:
            type: string
        - description: src_validator_addr defines the validator address to redelegate from.
          in: query
          name: src_validator_addr
          required: false
          schema:
            type: string
        - description: dst_validator_addr defines the validator address to redelegate to.
          in: query
          name: dst_validator_addr
          required: false
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryRedelegationsResponse is response type for the
                  Query/Redelegations RPC

                  method.
                properties:
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                  redelegation_responses:
                    items:
                      description: >-
                        RedelegationResponse is equivalent to a Redelegation
                        except that its entries

                        contain a balance in addition to shares which is more
                        suitable for client

                        responses.
                      properties:
                        entries:
                          items:
                            description: >-
                              RedelegationEntryResponse is equivalent to a
                              RedelegationEntry except that it

                              contains a balance in addition to shares which is
                              more suitable for client

                              responses.
                            properties:
                              balance:
                                type: string
                              redelegation_entry:
                                description: >-
                                  RedelegationEntry defines a redelegation
                                  object with relevant metadata.
                                properties:
                                  completion_time:
                                    description: >-
                                      completion_time defines the unix time for
                                      redelegation completion.
                                    format: date-time
                                    type: string
                                  creation_height:
                                    description: >-
                                      creation_height  defines the height which
                                      the redelegation took place.
                                    format: int64
                                    type: string
                                  initial_balance:
                                    description: >-
                                      initial_balance defines the initial
                                      balance when redelegation started.
                                    type: string
                                  shares_dst:
                                    description: >-
                                      shares_dst is the amount of
                                      destination-validator shares created by
                                      redelegation.
                                    type: string
                                type: object
                            type: object
                          type: array
                        redelegation:
                          description: >-
                            Redelegation contains the list of a particular
                            delegator's redelegating bonds

                            from a particular source validator to a particular
                            destination validator.
                          properties:
                            delegator_address:
                              description: >-
                                delegator_address is the bech32-encoded address
                                of the delegator.
                              type: string
                            entries:
                              description: entries are the redelegation entries.
                              items:
                                description: >-
                                  RedelegationEntry defines a redelegation
                                  object with relevant metadata.
                                properties:
                                  completion_time:
                                    description: >-
                                      completion_time defines the unix time for
                                      redelegation completion.
                                    format: date-time
                                    type: string
                                  creation_height:
                                    description: >-
                                      creation_height  defines the height which
                                      the redelegation took place.
                                    format: int64
                                    type: string
                                  initial_balance:
                                    description: >-
                                      initial_balance defines the initial
                                      balance when redelegation started.
                                    type: string
                                  shares_dst:
                                    description: >-
                                      shares_dst is the amount of
                                      destination-validator shares created by
                                      redelegation.
                                    type: string
                                type: object
                              type: array
                            validator_dst_address:
                              description: >-
                                validator_dst_address is the validator
                                redelegation destination operator address.
                              type: string
                            validator_src_address:
                              description: >-
                                validator_src_address is the validator
                                redelegation source operator address.
                              type: string
                          type: object
                      type: object
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Redelegations queries redelegations of given address.
      tags:
        - cosmos/staking/v1beta1
  /cosmos/staking/v1beta1/delegators/{delegator_addr}/unbonding_delegations:
    get:
      operationId: DelegatorUnbondingDelegations
      parameters:
        - description: delegator_addr defines the delegator address to query for.
          in: path
          name: delegator_addr
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryUnbondingDelegatorDelegationsResponse is response type
                  for the

                  Query/UnbondingDelegatorDelegations RPC method.
                properties:
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                  unbonding_responses:
                    items:
                      description: >-
                        UnbondingDelegation stores all of a single delegator's
                        unbonding bonds

                        for a single validator in an time-ordered list.
                      properties:
                        delegator_address:
                          description: >-
                            delegator_address is the bech32-encoded address of
                            the delegator.
                          type: string
                        entries:
                          description: entries are the unbonding delegation entries.
                          items:
                            description: >-
                              UnbondingDelegationEntry defines an unbonding
                              object with relevant metadata.
                            properties:
                              balance:
                                description: >-
                                  balance defines the tokens to receive at
                                  completion.
                                type: string
                              completion_time:
                                description: >-
                                  completion_time is the unix time for unbonding
                                  completion.
                                format: date-time
                                type: string
                              creation_height:
                                description: >-
                                  creation_height is the height which the
                                  unbonding took place.
                                format: int64
                                type: string
                              initial_balance:
                                description: >-
                                  initial_balance defines the tokens initially
                                  scheduled to receive at completion.
                                type: string
                            type: object
                          type: array
                        validator_address:
                          description: >-
                            validator_address is the bech32-encoded address of
                            the validator.
                          type: string
                      type: object
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        DelegatorUnbondingDelegations queries all unbonding delegations of a
        given

        delegator address.
      tags:
        - cosmos/staking/v1beta1
  /cosmos/staking/v1beta1/delegators/{delegator_addr}/validators:
    get:
      operationId: DelegatorValidators
      parameters:
        - description: delegator_addr defines the delegator address to query for.
          in: path
          name: delegator_addr
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: |-
                  QueryDelegatorValidatorsResponse is response type for the
                  Query/DelegatorValidators RPC method.
                properties:
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                  validators:
                    description: >-
                      validators defines the the validators' info of a
                      delegator.
                    items:
                      description: >-
                        Validator defines a validator, together with the total
                        amount of the

                        Validator's bond shares and their exchange rate to
                        coins. Slashing results in

                        a decrease in the exchange rate, allowing correct
                        calculation of future

                        undelegations without iterating over delegators. When
                        coins are delegated to

                        this validator, the validator is credited with a
                        delegation whose number of

                        bond shares is based on the amount of coins delegated
                        divided by the current

                        exchange rate. Voting power can be calculated as total
                        bonded shares

                        multiplied by exchange rate.
                      properties:
                        commission:
                          description: commission defines the commission parameters.
                          properties:
                            commission_rates:
                              description: >-
                                commission_rates defines the initial commission
                                rates to be used for creating a validator.
                              properties:
                                max_change_rate:
                                  description: >-
                                    max_change_rate defines the maximum daily
                                    increase of the validator commission, as a
                                    fraction.
                                  type: string
                                max_rate:
                                  description: >-
                                    max_rate defines the maximum commission rate
                                    which validator can ever charge, as a
                                    fraction.
                                  type: string
                                rate:
                                  description: >-
                                    rate is the commission rate charged to
                                    delegators, as a fraction.
                                  type: string
                              type: object
                            update_time:
                              description: >-
                                update_time is the last time the commission rate
                                was changed.
                              format: date-time
                              type: string
                          type: object
                        consensus_pubkey:
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized
                            message.


                            Protobuf library provides support to pack/unpack Any
                            values in the form

                            of utility functions or additional generated methods
                            of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := anypb.New(foo)
                                 if err != nil {
                                   ...
                                 }
                                 ...
                                 foo := &pb.Foo{}
                                 if err := any.UnmarshalTo(foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will
                            by default use

                            'type.googleapis.com/full.type.name' as the type URL
                            and the unpack

                            methods only use the fully qualified type name after
                            the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z"
                            will yield type

                            name "y.z".



                            JSON

                            ====

                            The JSON representation of an `Any` value uses the
                            regular

                            representation of the deserialized, embedded
                            message, with an

                            additional field `@type` which contains the type
                            URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a
                            custom JSON

                            representation, that representation will be embedded
                            adding a field

                            `value` which holds the custom JSON in addition to
                            the `@type`

                            field. Example (for message
                            [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                          properties:
                            type_url:
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must
                                contain at least

                                one "/" character. The last segment of the URL's
                                path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name
                                should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the
                                binary all types that they

                                expect it to use in the context of Any. However,
                                for URLs which use the

                                scheme `http`, `https`, or no scheme, one can
                                optionally set up a type

                                server that maps type URLs to message
                                definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a
                                [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup
                                results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently
                                available in the official

                                protobuf release, and it is not used for type
                                URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty
                                scheme) might be

                                used with implementation specific semantics.
                              type: string
                            value:
                              description: >-
                                Must be a valid serialized protocol buffer of
                                the above specified type.
                              format: byte
                              type: string
                          type: object
                        delegator_shares:
                          description: >-
                            delegator_shares defines total shares issued to a
                            validator's delegators.
                          type: string
                        description:
                          description: >-
                            description defines the description terms for the
                            validator.
                          properties:
                            details:
                              description: details define other optional details.
                              type: string
                            identity:
                              description: >-
                                identity defines an optional identity signature
                                (ex. UPort or Keybase).
                              type: string
                            moniker:
                              description: >-
                                moniker defines a human-readable name for the
                                validator.
                              type: string
                            security_contact:
                              description: >-
                                security_contact defines an optional email for
                                security contact.
                              type: string
                            website:
                              description: website defines an optional website link.
                              type: string
                          type: object
                        jailed:
                          description: >-
                            jailed defined whether the validator has been jailed
                            from bonded status or not.
                          type: boolean
                        min_self_delegation:
                          description: >-
                            min_self_delegation is the validator's self declared
                            minimum self delegation.
                          type: string
                        operator_address:
                          description: >-
                            operator_address defines the address of the
                            validator's operator; bech encoded in JSON.
                          type: string
                        status:
                          default: BOND_STATUS_UNSPECIFIED
                          description: >-
                            status is the validator status
                            (bonded/unbonding/unbonded).
                          enum:
                            - BOND_STATUS_UNSPECIFIED
                            - BOND_STATUS_UNBONDED
                            - BOND_STATUS_UNBONDING
                            - BOND_STATUS_BONDED
                          type: string
                        tokens:
                          description: >-
                            tokens define the delegated tokens (incl.
                            self-delegation).
                          type: string
                        unbonding_height:
                          description: >-
                            unbonding_height defines, if unbonding, the height
                            at which this validator has begun unbonding.
                          format: int64
                          type: string
                        unbonding_time:
                          description: >-
                            unbonding_time defines, if unbonding, the min time
                            for the validator to complete unbonding.
                          format: date-time
                          type: string
                      type: object
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: |-
        DelegatorValidators queries all validators info for given delegator
        address.
      tags:
        - cosmos/staking/v1beta1
  /cosmos/staking/v1beta1/delegators/{delegator_addr}/validators/{validator_addr}:
    get:
      operationId: DelegatorValidator
      parameters:
        - description: delegator_addr defines the delegator address to query for.
          in: path
          name: delegator_addr
          required: true
          schema:
            type: string
        - description: validator_addr defines the validator address to query for.
          in: path
          name: validator_addr
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: |-
                  QueryDelegatorValidatorResponse response type for the
                  Query/DelegatorValidator RPC method.
                properties:
                  validator:
                    description: >-
                      Validator defines a validator, together with the total
                      amount of the

                      Validator's bond shares and their exchange rate to coins.
                      Slashing results in

                      a decrease in the exchange rate, allowing correct
                      calculation of future

                      undelegations without iterating over delegators. When
                      coins are delegated to

                      this validator, the validator is credited with a
                      delegation whose number of

                      bond shares is based on the amount of coins delegated
                      divided by the current

                      exchange rate. Voting power can be calculated as total
                      bonded shares

                      multiplied by exchange rate.
                    properties:
                      commission:
                        description: commission defines the commission parameters.
                        properties:
                          commission_rates:
                            description: >-
                              commission_rates defines the initial commission
                              rates to be used for creating a validator.
                            properties:
                              max_change_rate:
                                description: >-
                                  max_change_rate defines the maximum daily
                                  increase of the validator commission, as a
                                  fraction.
                                type: string
                              max_rate:
                                description: >-
                                  max_rate defines the maximum commission rate
                                  which validator can ever charge, as a
                                  fraction.
                                type: string
                              rate:
                                description: >-
                                  rate is the commission rate charged to
                                  delegators, as a fraction.
                                type: string
                            type: object
                          update_time:
                            description: >-
                              update_time is the last time the commission rate
                              was changed.
                            format: date-time
                            type: string
                        type: object
                      consensus_pubkey:
                        description: >-
                          `Any` contains an arbitrary serialized protocol buffer
                          message along with a

                          URL that describes the type of the serialized message.


                          Protobuf library provides support to pack/unpack Any
                          values in the form

                          of utility functions or additional generated methods
                          of the Any type.


                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }

                           Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                           Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := anypb.New(foo)
                               if err != nil {
                                 ...
                               }
                               ...
                               foo := &pb.Foo{}
                               if err := any.UnmarshalTo(foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by
                          default use

                          'type.googleapis.com/full.type.name' as the type URL
                          and the unpack

                          methods only use the fully qualified type name after
                          the last '/'

                          in the type URL, for example "foo.bar.com/x/y.z" will
                          yield type

                          name "y.z".



                          JSON

                          ====

                          The JSON representation of an `Any` value uses the
                          regular

                          representation of the deserialized, embedded message,
                          with an

                          additional field `@type` which contains the type URL.
                          Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a
                          custom JSON

                          representation, that representation will be embedded
                          adding a field

                          `value` which holds the custom JSON in addition to the
                          `@type`

                          field. Example (for message
                          [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                        properties:
                          type_url:
                            description: >-
                              A URL/resource name that uniquely identifies the
                              type of the serialized

                              protocol buffer message. This string must contain
                              at least

                              one "/" character. The last segment of the URL's
                              path must represent

                              the fully qualified name of the type (as in

                              `path/google.protobuf.Duration`). The name should
                              be in a canonical form

                              (e.g., leading "." is not accepted).


                              In practice, teams usually precompile into the
                              binary all types that they

                              expect it to use in the context of Any. However,
                              for URLs which use the

                              scheme `http`, `https`, or no scheme, one can
                              optionally set up a type

                              server that maps type URLs to message definitions
                              as follows:


                              * If no scheme is provided, `https` is assumed.

                              * An HTTP GET on the URL must yield a
                              [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results
                              based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently
                              available in the official

                              protobuf release, and it is not used for type URLs
                              beginning with

                              type.googleapis.com.


                              Schemes other than `http`, `https` (or the empty
                              scheme) might be

                              used with implementation specific semantics.
                            type: string
                          value:
                            description: >-
                              Must be a valid serialized protocol buffer of the
                              above specified type.
                            format: byte
                            type: string
                        type: object
                      delegator_shares:
                        description: >-
                          delegator_shares defines total shares issued to a
                          validator's delegators.
                        type: string
                      description:
                        description: >-
                          description defines the description terms for the
                          validator.
                        properties:
                          details:
                            description: details define other optional details.
                            type: string
                          identity:
                            description: >-
                              identity defines an optional identity signature
                              (ex. UPort or Keybase).
                            type: string
                          moniker:
                            description: >-
                              moniker defines a human-readable name for the
                              validator.
                            type: string
                          security_contact:
                            description: >-
                              security_contact defines an optional email for
                              security contact.
                            type: string
                          website:
                            description: website defines an optional website link.
                            type: string
                        type: object
                      jailed:
                        description: >-
                          jailed defined whether the validator has been jailed
                          from bonded status or not.
                        type: boolean
                      min_self_delegation:
                        description: >-
                          min_self_delegation is the validator's self declared
                          minimum self delegation.
                        type: string
                      operator_address:
                        description: >-
                          operator_address defines the address of the
                          validator's operator; bech encoded in JSON.
                        type: string
                      status:
                        default: BOND_STATUS_UNSPECIFIED
                        description: >-
                          status is the validator status
                          (bonded/unbonding/unbonded).
                        enum:
                          - BOND_STATUS_UNSPECIFIED
                          - BOND_STATUS_UNBONDED
                          - BOND_STATUS_UNBONDING
                          - BOND_STATUS_BONDED
                        type: string
                      tokens:
                        description: >-
                          tokens define the delegated tokens (incl.
                          self-delegation).
                        type: string
                      unbonding_height:
                        description: >-
                          unbonding_height defines, if unbonding, the height at
                          which this validator has begun unbonding.
                        format: int64
                        type: string
                      unbonding_time:
                        description: >-
                          unbonding_time defines, if unbonding, the min time for
                          the validator to complete unbonding.
                        format: date-time
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: |-
        DelegatorValidator queries validator info for given delegator validator
        pair.
      tags:
        - cosmos/staking/v1beta1
  /cosmos/staking/v1beta1/historical_info/{height}:
    get:
      operationId: HistoricalInfo
      parameters:
        - description: height defines at which height to query the historical info.
          in: path
          name: height
          required: true
          schema:
            format: int64
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryHistoricalInfoResponse is response type for the
                  Query/HistoricalInfo RPC

                  method.
                properties:
                  hist:
                    description: hist defines the historical info at the given height.
                    properties:
                      header:
                        description: Header defines the structure of a block header.
                        properties:
                          app_hash:
                            format: byte
                            type: string
                          chain_id:
                            type: string
                          consensus_hash:
                            format: byte
                            type: string
                          data_hash:
                            format: byte
                            type: string
                          evidence_hash:
                            format: byte
                            title: consensus info
                            type: string
                          height:
                            format: int64
                            type: string
                          last_block_id:
                            properties:
                              hash:
                                format: byte
                                type: string
                              part_set_header:
                                properties:
                                  hash:
                                    format: byte
                                    type: string
                                  total:
                                    format: int64
                                    type: integer
                                title: PartsetHeader
                                type: object
                            title: prev block info
                            type: object
                          last_commit_hash:
                            format: byte
                            title: hashes of block data
                            type: string
                          last_results_hash:
                            format: byte
                            type: string
                          next_validators_hash:
                            format: byte
                            type: string
                          proposer_address:
                            format: byte
                            type: string
                          time:
                            format: date-time
                            type: string
                          validators_hash:
                            format: byte
                            title: hashes from the app output from the prev block
                            type: string
                          version:
                            description: >-
                              Consensus captures the consensus rules for
                              processing a block in the blockchain,

                              including all blockchain data structures and the
                              rules of the application's

                              state transition machine.
                            properties:
                              app:
                                format: uint64
                                type: string
                              block:
                                format: uint64
                                type: string
                            title: basic block info
                            type: object
                        type: object
                      valset:
                        items:
                          description: >-
                            Validator defines a validator, together with the
                            total amount of the

                            Validator's bond shares and their exchange rate to
                            coins. Slashing results in

                            a decrease in the exchange rate, allowing correct
                            calculation of future

                            undelegations without iterating over delegators.
                            When coins are delegated to

                            this validator, the validator is credited with a
                            delegation whose number of

                            bond shares is based on the amount of coins
                            delegated divided by the current

                            exchange rate. Voting power can be calculated as
                            total bonded shares

                            multiplied by exchange rate.
                          properties:
                            commission:
                              description: commission defines the commission parameters.
                              properties:
                                commission_rates:
                                  description: >-
                                    commission_rates defines the initial
                                    commission rates to be used for creating a
                                    validator.
                                  properties:
                                    max_change_rate:
                                      description: >-
                                        max_change_rate defines the maximum
                                        daily increase of the validator
                                        commission, as a fraction.
                                      type: string
                                    max_rate:
                                      description: >-
                                        max_rate defines the maximum commission
                                        rate which validator can ever charge, as
                                        a fraction.
                                      type: string
                                    rate:
                                      description: >-
                                        rate is the commission rate charged to
                                        delegators, as a fraction.
                                      type: string
                                  type: object
                                update_time:
                                  description: >-
                                    update_time is the last time the commission
                                    rate was changed.
                                  format: date-time
                                  type: string
                              type: object
                            consensus_pubkey:
                              description: >-
                                `Any` contains an arbitrary serialized protocol
                                buffer message along with a

                                URL that describes the type of the serialized
                                message.


                                Protobuf library provides support to pack/unpack
                                Any values in the form

                                of utility functions or additional generated
                                methods of the Any type.


                                Example 1: Pack and unpack a message in C++.

                                    Foo foo = ...;
                                    Any any;
                                    any.PackFrom(foo);
                                    ...
                                    if (any.UnpackTo(&foo)) {
                                      ...
                                    }

                                Example 2: Pack and unpack a message in Java.

                                    Foo foo = ...;
                                    Any any = Any.pack(foo);
                                    ...
                                    if (any.is(Foo.class)) {
                                      foo = any.unpack(Foo.class);
                                    }

                                 Example 3: Pack and unpack a message in Python.

                                    foo = Foo(...)
                                    any = Any()
                                    any.Pack(foo)
                                    ...
                                    if any.Is(Foo.DESCRIPTOR):
                                      any.Unpack(foo)
                                      ...

                                 Example 4: Pack and unpack a message in Go

                                     foo := &pb.Foo{...}
                                     any, err := anypb.New(foo)
                                     if err != nil {
                                       ...
                                     }
                                     ...
                                     foo := &pb.Foo{}
                                     if err := any.UnmarshalTo(foo); err != nil {
                                       ...
                                     }

                                The pack methods provided by protobuf library
                                will by default use

                                'type.googleapis.com/full.type.name' as the type
                                URL and the unpack

                                methods only use the fully qualified type name
                                after the last '/'

                                in the type URL, for example "foo.bar.com/x/y.z"
                                will yield type

                                name "y.z".



                                JSON

                                ====

                                The JSON representation of an `Any` value uses
                                the regular

                                representation of the deserialized, embedded
                                message, with an

                                additional field `@type` which contains the type
                                URL. Example:

                                    package google.profile;
                                    message Person {
                                      string first_name = 1;
                                      string last_name = 2;
                                    }

                                    {
                                      "@type": "type.googleapis.com/google.profile.Person",
                                      "firstName": <string>,
                                      "lastName": <string>
                                    }

                                If the embedded message type is well-known and
                                has a custom JSON

                                representation, that representation will be
                                embedded adding a field

                                `value` which holds the custom JSON in addition
                                to the `@type`

                                field. Example (for message
                                [google.protobuf.Duration][]):

                                    {
                                      "@type": "type.googleapis.com/google.protobuf.Duration",
                                      "value": "1.212s"
                                    }
                              properties:
                                type_url:
                                  description: >-
                                    A URL/resource name that uniquely identifies
                                    the type of the serialized

                                    protocol buffer message. This string must
                                    contain at least

                                    one "/" character. The last segment of the
                                    URL's path must represent

                                    the fully qualified name of the type (as in

                                    `path/google.protobuf.Duration`). The name
                                    should be in a canonical form

                                    (e.g., leading "." is not accepted).


                                    In practice, teams usually precompile into
                                    the binary all types that they

                                    expect it to use in the context of Any.
                                    However, for URLs which use the

                                    scheme `http`, `https`, or no scheme, one
                                    can optionally set up a type

                                    server that maps type URLs to message
                                    definitions as follows:


                                    * If no scheme is provided, `https` is
                                    assumed.

                                    * An HTTP GET on the URL must yield a
                                    [google.protobuf.Type][]
                                      value in binary format, or produce an error.
                                    * Applications are allowed to cache lookup
                                    results based on the
                                      URL, or have them precompiled into a binary to avoid any
                                      lookup. Therefore, binary compatibility needs to be preserved
                                      on changes to types. (Use versioned type names to manage
                                      breaking changes.)

                                    Note: this functionality is not currently
                                    available in the official

                                    protobuf release, and it is not used for
                                    type URLs beginning with

                                    type.googleapis.com.


                                    Schemes other than `http`, `https` (or the
                                    empty scheme) might be

                                    used with implementation specific semantics.
                                  type: string
                                value:
                                  description: >-
                                    Must be a valid serialized protocol buffer
                                    of the above specified type.
                                  format: byte
                                  type: string
                              type: object
                            delegator_shares:
                              description: >-
                                delegator_shares defines total shares issued to
                                a validator's delegators.
                              type: string
                            description:
                              description: >-
                                description defines the description terms for
                                the validator.
                              properties:
                                details:
                                  description: details define other optional details.
                                  type: string
                                identity:
                                  description: >-
                                    identity defines an optional identity
                                    signature (ex. UPort or Keybase).
                                  type: string
                                moniker:
                                  description: >-
                                    moniker defines a human-readable name for
                                    the validator.
                                  type: string
                                security_contact:
                                  description: >-
                                    security_contact defines an optional email
                                    for security contact.
                                  type: string
                                website:
                                  description: website defines an optional website link.
                                  type: string
                              type: object
                            jailed:
                              description: >-
                                jailed defined whether the validator has been
                                jailed from bonded status or not.
                              type: boolean
                            min_self_delegation:
                              description: >-
                                min_self_delegation is the validator's self
                                declared minimum self delegation.
                              type: string
                            operator_address:
                              description: >-
                                operator_address defines the address of the
                                validator's operator; bech encoded in JSON.
                              type: string
                            status:
                              default: BOND_STATUS_UNSPECIFIED
                              description: >-
                                status is the validator status
                                (bonded/unbonding/unbonded).
                              enum:
                                - BOND_STATUS_UNSPECIFIED
                                - BOND_STATUS_UNBONDED
                                - BOND_STATUS_UNBONDING
                                - BOND_STATUS_BONDED
                              type: string
                            tokens:
                              description: >-
                                tokens define the delegated tokens (incl.
                                self-delegation).
                              type: string
                            unbonding_height:
                              description: >-
                                unbonding_height defines, if unbonding, the
                                height at which this validator has begun
                                unbonding.
                              format: int64
                              type: string
                            unbonding_time:
                              description: >-
                                unbonding_time defines, if unbonding, the min
                                time for the validator to complete unbonding.
                              format: date-time
                              type: string
                          type: object
                        type: array
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: HistoricalInfo queries the historical info for given height.
      tags:
        - cosmos/staking/v1beta1
  /cosmos/staking/v1beta1/params:
    get:
      operationId: Params
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryParamsResponse is response type for the Query/Params RPC
                  method.
                properties:
                  params:
                    description: params holds all the parameters of this module.
                    properties:
                      bond_denom:
                        description: bond_denom defines the bondable coin denomination.
                        type: string
                      historical_entries:
                        description: >-
                          historical_entries is the number of historical entries
                          to persist.
                        format: int64
                        type: integer
                      max_entries:
                        description: >-
                          max_entries is the max entries for either unbonding
                          delegation or redelegation (per pair/trio).
                        format: int64
                        type: integer
                      max_validators:
                        description: max_validators is the maximum number of validators.
                        format: int64
                        type: integer
                      unbonding_time:
                        description: unbonding_time is the time duration of unbonding.
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Parameters queries the staking parameters.
      tags:
        - cosmos/staking/v1beta1
  /cosmos/staking/v1beta1/pool:
    get:
      operationId: Pool
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryPoolResponse is response type for the Query/Pool RPC
                  method.
                properties:
                  pool:
                    description: pool defines the pool info.
                    properties:
                      bonded_tokens:
                        type: string
                      not_bonded_tokens:
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Pool queries the pool info.
      tags:
        - cosmos/staking/v1beta1
  /cosmos/staking/v1beta1/validators:
    get:
      operationId: Validators
      parameters:
        - description: status enables to query for validators matching a given status.
          in: query
          name: status
          required: false
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                  validators:
                    description: validators contains all the queried validators.
                    items:
                      description: >-
                        Validator defines a validator, together with the total
                        amount of the

                        Validator's bond shares and their exchange rate to
                        coins. Slashing results in

                        a decrease in the exchange rate, allowing correct
                        calculation of future

                        undelegations without iterating over delegators. When
                        coins are delegated to

                        this validator, the validator is credited with a
                        delegation whose number of

                        bond shares is based on the amount of coins delegated
                        divided by the current

                        exchange rate. Voting power can be calculated as total
                        bonded shares

                        multiplied by exchange rate.
                      properties:
                        commission:
                          description: commission defines the commission parameters.
                          properties:
                            commission_rates:
                              description: >-
                                commission_rates defines the initial commission
                                rates to be used for creating a validator.
                              properties:
                                max_change_rate:
                                  description: >-
                                    max_change_rate defines the maximum daily
                                    increase of the validator commission, as a
                                    fraction.
                                  type: string
                                max_rate:
                                  description: >-
                                    max_rate defines the maximum commission rate
                                    which validator can ever charge, as a
                                    fraction.
                                  type: string
                                rate:
                                  description: >-
                                    rate is the commission rate charged to
                                    delegators, as a fraction.
                                  type: string
                              type: object
                            update_time:
                              description: >-
                                update_time is the last time the commission rate
                                was changed.
                              format: date-time
                              type: string
                          type: object
                        consensus_pubkey:
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized
                            message.


                            Protobuf library provides support to pack/unpack Any
                            values in the form

                            of utility functions or additional generated methods
                            of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := anypb.New(foo)
                                 if err != nil {
                                   ...
                                 }
                                 ...
                                 foo := &pb.Foo{}
                                 if err := any.UnmarshalTo(foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will
                            by default use

                            'type.googleapis.com/full.type.name' as the type URL
                            and the unpack

                            methods only use the fully qualified type name after
                            the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z"
                            will yield type

                            name "y.z".



                            JSON

                            ====

                            The JSON representation of an `Any` value uses the
                            regular

                            representation of the deserialized, embedded
                            message, with an

                            additional field `@type` which contains the type
                            URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a
                            custom JSON

                            representation, that representation will be embedded
                            adding a field

                            `value` which holds the custom JSON in addition to
                            the `@type`

                            field. Example (for message
                            [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                          properties:
                            type_url:
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must
                                contain at least

                                one "/" character. The last segment of the URL's
                                path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name
                                should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the
                                binary all types that they

                                expect it to use in the context of Any. However,
                                for URLs which use the

                                scheme `http`, `https`, or no scheme, one can
                                optionally set up a type

                                server that maps type URLs to message
                                definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a
                                [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup
                                results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently
                                available in the official

                                protobuf release, and it is not used for type
                                URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty
                                scheme) might be

                                used with implementation specific semantics.
                              type: string
                            value:
                              description: >-
                                Must be a valid serialized protocol buffer of
                                the above specified type.
                              format: byte
                              type: string
                          type: object
                        delegator_shares:
                          description: >-
                            delegator_shares defines total shares issued to a
                            validator's delegators.
                          type: string
                        description:
                          description: >-
                            description defines the description terms for the
                            validator.
                          properties:
                            details:
                              description: details define other optional details.
                              type: string
                            identity:
                              description: >-
                                identity defines an optional identity signature
                                (ex. UPort or Keybase).
                              type: string
                            moniker:
                              description: >-
                                moniker defines a human-readable name for the
                                validator.
                              type: string
                            security_contact:
                              description: >-
                                security_contact defines an optional email for
                                security contact.
                              type: string
                            website:
                              description: website defines an optional website link.
                              type: string
                          type: object
                        jailed:
                          description: >-
                            jailed defined whether the validator has been jailed
                            from bonded status or not.
                          type: boolean
                        min_self_delegation:
                          description: >-
                            min_self_delegation is the validator's self declared
                            minimum self delegation.
                          type: string
                        operator_address:
                          description: >-
                            operator_address defines the address of the
                            validator's operator; bech encoded in JSON.
                          type: string
                        status:
                          default: BOND_STATUS_UNSPECIFIED
                          description: >-
                            status is the validator status
                            (bonded/unbonding/unbonded).
                          enum:
                            - BOND_STATUS_UNSPECIFIED
                            - BOND_STATUS_UNBONDED
                            - BOND_STATUS_UNBONDING
                            - BOND_STATUS_BONDED
                          type: string
                        tokens:
                          description: >-
                            tokens define the delegated tokens (incl.
                            self-delegation).
                          type: string
                        unbonding_height:
                          description: >-
                            unbonding_height defines, if unbonding, the height
                            at which this validator has begun unbonding.
                          format: int64
                          type: string
                        unbonding_time:
                          description: >-
                            unbonding_time defines, if unbonding, the min time
                            for the validator to complete unbonding.
                          format: date-time
                          type: string
                      type: object
                    type: array
                title: >-
                  QueryValidatorsResponse is response type for the
                  Query/Validators RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Validators queries all validators that match the given status.
      tags:
        - cosmos/staking/v1beta1
  /cosmos/staking/v1beta1/validators/{validator_addr}:
    get:
      operationId: Validator
      parameters:
        - description: validator_addr defines the validator address to query for.
          in: path
          name: validator_addr
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  validator:
                    description: >-
                      Validator defines a validator, together with the total
                      amount of the

                      Validator's bond shares and their exchange rate to coins.
                      Slashing results in

                      a decrease in the exchange rate, allowing correct
                      calculation of future

                      undelegations without iterating over delegators. When
                      coins are delegated to

                      this validator, the validator is credited with a
                      delegation whose number of

                      bond shares is based on the amount of coins delegated
                      divided by the current

                      exchange rate. Voting power can be calculated as total
                      bonded shares

                      multiplied by exchange rate.
                    properties:
                      commission:
                        description: commission defines the commission parameters.
                        properties:
                          commission_rates:
                            description: >-
                              commission_rates defines the initial commission
                              rates to be used for creating a validator.
                            properties:
                              max_change_rate:
                                description: >-
                                  max_change_rate defines the maximum daily
                                  increase of the validator commission, as a
                                  fraction.
                                type: string
                              max_rate:
                                description: >-
                                  max_rate defines the maximum commission rate
                                  which validator can ever charge, as a
                                  fraction.
                                type: string
                              rate:
                                description: >-
                                  rate is the commission rate charged to
                                  delegators, as a fraction.
                                type: string
                            type: object
                          update_time:
                            description: >-
                              update_time is the last time the commission rate
                              was changed.
                            format: date-time
                            type: string
                        type: object
                      consensus_pubkey:
                        description: >-
                          `Any` contains an arbitrary serialized protocol buffer
                          message along with a

                          URL that describes the type of the serialized message.


                          Protobuf library provides support to pack/unpack Any
                          values in the form

                          of utility functions or additional generated methods
                          of the Any type.


                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }

                           Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                           Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := anypb.New(foo)
                               if err != nil {
                                 ...
                               }
                               ...
                               foo := &pb.Foo{}
                               if err := any.UnmarshalTo(foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by
                          default use

                          'type.googleapis.com/full.type.name' as the type URL
                          and the unpack

                          methods only use the fully qualified type name after
                          the last '/'

                          in the type URL, for example "foo.bar.com/x/y.z" will
                          yield type

                          name "y.z".



                          JSON

                          ====

                          The JSON representation of an `Any` value uses the
                          regular

                          representation of the deserialized, embedded message,
                          with an

                          additional field `@type` which contains the type URL.
                          Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a
                          custom JSON

                          representation, that representation will be embedded
                          adding a field

                          `value` which holds the custom JSON in addition to the
                          `@type`

                          field. Example (for message
                          [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                        properties:
                          type_url:
                            description: >-
                              A URL/resource name that uniquely identifies the
                              type of the serialized

                              protocol buffer message. This string must contain
                              at least

                              one "/" character. The last segment of the URL's
                              path must represent

                              the fully qualified name of the type (as in

                              `path/google.protobuf.Duration`). The name should
                              be in a canonical form

                              (e.g., leading "." is not accepted).


                              In practice, teams usually precompile into the
                              binary all types that they

                              expect it to use in the context of Any. However,
                              for URLs which use the

                              scheme `http`, `https`, or no scheme, one can
                              optionally set up a type

                              server that maps type URLs to message definitions
                              as follows:


                              * If no scheme is provided, `https` is assumed.

                              * An HTTP GET on the URL must yield a
                              [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results
                              based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently
                              available in the official

                              protobuf release, and it is not used for type URLs
                              beginning with

                              type.googleapis.com.


                              Schemes other than `http`, `https` (or the empty
                              scheme) might be

                              used with implementation specific semantics.
                            type: string
                          value:
                            description: >-
                              Must be a valid serialized protocol buffer of the
                              above specified type.
                            format: byte
                            type: string
                        type: object
                      delegator_shares:
                        description: >-
                          delegator_shares defines total shares issued to a
                          validator's delegators.
                        type: string
                      description:
                        description: >-
                          description defines the description terms for the
                          validator.
                        properties:
                          details:
                            description: details define other optional details.
                            type: string
                          identity:
                            description: >-
                              identity defines an optional identity signature
                              (ex. UPort or Keybase).
                            type: string
                          moniker:
                            description: >-
                              moniker defines a human-readable name for the
                              validator.
                            type: string
                          security_contact:
                            description: >-
                              security_contact defines an optional email for
                              security contact.
                            type: string
                          website:
                            description: website defines an optional website link.
                            type: string
                        type: object
                      jailed:
                        description: >-
                          jailed defined whether the validator has been jailed
                          from bonded status or not.
                        type: boolean
                      min_self_delegation:
                        description: >-
                          min_self_delegation is the validator's self declared
                          minimum self delegation.
                        type: string
                      operator_address:
                        description: >-
                          operator_address defines the address of the
                          validator's operator; bech encoded in JSON.
                        type: string
                      status:
                        default: BOND_STATUS_UNSPECIFIED
                        description: >-
                          status is the validator status
                          (bonded/unbonding/unbonded).
                        enum:
                          - BOND_STATUS_UNSPECIFIED
                          - BOND_STATUS_UNBONDED
                          - BOND_STATUS_UNBONDING
                          - BOND_STATUS_BONDED
                        type: string
                      tokens:
                        description: >-
                          tokens define the delegated tokens (incl.
                          self-delegation).
                        type: string
                      unbonding_height:
                        description: >-
                          unbonding_height defines, if unbonding, the height at
                          which this validator has begun unbonding.
                        format: int64
                        type: string
                      unbonding_time:
                        description: >-
                          unbonding_time defines, if unbonding, the min time for
                          the validator to complete unbonding.
                        format: date-time
                        type: string
                    type: object
                title: >-
                  QueryValidatorResponse is response type for the
                  Query/Validator RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Validator queries validator info for given validator address.
      tags:
        - cosmos/staking/v1beta1
  /cosmos/staking/v1beta1/validators/{validator_addr}/delegations:
    get:
      operationId: ValidatorDelegations
      parameters:
        - description: validator_addr defines the validator address to query for.
          in: path
          name: validator_addr
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  delegation_responses:
                    items:
                      description: >-
                        DelegationResponse is equivalent to Delegation except
                        that it contains a

                        balance in addition to shares which is more suitable for
                        client responses.
                      properties:
                        balance:
                          description: >-
                            Coin defines a token with a denomination and an
                            amount.


                            NOTE: The amount field is an Int which implements
                            the custom method

                            signatures required by gogoproto.
                          properties:
                            amount:
                              type: string
                            denom:
                              type: string
                          type: object
                        delegation:
                          description: >-
                            Delegation represents the bond with tokens held by
                            an account. It is

                            owned by one delegator, and is associated with the
                            voting power of one

                            validator.
                          properties:
                            delegator_address:
                              description: >-
                                delegator_address is the bech32-encoded address
                                of the delegator.
                              type: string
                            shares:
                              description: shares define the delegation shares received.
                              type: string
                            validator_address:
                              description: >-
                                validator_address is the bech32-encoded address
                                of the validator.
                              type: string
                          type: object
                      type: object
                    type: array
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                title: |-
                  QueryValidatorDelegationsResponse is response type for the
                  Query/ValidatorDelegations RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: ValidatorDelegations queries delegate info for given validator.
      tags:
        - cosmos/staking/v1beta1
  /cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}:
    get:
      operationId: Delegation
      parameters:
        - description: validator_addr defines the validator address to query for.
          in: path
          name: validator_addr
          required: true
          schema:
            type: string
        - description: delegator_addr defines the delegator address to query for.
          in: path
          name: delegator_addr
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryDelegationResponse is response type for the
                  Query/Delegation RPC method.
                properties:
                  delegation_response:
                    description: >-
                      DelegationResponse is equivalent to Delegation except that
                      it contains a

                      balance in addition to shares which is more suitable for
                      client responses.
                    properties:
                      balance:
                        description: >-
                          Coin defines a token with a denomination and an
                          amount.


                          NOTE: The amount field is an Int which implements the
                          custom method

                          signatures required by gogoproto.
                        properties:
                          amount:
                            type: string
                          denom:
                            type: string
                        type: object
                      delegation:
                        description: >-
                          Delegation represents the bond with tokens held by an
                          account. It is

                          owned by one delegator, and is associated with the
                          voting power of one

                          validator.
                        properties:
                          delegator_address:
                            description: >-
                              delegator_address is the bech32-encoded address of
                              the delegator.
                            type: string
                          shares:
                            description: shares define the delegation shares received.
                            type: string
                          validator_address:
                            description: >-
                              validator_address is the bech32-encoded address of
                              the validator.
                            type: string
                        type: object
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Delegation queries delegate info for given validator delegator pair.
      tags:
        - cosmos/staking/v1beta1
  /cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}/unbonding_delegation:
    get:
      operationId: UnbondingDelegation
      parameters:
        - description: validator_addr defines the validator address to query for.
          in: path
          name: validator_addr
          required: true
          schema:
            type: string
        - description: delegator_addr defines the delegator address to query for.
          in: path
          name: delegator_addr
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryDelegationResponse is response type for the
                  Query/UnbondingDelegation

                  RPC method.
                properties:
                  unbond:
                    description: >-
                      UnbondingDelegation stores all of a single delegator's
                      unbonding bonds

                      for a single validator in an time-ordered list.
                    properties:
                      delegator_address:
                        description: >-
                          delegator_address is the bech32-encoded address of the
                          delegator.
                        type: string
                      entries:
                        description: entries are the unbonding delegation entries.
                        items:
                          description: >-
                            UnbondingDelegationEntry defines an unbonding object
                            with relevant metadata.
                          properties:
                            balance:
                              description: >-
                                balance defines the tokens to receive at
                                completion.
                              type: string
                            completion_time:
                              description: >-
                                completion_time is the unix time for unbonding
                                completion.
                              format: date-time
                              type: string
                            creation_height:
                              description: >-
                                creation_height is the height which the
                                unbonding took place.
                              format: int64
                              type: string
                            initial_balance:
                              description: >-
                                initial_balance defines the tokens initially
                                scheduled to receive at completion.
                              type: string
                          type: object
                        type: array
                      validator_address:
                        description: >-
                          validator_address is the bech32-encoded address of the
                          validator.
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: |-
        UnbondingDelegation queries unbonding info for given validator delegator
        pair.
      tags:
        - cosmos/staking/v1beta1
  /cosmos/staking/v1beta1/validators/{validator_addr}/unbonding_delegations:
    get:
      operationId: ValidatorUnbondingDelegations
      parameters:
        - description: validator_addr defines the validator address to query for.
          in: path
          name: validator_addr
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryValidatorUnbondingDelegationsResponse is response type
                  for the

                  Query/ValidatorUnbondingDelegations RPC method.
                properties:
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                  unbonding_responses:
                    items:
                      description: >-
                        UnbondingDelegation stores all of a single delegator's
                        unbonding bonds

                        for a single validator in an time-ordered list.
                      properties:
                        delegator_address:
                          description: >-
                            delegator_address is the bech32-encoded address of
                            the delegator.
                          type: string
                        entries:
                          description: entries are the unbonding delegation entries.
                          items:
                            description: >-
                              UnbondingDelegationEntry defines an unbonding
                              object with relevant metadata.
                            properties:
                              balance:
                                description: >-
                                  balance defines the tokens to receive at
                                  completion.
                                type: string
                              completion_time:
                                description: >-
                                  completion_time is the unix time for unbonding
                                  completion.
                                format: date-time
                                type: string
                              creation_height:
                                description: >-
                                  creation_height is the height which the
                                  unbonding took place.
                                format: int64
                                type: string
                              initial_balance:
                                description: >-
                                  initial_balance defines the tokens initially
                                  scheduled to receive at completion.
                                type: string
                            type: object
                          type: array
                        validator_address:
                          description: >-
                            validator_address is the bech32-encoded address of
                            the validator.
                          type: string
                      type: object
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        ValidatorUnbondingDelegations queries unbonding delegations of a
        validator.
      tags:
        - cosmos/staking/v1beta1
  /cosmos/tx/v1beta1/simulate:
    post:
      operationId: Simulate
      requestBody:
        content:
          application/json:
            schema:
              description: |-
                SimulateRequest is the request type for the Service.Simulate
                RPC method.
              properties:
                tx:
                  description: |-
                    tx is the transaction to simulate.
                    Deprecated. Send raw tx bytes instead.
                  properties:
                    auth_info:
                      description: >-
                        AuthInfo describes the fee and signer modes that are
                        used to sign a

                        transaction.
                      properties:
                        fee:
                          description: >-
                            Fee is the fee and gas limit for the transaction.
                            The first signer is the

                            primary signer and the one which pays the fee. The
                            fee can be calculated

                            based on the cost of evaluating the body and doing
                            signature verification

                            of the signers. This can be estimated via
                            simulation.
                          properties:
                            amount:
                              items:
                                description: >-
                                  Coin defines a token with a denomination and
                                  an amount.


                                  NOTE: The amount field is an Int which
                                  implements the custom method

                                  signatures required by gogoproto.
                                properties:
                                  amount:
                                    type: string
                                  denom:
                                    type: string
                                type: object
                              title: >-
                                amount is the amount of coins to be paid as a
                                fee
                              type: array
                            gas_limit:
                              format: uint64
                              title: >-
                                gas_limit is the maximum gas that can be used in
                                transaction processing

                                before an out of gas error occurs
                              type: string
                            granter:
                              title: >-
                                if set, the fee payer (either the first signer
                                or the value of the payer field) requests that a
                                fee grant be used

                                to pay fees instead of the fee payer's own
                                balance. If an appropriate fee grant does not
                                exist or the chain does

                                not support fee grants, this will fail
                              type: string
                            payer:
                              description: >-
                                if unset, the first signer is responsible for
                                paying the fees. If set, the specified account
                                must pay the fees.

                                the payer must be a tx signer (and thus have
                                signed this field in AuthInfo).

                                setting this field does *not* change the
                                ordering of required signers for the
                                transaction.
                              type: string
                          type: object
                        signer_infos:
                          description: >-
                            signer_infos defines the signing modes for the
                            required signers. The number

                            and order of elements must match the required
                            signers from TxBody's

                            messages. The first element is the primary signer
                            and the one which pays

                            the fee.
                          items:
                            description: >-
                              SignerInfo describes the public key and signing
                              mode of a single top-level

                              signer.
                            properties:
                              mode_info:
                                description: >-
                                  ModeInfo describes the signing mode of a
                                  single or nested multisig signer.
                                properties:
                                  multi:
                                    properties:
                                      bitarray:
                                        description: >-
                                          CompactBitArray is an implementation of
                                          a space efficient bit array.

                                          This is used to ensure that the encoded
                                          data takes up a minimal amount of

                                          space after proto encoding.

                                          This is not thread safe, and is not
                                          intended for concurrent usage.
                                        properties:
                                          elems:
                                            format: byte
                                            type: string
                                          extra_bits_stored:
                                            format: int64
                                            type: integer
                                        title: >-
                                          bitarray specifies which keys within the
                                          multisig are signing
                                        type: object
                                      mode_infos:
                                        items: {}
                                        title: >-
                                          mode_infos is the corresponding modes of
                                          the signers of the multisig

                                          which could include nested multisig
                                          public keys
                                        type: array
                                    title: multi represents a nested multisig signer
                                    type: object
                                  single:
                                    properties:
                                      mode:
                                        default: SIGN_MODE_UNSPECIFIED
                                        description: >-
                                          SignMode represents a signing mode with
                                          its own security guarantees.

                                           - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
                                          rejected
                                           - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
                                          verified with raw bytes from Tx
                                           - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
                                          human-readable textual representation on
                                          top of the binary representation

                                          from SIGN_MODE_DIRECT
                                           - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
                                          Amino JSON and will be removed in the
                                          future
                                           - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
                                          SDK. Ref:
                                          https://eips.ethereum.org/EIPS/eip-191


                                          Currently, SIGN_MODE_EIP_191 is
                                          registered as a SignMode enum variant,

                                          but is not implemented on the SDK by
                                          default. To enable EIP-191, you need

                                          to pass a custom `TxConfig` that has an
                                          implementation of

                                          `SignModeHandler` for EIP-191. The SDK
                                          may decide to fully support

                                          EIP-191 in the future.


                                          Since: cosmos-sdk 0.45.2
                                        enum:
                                          - SIGN_MODE_UNSPECIFIED
                                          - SIGN_MODE_DIRECT
                                          - SIGN_MODE_TEXTUAL
                                          - SIGN_MODE_LEGACY_AMINO_JSON
                                          - SIGN_MODE_EIP_191
                                        title: >-
                                          mode is the signing mode of the single
                                          signer
                                        type: string
                                    title: single represents a single signer
                                    type: object
                                title: >-
                                  mode_info describes the signing mode of the
                                  signer and is a nested

                                  structure to support nested multisig pubkey's
                                type: object
                              public_key:
                                description: >-
                                  `Any` contains an arbitrary serialized
                                  protocol buffer message along with a

                                  URL that describes the type of the serialized
                                  message.


                                  Protobuf library provides support to
                                  pack/unpack Any values in the form

                                  of utility functions or additional generated
                                  methods of the Any type.


                                  Example 1: Pack and unpack a message in C++.

                                      Foo foo = ...;
                                      Any any;
                                      any.PackFrom(foo);
                                      ...
                                      if (any.UnpackTo(&foo)) {
                                        ...
                                      }

                                  Example 2: Pack and unpack a message in Java.

                                      Foo foo = ...;
                                      Any any = Any.pack(foo);
                                      ...
                                      if (any.is(Foo.class)) {
                                        foo = any.unpack(Foo.class);
                                      }

                                   Example 3: Pack and unpack a message in Python.

                                      foo = Foo(...)
                                      any = Any()
                                      any.Pack(foo)
                                      ...
                                      if any.Is(Foo.DESCRIPTOR):
                                        any.Unpack(foo)
                                        ...

                                   Example 4: Pack and unpack a message in Go

                                       foo := &pb.Foo{...}
                                       any, err := anypb.New(foo)
                                       if err != nil {
                                         ...
                                       }
                                       ...
                                       foo := &pb.Foo{}
                                       if err := any.UnmarshalTo(foo); err != nil {
                                         ...
                                       }

                                  The pack methods provided by protobuf library
                                  will by default use

                                  'type.googleapis.com/full.type.name' as the
                                  type URL and the unpack

                                  methods only use the fully qualified type name
                                  after the last '/'

                                  in the type URL, for example
                                  "foo.bar.com/x/y.z" will yield type

                                  name "y.z".



                                  JSON

                                  ====

                                  The JSON representation of an `Any` value uses
                                  the regular

                                  representation of the deserialized, embedded
                                  message, with an

                                  additional field `@type` which contains the
                                  type URL. Example:

                                      package google.profile;
                                      message Person {
                                        string first_name = 1;
                                        string last_name = 2;
                                      }

                                      {
                                        "@type": "type.googleapis.com/google.profile.Person",
                                        "firstName": <string>,
                                        "lastName": <string>
                                      }

                                  If the embedded message type is well-known and
                                  has a custom JSON

                                  representation, that representation will be
                                  embedded adding a field

                                  `value` which holds the custom JSON in
                                  addition to the `@type`

                                  field. Example (for message
                                  [google.protobuf.Duration][]):

                                      {
                                        "@type": "type.googleapis.com/google.protobuf.Duration",
                                        "value": "1.212s"
                                      }
                                properties:
                                  type_url:
                                    description: >-
                                      A URL/resource name that uniquely
                                      identifies the type of the serialized

                                      protocol buffer message. This string must
                                      contain at least

                                      one "/" character. The last segment of the
                                      URL's path must represent

                                      the fully qualified name of the type (as
                                      in

                                      `path/google.protobuf.Duration`). The name
                                      should be in a canonical form

                                      (e.g., leading "." is not accepted).


                                      In practice, teams usually precompile into
                                      the binary all types that they

                                      expect it to use in the context of Any.
                                      However, for URLs which use the

                                      scheme `http`, `https`, or no scheme, one
                                      can optionally set up a type

                                      server that maps type URLs to message
                                      definitions as follows:


                                      * If no scheme is provided, `https` is
                                      assumed.

                                      * An HTTP GET on the URL must yield a
                                      [google.protobuf.Type][]
                                        value in binary format, or produce an error.
                                      * Applications are allowed to cache lookup
                                      results based on the
                                        URL, or have them precompiled into a binary to avoid any
                                        lookup. Therefore, binary compatibility needs to be preserved
                                        on changes to types. (Use versioned type names to manage
                                        breaking changes.)

                                      Note: this functionality is not currently
                                      available in the official

                                      protobuf release, and it is not used for
                                      type URLs beginning with

                                      type.googleapis.com.


                                      Schemes other than `http`, `https` (or the
                                      empty scheme) might be

                                      used with implementation specific
                                      semantics.
                                    type: string
                                  value:
                                    description: >-
                                      Must be a valid serialized protocol buffer
                                      of the above specified type.
                                    format: byte
                                    type: string
                                type: object
                              sequence:
                                description: >-
                                  sequence is the sequence of the account, which
                                  describes the

                                  number of committed transactions signed by a
                                  given address. It is used to

                                  prevent replay attacks.
                                format: uint64
                                type: string
                            type: object
                          type: array
                      title: >-
                        auth_info is the authorization related content of the
                        transaction,

                        specifically signers, signer modes and fee
                      type: object
                    body:
                      description: >-
                        TxBody is the body of a transaction that all signers
                        sign over.
                      properties:
                        extension_options:
                          items:
                            description: >-
                              `Any` contains an arbitrary serialized protocol
                              buffer message along with a

                              URL that describes the type of the serialized
                              message.


                              Protobuf library provides support to pack/unpack
                              Any values in the form

                              of utility functions or additional generated
                              methods of the Any type.


                              Example 1: Pack and unpack a message in C++.

                                  Foo foo = ...;
                                  Any any;
                                  any.PackFrom(foo);
                                  ...
                                  if (any.UnpackTo(&foo)) {
                                    ...
                                  }

                              Example 2: Pack and unpack a message in Java.

                                  Foo foo = ...;
                                  Any any = Any.pack(foo);
                                  ...
                                  if (any.is(Foo.class)) {
                                    foo = any.unpack(Foo.class);
                                  }

                               Example 3: Pack and unpack a message in Python.

                                  foo = Foo(...)
                                  any = Any()
                                  any.Pack(foo)
                                  ...
                                  if any.Is(Foo.DESCRIPTOR):
                                    any.Unpack(foo)
                                    ...

                               Example 4: Pack and unpack a message in Go

                                   foo := &pb.Foo{...}
                                   any, err := anypb.New(foo)
                                   if err != nil {
                                     ...
                                   }
                                   ...
                                   foo := &pb.Foo{}
                                   if err := any.UnmarshalTo(foo); err != nil {
                                     ...
                                   }

                              The pack methods provided by protobuf library will
                              by default use

                              'type.googleapis.com/full.type.name' as the type
                              URL and the unpack

                              methods only use the fully qualified type name
                              after the last '/'

                              in the type URL, for example "foo.bar.com/x/y.z"
                              will yield type

                              name "y.z".



                              JSON

                              ====

                              The JSON representation of an `Any` value uses the
                              regular

                              representation of the deserialized, embedded
                              message, with an

                              additional field `@type` which contains the type
                              URL. Example:

                                  package google.profile;
                                  message Person {
                                    string first_name = 1;
                                    string last_name = 2;
                                  }

                                  {
                                    "@type": "type.googleapis.com/google.profile.Person",
                                    "firstName": <string>,
                                    "lastName": <string>
                                  }

                              If the embedded message type is well-known and has
                              a custom JSON

                              representation, that representation will be
                              embedded adding a field

                              `value` which holds the custom JSON in addition to
                              the `@type`

                              field. Example (for message
                              [google.protobuf.Duration][]):

                                  {
                                    "@type": "type.googleapis.com/google.protobuf.Duration",
                                    "value": "1.212s"
                                  }
                            properties:
                              type_url:
                                description: >-
                                  A URL/resource name that uniquely identifies
                                  the type of the serialized

                                  protocol buffer message. This string must
                                  contain at least

                                  one "/" character. The last segment of the
                                  URL's path must represent

                                  the fully qualified name of the type (as in

                                  `path/google.protobuf.Duration`). The name
                                  should be in a canonical form

                                  (e.g., leading "." is not accepted).


                                  In practice, teams usually precompile into the
                                  binary all types that they

                                  expect it to use in the context of Any.
                                  However, for URLs which use the

                                  scheme `http`, `https`, or no scheme, one can
                                  optionally set up a type

                                  server that maps type URLs to message
                                  definitions as follows:


                                  * If no scheme is provided, `https` is
                                  assumed.

                                  * An HTTP GET on the URL must yield a
                                  [google.protobuf.Type][]
                                    value in binary format, or produce an error.
                                  * Applications are allowed to cache lookup
                                  results based on the
                                    URL, or have them precompiled into a binary to avoid any
                                    lookup. Therefore, binary compatibility needs to be preserved
                                    on changes to types. (Use versioned type names to manage
                                    breaking changes.)

                                  Note: this functionality is not currently
                                  available in the official

                                  protobuf release, and it is not used for type
                                  URLs beginning with

                                  type.googleapis.com.


                                  Schemes other than `http`, `https` (or the
                                  empty scheme) might be

                                  used with implementation specific semantics.
                                type: string
                              value:
                                description: >-
                                  Must be a valid serialized protocol buffer of
                                  the above specified type.
                                format: byte
                                type: string
                            type: object
                          title: >-
                            extension_options are arbitrary options that can be
                            added by chains

                            when the default options are not sufficient. If any
                            of these are present

                            and can't be handled, the transaction will be
                            rejected
                          type: array
                        memo:
                          description: >-
                            memo is any arbitrary note/comment to be added to
                            the transaction.

                            WARNING: in clients, any publicly exposed text
                            should not be called memo,

                            but should be called `note` instead (see
                            https://github.com/cosmos/cosmos-sdk/issues/9122).
                          type: string
                        messages:
                          description: >-
                            messages is a list of messages to be executed. The
                            required signers of

                            those messages define the number and order of
                            elements in AuthInfo's

                            signer_infos and Tx's signatures. Each required
                            signer address is added to

                            the list only the first time it occurs.

                            By convention, the first required signer (usually
                            from the first message)

                            is referred to as the primary signer and pays the
                            fee for the whole

                            transaction.
                          items:
                            description: >-
                              `Any` contains an arbitrary serialized protocol
                              buffer message along with a

                              URL that describes the type of the serialized
                              message.


                              Protobuf library provides support to pack/unpack
                              Any values in the form

                              of utility functions or additional generated
                              methods of the Any type.


                              Example 1: Pack and unpack a message in C++.

                                  Foo foo = ...;
                                  Any any;
                                  any.PackFrom(foo);
                                  ...
                                  if (any.UnpackTo(&foo)) {
                                    ...
                                  }

                              Example 2: Pack and unpack a message in Java.

                                  Foo foo = ...;
                                  Any any = Any.pack(foo);
                                  ...
                                  if (any.is(Foo.class)) {
                                    foo = any.unpack(Foo.class);
                                  }

                               Example 3: Pack and unpack a message in Python.

                                  foo = Foo(...)
                                  any = Any()
                                  any.Pack(foo)
                                  ...
                                  if any.Is(Foo.DESCRIPTOR):
                                    any.Unpack(foo)
                                    ...

                               Example 4: Pack and unpack a message in Go

                                   foo := &pb.Foo{...}
                                   any, err := anypb.New(foo)
                                   if err != nil {
                                     ...
                                   }
                                   ...
                                   foo := &pb.Foo{}
                                   if err := any.UnmarshalTo(foo); err != nil {
                                     ...
                                   }

                              The pack methods provided by protobuf library will
                              by default use

                              'type.googleapis.com/full.type.name' as the type
                              URL and the unpack

                              methods only use the fully qualified type name
                              after the last '/'

                              in the type URL, for example "foo.bar.com/x/y.z"
                              will yield type

                              name "y.z".



                              JSON

                              ====

                              The JSON representation of an `Any` value uses the
                              regular

                              representation of the deserialized, embedded
                              message, with an

                              additional field `@type` which contains the type
                              URL. Example:

                                  package google.profile;
                                  message Person {
                                    string first_name = 1;
                                    string last_name = 2;
                                  }

                                  {
                                    "@type": "type.googleapis.com/google.profile.Person",
                                    "firstName": <string>,
                                    "lastName": <string>
                                  }

                              If the embedded message type is well-known and has
                              a custom JSON

                              representation, that representation will be
                              embedded adding a field

                              `value` which holds the custom JSON in addition to
                              the `@type`

                              field. Example (for message
                              [google.protobuf.Duration][]):

                                  {
                                    "@type": "type.googleapis.com/google.protobuf.Duration",
                                    "value": "1.212s"
                                  }
                            properties:
                              type_url:
                                description: >-
                                  A URL/resource name that uniquely identifies
                                  the type of the serialized

                                  protocol buffer message. This string must
                                  contain at least

                                  one "/" character. The last segment of the
                                  URL's path must represent

                                  the fully qualified name of the type (as in

                                  `path/google.protobuf.Duration`). The name
                                  should be in a canonical form

                                  (e.g., leading "." is not accepted).


                                  In practice, teams usually precompile into the
                                  binary all types that they

                                  expect it to use in the context of Any.
                                  However, for URLs which use the

                                  scheme `http`, `https`, or no scheme, one can
                                  optionally set up a type

                                  server that maps type URLs to message
                                  definitions as follows:


                                  * If no scheme is provided, `https` is
                                  assumed.

                                  * An HTTP GET on the URL must yield a
                                  [google.protobuf.Type][]
                                    value in binary format, or produce an error.
                                  * Applications are allowed to cache lookup
                                  results based on the
                                    URL, or have them precompiled into a binary to avoid any
                                    lookup. Therefore, binary compatibility needs to be preserved
                                    on changes to types. (Use versioned type names to manage
                                    breaking changes.)

                                  Note: this functionality is not currently
                                  available in the official

                                  protobuf release, and it is not used for type
                                  URLs beginning with

                                  type.googleapis.com.


                                  Schemes other than `http`, `https` (or the
                                  empty scheme) might be

                                  used with implementation specific semantics.
                                type: string
                              value:
                                description: >-
                                  Must be a valid serialized protocol buffer of
                                  the above specified type.
                                format: byte
                                type: string
                            type: object
                          type: array
                        non_critical_extension_options:
                          items:
                            description: >-
                              `Any` contains an arbitrary serialized protocol
                              buffer message along with a

                              URL that describes the type of the serialized
                              message.


                              Protobuf library provides support to pack/unpack
                              Any values in the form

                              of utility functions or additional generated
                              methods of the Any type.


                              Example 1: Pack and unpack a message in C++.

                                  Foo foo = ...;
                                  Any any;
                                  any.PackFrom(foo);
                                  ...
                                  if (any.UnpackTo(&foo)) {
                                    ...
                                  }

                              Example 2: Pack and unpack a message in Java.

                                  Foo foo = ...;
                                  Any any = Any.pack(foo);
                                  ...
                                  if (any.is(Foo.class)) {
                                    foo = any.unpack(Foo.class);
                                  }

                               Example 3: Pack and unpack a message in Python.

                                  foo = Foo(...)
                                  any = Any()
                                  any.Pack(foo)
                                  ...
                                  if any.Is(Foo.DESCRIPTOR):
                                    any.Unpack(foo)
                                    ...

                               Example 4: Pack and unpack a message in Go

                                   foo := &pb.Foo{...}
                                   any, err := anypb.New(foo)
                                   if err != nil {
                                     ...
                                   }
                                   ...
                                   foo := &pb.Foo{}
                                   if err := any.UnmarshalTo(foo); err != nil {
                                     ...
                                   }

                              The pack methods provided by protobuf library will
                              by default use

                              'type.googleapis.com/full.type.name' as the type
                              URL and the unpack

                              methods only use the fully qualified type name
                              after the last '/'

                              in the type URL, for example "foo.bar.com/x/y.z"
                              will yield type

                              name "y.z".



                              JSON

                              ====

                              The JSON representation of an `Any` value uses the
                              regular

                              representation of the deserialized, embedded
                              message, with an

                              additional field `@type` which contains the type
                              URL. Example:

                                  package google.profile;
                                  message Person {
                                    string first_name = 1;
                                    string last_name = 2;
                                  }

                                  {
                                    "@type": "type.googleapis.com/google.profile.Person",
                                    "firstName": <string>,
                                    "lastName": <string>
                                  }

                              If the embedded message type is well-known and has
                              a custom JSON

                              representation, that representation will be
                              embedded adding a field

                              `value` which holds the custom JSON in addition to
                              the `@type`

                              field. Example (for message
                              [google.protobuf.Duration][]):

                                  {
                                    "@type": "type.googleapis.com/google.protobuf.Duration",
                                    "value": "1.212s"
                                  }
                            properties:
                              type_url:
                                description: >-
                                  A URL/resource name that uniquely identifies
                                  the type of the serialized

                                  protocol buffer message. This string must
                                  contain at least

                                  one "/" character. The last segment of the
                                  URL's path must represent

                                  the fully qualified name of the type (as in

                                  `path/google.protobuf.Duration`). The name
                                  should be in a canonical form

                                  (e.g., leading "." is not accepted).


                                  In practice, teams usually precompile into the
                                  binary all types that they

                                  expect it to use in the context of Any.
                                  However, for URLs which use the

                                  scheme `http`, `https`, or no scheme, one can
                                  optionally set up a type

                                  server that maps type URLs to message
                                  definitions as follows:


                                  * If no scheme is provided, `https` is
                                  assumed.

                                  * An HTTP GET on the URL must yield a
                                  [google.protobuf.Type][]
                                    value in binary format, or produce an error.
                                  * Applications are allowed to cache lookup
                                  results based on the
                                    URL, or have them precompiled into a binary to avoid any
                                    lookup. Therefore, binary compatibility needs to be preserved
                                    on changes to types. (Use versioned type names to manage
                                    breaking changes.)

                                  Note: this functionality is not currently
                                  available in the official

                                  protobuf release, and it is not used for type
                                  URLs beginning with

                                  type.googleapis.com.


                                  Schemes other than `http`, `https` (or the
                                  empty scheme) might be

                                  used with implementation specific semantics.
                                type: string
                              value:
                                description: >-
                                  Must be a valid serialized protocol buffer of
                                  the above specified type.
                                format: byte
                                type: string
                            type: object
                          title: >-
                            extension_options are arbitrary options that can be
                            added by chains

                            when the default options are not sufficient. If any
                            of these are present

                            and can't be handled, they will be ignored
                          type: array
                        timeout_height:
                          format: uint64
                          title: >-
                            timeout is the block height after which this
                            transaction will not

                            be processed by the chain
                          type: string
                      title: body is the processable content of the transaction
                      type: object
                    signatures:
                      description: >-
                        signatures is a list of signatures that matches the
                        length and order of

                        AuthInfo's signer_infos to allow connecting signature
                        meta information like

                        public key and signing mode by position.
                      items:
                        format: byte
                        type: string
                      type: array
                  type: object
                tx_bytes:
                  description: |-
                    tx_bytes is the raw transaction.

                    Since: cosmos-sdk 0.43
                  format: byte
                  type: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                description: |-
                  SimulateResponse is the response type for the
                  Service.SimulateRPC method.
                properties:
                  gas_info:
                    description: >-
                      gas_info is the information about gas used in the
                      simulation.
                    properties:
                      gas_used:
                        description: GasUsed is the amount of gas actually consumed.
                        format: uint64
                        type: string
                      gas_wanted:
                        description: >-
                          GasWanted is the maximum units of work we allow this
                          tx to perform.
                        format: uint64
                        type: string
                    type: object
                  result:
                    description: result is the result of the simulation.
                    properties:
                      data:
                        description: >-
                          Data is any data returned from message or handler
                          execution. It MUST be

                          length prefixed in order to separate data from
                          multiple message executions.
                        format: byte
                        type: string
                      events:
                        description: >-
                          Events contains a slice of Event objects that were
                          emitted during message

                          or handler execution.
                        items:
                          description: >-
                            Event allows application developers to attach
                            additional information to

                            ResponseBeginBlock, ResponseEndBlock,
                            ResponseCheckTx and ResponseDeliverTx.

                            Later, transactions may be queried using these
                            events.
                          properties:
                            attributes:
                              items:
                                description: >-
                                  EventAttribute is a single key-value pair,
                                  associated with an event.
                                properties:
                                  index:
                                    type: boolean
                                  key:
                                    format: byte
                                    type: string
                                  value:
                                    format: byte
                                    type: string
                                type: object
                              type: array
                            type:
                              type: string
                          type: object
                        type: array
                      log:
                        description: >-
                          Log contains the log information from message or
                          handler execution.
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Simulate simulates executing a transaction for estimating gas usage.
      tags:
        - cosmos/tx/v1beta1
  /cosmos/tx/v1beta1/txs:
    get:
      operationId: GetTxsEvent
      parameters:
        - description: events is the list of transaction event type.
          explode: true
          in: query
          name: events
          required: false
          schema:
            items:
              type: string
            type: array
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
        - description: |2-
             - ORDER_BY_UNSPECIFIED: ORDER_BY_UNSPECIFIED specifies an unknown sorting order. OrderBy defaults to ASC in this case.
             - ORDER_BY_ASC: ORDER_BY_ASC defines ascending order
             - ORDER_BY_DESC: ORDER_BY_DESC defines descending order
          in: query
          name: order_by
          required: false
          schema:
            default: ORDER_BY_UNSPECIFIED
            enum:
              - ORDER_BY_UNSPECIFIED
              - ORDER_BY_ASC
              - ORDER_BY_DESC
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  GetTxsEventResponse is the response type for the
                  Service.TxsByEvents

                  RPC method.
                properties:
                  pagination:
                    description: pagination defines a pagination for the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                  tx_responses:
                    description: tx_responses is the list of queried TxResponses.
                    items:
                      description: >-
                        TxResponse defines a structure containing relevant tx
                        data and metadata. The

                        tags are stringified and the log is JSON decoded.
                      properties:
                        code:
                          description: Response code.
                          format: int64
                          type: integer
                        codespace:
                          title: Namespace for the Code
                          type: string
                        data:
                          description: Result bytes, if any.
                          type: string
                        events:
                          description: >-
                            Events defines all the events emitted by processing
                            a transaction. Note,

                            these events include those emitted by processing all
                            the messages and those

                            emitted from the ante handler. Whereas Logs contains
                            the events, with

                            additional metadata, emitted only by processing the
                            messages.


                            Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
                          items:
                            description: >-
                              Event allows application developers to attach
                              additional information to

                              ResponseBeginBlock, ResponseEndBlock,
                              ResponseCheckTx and ResponseDeliverTx.

                              Later, transactions may be queried using these
                              events.
                            properties:
                              attributes:
                                items:
                                  description: >-
                                    EventAttribute is a single key-value pair,
                                    associated with an event.
                                  properties:
                                    index:
                                      type: boolean
                                    key:
                                      format: byte
                                      type: string
                                    value:
                                      format: byte
                                      type: string
                                  type: object
                                type: array
                              type:
                                type: string
                            type: object
                          type: array
                        gas_used:
                          description: Amount of gas consumed by transaction.
                          format: int64
                          type: string
                        gas_wanted:
                          description: Amount of gas requested for transaction.
                          format: int64
                          type: string
                        height:
                          format: int64
                          title: The block height
                          type: string
                        info:
                          description: Additional information. May be non-deterministic.
                          type: string
                        logs:
                          description: >-
                            The output of the application's logger (typed). May
                            be non-deterministic.
                          items:
                            description: >-
                              ABCIMessageLog defines a structure containing an
                              indexed tx ABCI message log.
                            properties:
                              events:
                                description: >-
                                  Events contains a slice of Event objects that
                                  were emitted during some

                                  execution.
                                items:
                                  description: >-
                                    StringEvent defines en Event object wrapper
                                    where all the attributes

                                    contain key/value pairs that are strings
                                    instead of raw bytes.
                                  properties:
                                    attributes:
                                      items:
                                        description: >-
                                          Attribute defines an attribute wrapper
                                          where the key and value are

                                          strings instead of raw bytes.
                                        properties:
                                          key:
                                            type: string
                                          value:
                                            type: string
                                        type: object
                                      type: array
                                    type:
                                      type: string
                                  type: object
                                type: array
                              log:
                                type: string
                              msg_index:
                                format: int64
                                type: integer
                            type: object
                          type: array
                        raw_log:
                          description: >-
                            The output of the application's logger (raw string).
                            May be

                            non-deterministic.
                          type: string
                        timestamp:
                          description: >-
                            Time of the previous block. For heights > 1, it's
                            the weighted median of

                            the timestamps of the valid votes in the
                            block.LastCommit. For height == 1,

                            it's genesis time.
                          type: string
                        tx:
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized
                            message.


                            Protobuf library provides support to pack/unpack Any
                            values in the form

                            of utility functions or additional generated methods
                            of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := anypb.New(foo)
                                 if err != nil {
                                   ...
                                 }
                                 ...
                                 foo := &pb.Foo{}
                                 if err := any.UnmarshalTo(foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will
                            by default use

                            'type.googleapis.com/full.type.name' as the type URL
                            and the unpack

                            methods only use the fully qualified type name after
                            the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z"
                            will yield type

                            name "y.z".



                            JSON

                            ====

                            The JSON representation of an `Any` value uses the
                            regular

                            representation of the deserialized, embedded
                            message, with an

                            additional field `@type` which contains the type
                            URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a
                            custom JSON

                            representation, that representation will be embedded
                            adding a field

                            `value` which holds the custom JSON in addition to
                            the `@type`

                            field. Example (for message
                            [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                          properties:
                            type_url:
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must
                                contain at least

                                one "/" character. The last segment of the URL's
                                path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name
                                should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the
                                binary all types that they

                                expect it to use in the context of Any. However,
                                for URLs which use the

                                scheme `http`, `https`, or no scheme, one can
                                optionally set up a type

                                server that maps type URLs to message
                                definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a
                                [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup
                                results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently
                                available in the official

                                protobuf release, and it is not used for type
                                URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty
                                scheme) might be

                                used with implementation specific semantics.
                              type: string
                            value:
                              description: >-
                                Must be a valid serialized protocol buffer of
                                the above specified type.
                              format: byte
                              type: string
                          type: object
                        txhash:
                          description: The transaction hash.
                          type: string
                      type: object
                    type: array
                  txs:
                    description: txs is the list of queried transactions.
                    items:
                      description: >-
                        Tx is the standard type used for broadcasting
                        transactions.
                      properties:
                        auth_info:
                          description: >-
                            AuthInfo describes the fee and signer modes that are
                            used to sign a

                            transaction.
                          properties:
                            fee:
                              description: >-
                                Fee is the fee and gas limit for the
                                transaction. The first signer is the

                                primary signer and the one which pays the fee.
                                The fee can be calculated

                                based on the cost of evaluating the body and
                                doing signature verification

                                of the signers. This can be estimated via
                                simulation.
                              properties:
                                amount:
                                  items:
                                    description: >-
                                      Coin defines a token with a denomination
                                      and an amount.


                                      NOTE: The amount field is an Int which
                                      implements the custom method

                                      signatures required by gogoproto.
                                    properties:
                                      amount:
                                        type: string
                                      denom:
                                        type: string
                                    type: object
                                  title: >-
                                    amount is the amount of coins to be paid as
                                    a fee
                                  type: array
                                gas_limit:
                                  format: uint64
                                  title: >-
                                    gas_limit is the maximum gas that can be
                                    used in transaction processing

                                    before an out of gas error occurs
                                  type: string
                                granter:
                                  title: >-
                                    if set, the fee payer (either the first
                                    signer or the value of the payer field)
                                    requests that a fee grant be used

                                    to pay fees instead of the fee payer's own
                                    balance. If an appropriate fee grant does
                                    not exist or the chain does

                                    not support fee grants, this will fail
                                  type: string
                                payer:
                                  description: >-
                                    if unset, the first signer is responsible
                                    for paying the fees. If set, the specified
                                    account must pay the fees.

                                    the payer must be a tx signer (and thus have
                                    signed this field in AuthInfo).

                                    setting this field does *not* change the
                                    ordering of required signers for the
                                    transaction.
                                  type: string
                              type: object
                            signer_infos:
                              description: >-
                                signer_infos defines the signing modes for the
                                required signers. The number

                                and order of elements must match the required
                                signers from TxBody's

                                messages. The first element is the primary
                                signer and the one which pays

                                the fee.
                              items:
                                description: >-
                                  SignerInfo describes the public key and
                                  signing mode of a single top-level

                                  signer.
                                properties:
                                  mode_info:
                                    description: >-
                                      ModeInfo describes the signing mode of a
                                      single or nested multisig signer.
                                    properties:
                                      multi:
                                        properties:
                                          bitarray:
                                            description: >-
                                              CompactBitArray is an implementation of
                                              a space efficient bit array.

                                              This is used to ensure that the encoded
                                              data takes up a minimal amount of

                                              space after proto encoding.

                                              This is not thread safe, and is not
                                              intended for concurrent usage.
                                            properties:
                                              elems:
                                                format: byte
                                                type: string
                                              extra_bits_stored:
                                                format: int64
                                                type: integer
                                            title: >-
                                              bitarray specifies which keys within the
                                              multisig are signing
                                            type: object
                                          mode_infos:
                                            items: {}
                                            title: >-
                                              mode_infos is the corresponding modes of
                                              the signers of the multisig

                                              which could include nested multisig
                                              public keys
                                            type: array
                                        title: >-
                                          multi represents a nested multisig
                                          signer
                                        type: object
                                      single:
                                        properties:
                                          mode:
                                            default: SIGN_MODE_UNSPECIFIED
                                            description: >-
                                              SignMode represents a signing mode with
                                              its own security guarantees.

                                               - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
                                              rejected
                                               - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
                                              verified with raw bytes from Tx
                                               - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
                                              human-readable textual representation on
                                              top of the binary representation

                                              from SIGN_MODE_DIRECT
                                               - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
                                              Amino JSON and will be removed in the
                                              future
                                               - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
                                              SDK. Ref:
                                              https://eips.ethereum.org/EIPS/eip-191


                                              Currently, SIGN_MODE_EIP_191 is
                                              registered as a SignMode enum variant,

                                              but is not implemented on the SDK by
                                              default. To enable EIP-191, you need

                                              to pass a custom `TxConfig` that has an
                                              implementation of

                                              `SignModeHandler` for EIP-191. The SDK
                                              may decide to fully support

                                              EIP-191 in the future.


                                              Since: cosmos-sdk 0.45.2
                                            enum:
                                              - SIGN_MODE_UNSPECIFIED
                                              - SIGN_MODE_DIRECT
                                              - SIGN_MODE_TEXTUAL
                                              - SIGN_MODE_LEGACY_AMINO_JSON
                                              - SIGN_MODE_EIP_191
                                            title: >-
                                              mode is the signing mode of the single
                                              signer
                                            type: string
                                        title: single represents a single signer
                                        type: object
                                    title: >-
                                      mode_info describes the signing mode of
                                      the signer and is a nested

                                      structure to support nested multisig
                                      pubkey's
                                    type: object
                                  public_key:
                                    description: >-
                                      `Any` contains an arbitrary serialized
                                      protocol buffer message along with a

                                      URL that describes the type of the
                                      serialized message.


                                      Protobuf library provides support to
                                      pack/unpack Any values in the form

                                      of utility functions or additional
                                      generated methods of the Any type.


                                      Example 1: Pack and unpack a message in
                                      C++.

                                          Foo foo = ...;
                                          Any any;
                                          any.PackFrom(foo);
                                          ...
                                          if (any.UnpackTo(&foo)) {
                                            ...
                                          }

                                      Example 2: Pack and unpack a message in
                                      Java.

                                          Foo foo = ...;
                                          Any any = Any.pack(foo);
                                          ...
                                          if (any.is(Foo.class)) {
                                            foo = any.unpack(Foo.class);
                                          }

                                       Example 3: Pack and unpack a message in Python.

                                          foo = Foo(...)
                                          any = Any()
                                          any.Pack(foo)
                                          ...
                                          if any.Is(Foo.DESCRIPTOR):
                                            any.Unpack(foo)
                                            ...

                                       Example 4: Pack and unpack a message in Go

                                           foo := &pb.Foo{...}
                                           any, err := anypb.New(foo)
                                           if err != nil {
                                             ...
                                           }
                                           ...
                                           foo := &pb.Foo{}
                                           if err := any.UnmarshalTo(foo); err != nil {
                                             ...
                                           }

                                      The pack methods provided by protobuf
                                      library will by default use

                                      'type.googleapis.com/full.type.name' as
                                      the type URL and the unpack

                                      methods only use the fully qualified type
                                      name after the last '/'

                                      in the type URL, for example
                                      "foo.bar.com/x/y.z" will yield type

                                      name "y.z".



                                      JSON

                                      ====

                                      The JSON representation of an `Any` value
                                      uses the regular

                                      representation of the deserialized,
                                      embedded message, with an

                                      additional field `@type` which contains
                                      the type URL. Example:

                                          package google.profile;
                                          message Person {
                                            string first_name = 1;
                                            string last_name = 2;
                                          }

                                          {
                                            "@type": "type.googleapis.com/google.profile.Person",
                                            "firstName": <string>,
                                            "lastName": <string>
                                          }

                                      If the embedded message type is well-known
                                      and has a custom JSON

                                      representation, that representation will
                                      be embedded adding a field

                                      `value` which holds the custom JSON in
                                      addition to the `@type`

                                      field. Example (for message
                                      [google.protobuf.Duration][]):

                                          {
                                            "@type": "type.googleapis.com/google.protobuf.Duration",
                                            "value": "1.212s"
                                          }
                                    properties:
                                      type_url:
                                        description: >-
                                          A URL/resource name that uniquely
                                          identifies the type of the serialized

                                          protocol buffer message. This string
                                          must contain at least

                                          one "/" character. The last segment of
                                          the URL's path must represent

                                          the fully qualified name of the type (as
                                          in

                                          `path/google.protobuf.Duration`). The
                                          name should be in a canonical form

                                          (e.g., leading "." is not accepted).


                                          In practice, teams usually precompile
                                          into the binary all types that they

                                          expect it to use in the context of Any.
                                          However, for URLs which use the

                                          scheme `http`, `https`, or no scheme,
                                          one can optionally set up a type

                                          server that maps type URLs to message
                                          definitions as follows:


                                          * If no scheme is provided, `https` is
                                          assumed.

                                          * An HTTP GET on the URL must yield a
                                          [google.protobuf.Type][]
                                            value in binary format, or produce an error.
                                          * Applications are allowed to cache
                                          lookup results based on the
                                            URL, or have them precompiled into a binary to avoid any
                                            lookup. Therefore, binary compatibility needs to be preserved
                                            on changes to types. (Use versioned type names to manage
                                            breaking changes.)

                                          Note: this functionality is not
                                          currently available in the official

                                          protobuf release, and it is not used for
                                          type URLs beginning with

                                          type.googleapis.com.


                                          Schemes other than `http`, `https` (or
                                          the empty scheme) might be

                                          used with implementation specific
                                          semantics.
                                        type: string
                                      value:
                                        description: >-
                                          Must be a valid serialized protocol
                                          buffer of the above specified type.
                                        format: byte
                                        type: string
                                    type: object
                                  sequence:
                                    description: >-
                                      sequence is the sequence of the account,
                                      which describes the

                                      number of committed transactions signed by
                                      a given address. It is used to

                                      prevent replay attacks.
                                    format: uint64
                                    type: string
                                type: object
                              type: array
                          title: >-
                            auth_info is the authorization related content of
                            the transaction,

                            specifically signers, signer modes and fee
                          type: object
                        body:
                          description: >-
                            TxBody is the body of a transaction that all signers
                            sign over.
                          properties:
                            extension_options:
                              items:
                                description: >-
                                  `Any` contains an arbitrary serialized
                                  protocol buffer message along with a

                                  URL that describes the type of the serialized
                                  message.


                                  Protobuf library provides support to
                                  pack/unpack Any values in the form

                                  of utility functions or additional generated
                                  methods of the Any type.


                                  Example 1: Pack and unpack a message in C++.

                                      Foo foo = ...;
                                      Any any;
                                      any.PackFrom(foo);
                                      ...
                                      if (any.UnpackTo(&foo)) {
                                        ...
                                      }

                                  Example 2: Pack and unpack a message in Java.

                                      Foo foo = ...;
                                      Any any = Any.pack(foo);
                                      ...
                                      if (any.is(Foo.class)) {
                                        foo = any.unpack(Foo.class);
                                      }

                                   Example 3: Pack and unpack a message in Python.

                                      foo = Foo(...)
                                      any = Any()
                                      any.Pack(foo)
                                      ...
                                      if any.Is(Foo.DESCRIPTOR):
                                        any.Unpack(foo)
                                        ...

                                   Example 4: Pack and unpack a message in Go

                                       foo := &pb.Foo{...}
                                       any, err := anypb.New(foo)
                                       if err != nil {
                                         ...
                                       }
                                       ...
                                       foo := &pb.Foo{}
                                       if err := any.UnmarshalTo(foo); err != nil {
                                         ...
                                       }

                                  The pack methods provided by protobuf library
                                  will by default use

                                  'type.googleapis.com/full.type.name' as the
                                  type URL and the unpack

                                  methods only use the fully qualified type name
                                  after the last '/'

                                  in the type URL, for example
                                  "foo.bar.com/x/y.z" will yield type

                                  name "y.z".



                                  JSON

                                  ====

                                  The JSON representation of an `Any` value uses
                                  the regular

                                  representation of the deserialized, embedded
                                  message, with an

                                  additional field `@type` which contains the
                                  type URL. Example:

                                      package google.profile;
                                      message Person {
                                        string first_name = 1;
                                        string last_name = 2;
                                      }

                                      {
                                        "@type": "type.googleapis.com/google.profile.Person",
                                        "firstName": <string>,
                                        "lastName": <string>
                                      }

                                  If the embedded message type is well-known and
                                  has a custom JSON

                                  representation, that representation will be
                                  embedded adding a field

                                  `value` which holds the custom JSON in
                                  addition to the `@type`

                                  field. Example (for message
                                  [google.protobuf.Duration][]):

                                      {
                                        "@type": "type.googleapis.com/google.protobuf.Duration",
                                        "value": "1.212s"
                                      }
                                properties:
                                  type_url:
                                    description: >-
                                      A URL/resource name that uniquely
                                      identifies the type of the serialized

                                      protocol buffer message. This string must
                                      contain at least

                                      one "/" character. The last segment of the
                                      URL's path must represent

                                      the fully qualified name of the type (as
                                      in

                                      `path/google.protobuf.Duration`). The name
                                      should be in a canonical form

                                      (e.g., leading "." is not accepted).


                                      In practice, teams usually precompile into
                                      the binary all types that they

                                      expect it to use in the context of Any.
                                      However, for URLs which use the

                                      scheme `http`, `https`, or no scheme, one
                                      can optionally set up a type

                                      server that maps type URLs to message
                                      definitions as follows:


                                      * If no scheme is provided, `https` is
                                      assumed.

                                      * An HTTP GET on the URL must yield a
                                      [google.protobuf.Type][]
                                        value in binary format, or produce an error.
                                      * Applications are allowed to cache lookup
                                      results based on the
                                        URL, or have them precompiled into a binary to avoid any
                                        lookup. Therefore, binary compatibility needs to be preserved
                                        on changes to types. (Use versioned type names to manage
                                        breaking changes.)

                                      Note: this functionality is not currently
                                      available in the official

                                      protobuf release, and it is not used for
                                      type URLs beginning with

                                      type.googleapis.com.


                                      Schemes other than `http`, `https` (or the
                                      empty scheme) might be

                                      used with implementation specific
                                      semantics.
                                    type: string
                                  value:
                                    description: >-
                                      Must be a valid serialized protocol buffer
                                      of the above specified type.
                                    format: byte
                                    type: string
                                type: object
                              title: >-
                                extension_options are arbitrary options that can
                                be added by chains

                                when the default options are not sufficient. If
                                any of these are present

                                and can't be handled, the transaction will be
                                rejected
                              type: array
                            memo:
                              description: >-
                                memo is any arbitrary note/comment to be added
                                to the transaction.

                                WARNING: in clients, any publicly exposed text
                                should not be called memo,

                                but should be called `note` instead (see
                                https://github.com/cosmos/cosmos-sdk/issues/9122).
                              type: string
                            messages:
                              description: >-
                                messages is a list of messages to be executed.
                                The required signers of

                                those messages define the number and order of
                                elements in AuthInfo's

                                signer_infos and Tx's signatures. Each required
                                signer address is added to

                                the list only the first time it occurs.

                                By convention, the first required signer
                                (usually from the first message)

                                is referred to as the primary signer and pays
                                the fee for the whole

                                transaction.
                              items:
                                description: >-
                                  `Any` contains an arbitrary serialized
                                  protocol buffer message along with a

                                  URL that describes the type of the serialized
                                  message.


                                  Protobuf library provides support to
                                  pack/unpack Any values in the form

                                  of utility functions or additional generated
                                  methods of the Any type.


                                  Example 1: Pack and unpack a message in C++.

                                      Foo foo = ...;
                                      Any any;
                                      any.PackFrom(foo);
                                      ...
                                      if (any.UnpackTo(&foo)) {
                                        ...
                                      }

                                  Example 2: Pack and unpack a message in Java.

                                      Foo foo = ...;
                                      Any any = Any.pack(foo);
                                      ...
                                      if (any.is(Foo.class)) {
                                        foo = any.unpack(Foo.class);
                                      }

                                   Example 3: Pack and unpack a message in Python.

                                      foo = Foo(...)
                                      any = Any()
                                      any.Pack(foo)
                                      ...
                                      if any.Is(Foo.DESCRIPTOR):
                                        any.Unpack(foo)
                                        ...

                                   Example 4: Pack and unpack a message in Go

                                       foo := &pb.Foo{...}
                                       any, err := anypb.New(foo)
                                       if err != nil {
                                         ...
                                       }
                                       ...
                                       foo := &pb.Foo{}
                                       if err := any.UnmarshalTo(foo); err != nil {
                                         ...
                                       }

                                  The pack methods provided by protobuf library
                                  will by default use

                                  'type.googleapis.com/full.type.name' as the
                                  type URL and the unpack

                                  methods only use the fully qualified type name
                                  after the last '/'

                                  in the type URL, for example
                                  "foo.bar.com/x/y.z" will yield type

                                  name "y.z".



                                  JSON

                                  ====

                                  The JSON representation of an `Any` value uses
                                  the regular

                                  representation of the deserialized, embedded
                                  message, with an

                                  additional field `@type` which contains the
                                  type URL. Example:

                                      package google.profile;
                                      message Person {
                                        string first_name = 1;
                                        string last_name = 2;
                                      }

                                      {
                                        "@type": "type.googleapis.com/google.profile.Person",
                                        "firstName": <string>,
                                        "lastName": <string>
                                      }

                                  If the embedded message type is well-known and
                                  has a custom JSON

                                  representation, that representation will be
                                  embedded adding a field

                                  `value` which holds the custom JSON in
                                  addition to the `@type`

                                  field. Example (for message
                                  [google.protobuf.Duration][]):

                                      {
                                        "@type": "type.googleapis.com/google.protobuf.Duration",
                                        "value": "1.212s"
                                      }
                                properties:
                                  type_url:
                                    description: >-
                                      A URL/resource name that uniquely
                                      identifies the type of the serialized

                                      protocol buffer message. This string must
                                      contain at least

                                      one "/" character. The last segment of the
                                      URL's path must represent

                                      the fully qualified name of the type (as
                                      in

                                      `path/google.protobuf.Duration`). The name
                                      should be in a canonical form

                                      (e.g., leading "." is not accepted).


                                      In practice, teams usually precompile into
                                      the binary all types that they

                                      expect it to use in the context of Any.
                                      However, for URLs which use the

                                      scheme `http`, `https`, or no scheme, one
                                      can optionally set up a type

                                      server that maps type URLs to message
                                      definitions as follows:


                                      * If no scheme is provided, `https` is
                                      assumed.

                                      * An HTTP GET on the URL must yield a
                                      [google.protobuf.Type][]
                                        value in binary format, or produce an error.
                                      * Applications are allowed to cache lookup
                                      results based on the
                                        URL, or have them precompiled into a binary to avoid any
                                        lookup. Therefore, binary compatibility needs to be preserved
                                        on changes to types. (Use versioned type names to manage
                                        breaking changes.)

                                      Note: this functionality is not currently
                                      available in the official

                                      protobuf release, and it is not used for
                                      type URLs beginning with

                                      type.googleapis.com.


                                      Schemes other than `http`, `https` (or the
                                      empty scheme) might be

                                      used with implementation specific
                                      semantics.
                                    type: string
                                  value:
                                    description: >-
                                      Must be a valid serialized protocol buffer
                                      of the above specified type.
                                    format: byte
                                    type: string
                                type: object
                              type: array
                            non_critical_extension_options:
                              items:
                                description: >-
                                  `Any` contains an arbitrary serialized
                                  protocol buffer message along with a

                                  URL that describes the type of the serialized
                                  message.


                                  Protobuf library provides support to
                                  pack/unpack Any values in the form

                                  of utility functions or additional generated
                                  methods of the Any type.


                                  Example 1: Pack and unpack a message in C++.

                                      Foo foo = ...;
                                      Any any;
                                      any.PackFrom(foo);
                                      ...
                                      if (any.UnpackTo(&foo)) {
                                        ...
                                      }

                                  Example 2: Pack and unpack a message in Java.

                                      Foo foo = ...;
                                      Any any = Any.pack(foo);
                                      ...
                                      if (any.is(Foo.class)) {
                                        foo = any.unpack(Foo.class);
                                      }

                                   Example 3: Pack and unpack a message in Python.

                                      foo = Foo(...)
                                      any = Any()
                                      any.Pack(foo)
                                      ...
                                      if any.Is(Foo.DESCRIPTOR):
                                        any.Unpack(foo)
                                        ...

                                   Example 4: Pack and unpack a message in Go

                                       foo := &pb.Foo{...}
                                       any, err := anypb.New(foo)
                                       if err != nil {
                                         ...
                                       }
                                       ...
                                       foo := &pb.Foo{}
                                       if err := any.UnmarshalTo(foo); err != nil {
                                         ...
                                       }

                                  The pack methods provided by protobuf library
                                  will by default use

                                  'type.googleapis.com/full.type.name' as the
                                  type URL and the unpack

                                  methods only use the fully qualified type name
                                  after the last '/'

                                  in the type URL, for example
                                  "foo.bar.com/x/y.z" will yield type

                                  name "y.z".



                                  JSON

                                  ====

                                  The JSON representation of an `Any` value uses
                                  the regular

                                  representation of the deserialized, embedded
                                  message, with an

                                  additional field `@type` which contains the
                                  type URL. Example:

                                      package google.profile;
                                      message Person {
                                        string first_name = 1;
                                        string last_name = 2;
                                      }

                                      {
                                        "@type": "type.googleapis.com/google.profile.Person",
                                        "firstName": <string>,
                                        "lastName": <string>
                                      }

                                  If the embedded message type is well-known and
                                  has a custom JSON

                                  representation, that representation will be
                                  embedded adding a field

                                  `value` which holds the custom JSON in
                                  addition to the `@type`

                                  field. Example (for message
                                  [google.protobuf.Duration][]):

                                      {
                                        "@type": "type.googleapis.com/google.protobuf.Duration",
                                        "value": "1.212s"
                                      }
                                properties:
                                  type_url:
                                    description: >-
                                      A URL/resource name that uniquely
                                      identifies the type of the serialized

                                      protocol buffer message. This string must
                                      contain at least

                                      one "/" character. The last segment of the
                                      URL's path must represent

                                      the fully qualified name of the type (as
                                      in

                                      `path/google.protobuf.Duration`). The name
                                      should be in a canonical form

                                      (e.g., leading "." is not accepted).


                                      In practice, teams usually precompile into
                                      the binary all types that they

                                      expect it to use in the context of Any.
                                      However, for URLs which use the

                                      scheme `http`, `https`, or no scheme, one
                                      can optionally set up a type

                                      server that maps type URLs to message
                                      definitions as follows:


                                      * If no scheme is provided, `https` is
                                      assumed.

                                      * An HTTP GET on the URL must yield a
                                      [google.protobuf.Type][]
                                        value in binary format, or produce an error.
                                      * Applications are allowed to cache lookup
                                      results based on the
                                        URL, or have them precompiled into a binary to avoid any
                                        lookup. Therefore, binary compatibility needs to be preserved
                                        on changes to types. (Use versioned type names to manage
                                        breaking changes.)

                                      Note: this functionality is not currently
                                      available in the official

                                      protobuf release, and it is not used for
                                      type URLs beginning with

                                      type.googleapis.com.


                                      Schemes other than `http`, `https` (or the
                                      empty scheme) might be

                                      used with implementation specific
                                      semantics.
                                    type: string
                                  value:
                                    description: >-
                                      Must be a valid serialized protocol buffer
                                      of the above specified type.
                                    format: byte
                                    type: string
                                type: object
                              title: >-
                                extension_options are arbitrary options that can
                                be added by chains

                                when the default options are not sufficient. If
                                any of these are present

                                and can't be handled, they will be ignored
                              type: array
                            timeout_height:
                              format: uint64
                              title: >-
                                timeout is the block height after which this
                                transaction will not

                                be processed by the chain
                              type: string
                          title: body is the processable content of the transaction
                          type: object
                        signatures:
                          description: >-
                            signatures is a list of signatures that matches the
                            length and order of

                            AuthInfo's signer_infos to allow connecting
                            signature meta information like

                            public key and signing mode by position.
                          items:
                            format: byte
                            type: string
                          type: array
                      type: object
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: GetTxsEvent fetches txs by event.
      tags:
        - cosmos/tx/v1beta1
    post:
      operationId: BroadcastTx
      requestBody:
        content:
          application/json:
            schema:
              description: >-
                BroadcastTxRequest is the request type for the
                Service.BroadcastTxRequest

                RPC method.
              properties:
                mode:
                  default: BROADCAST_MODE_UNSPECIFIED
                  description: >-
                    BroadcastMode specifies the broadcast mode for the
                    TxService.Broadcast RPC method.

                     - BROADCAST_MODE_UNSPECIFIED: zero-value for mode ordering
                     - BROADCAST_MODE_BLOCK: BROADCAST_MODE_BLOCK defines a tx broadcasting mode where the client waits for
                    the tx to be committed in a block.
                     - BROADCAST_MODE_SYNC: BROADCAST_MODE_SYNC defines a tx broadcasting mode where the client waits for
                    a CheckTx execution response only.
                     - BROADCAST_MODE_ASYNC: BROADCAST_MODE_ASYNC defines a tx broadcasting mode where the client returns
                    immediately.
                  enum:
                    - BROADCAST_MODE_UNSPECIFIED
                    - BROADCAST_MODE_BLOCK
                    - BROADCAST_MODE_SYNC
                    - BROADCAST_MODE_ASYNC
                  type: string
                tx_bytes:
                  description: tx_bytes is the raw transaction.
                  format: byte
                  type: string
              type: object
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                description: |-
                  BroadcastTxResponse is the response type for the
                  Service.BroadcastTx method.
                properties:
                  tx_response:
                    description: >-
                      TxResponse defines a structure containing relevant tx data
                      and metadata. The

                      tags are stringified and the log is JSON decoded.
                    properties:
                      code:
                        description: Response code.
                        format: int64
                        type: integer
                      codespace:
                        title: Namespace for the Code
                        type: string
                      data:
                        description: Result bytes, if any.
                        type: string
                      events:
                        description: >-
                          Events defines all the events emitted by processing a
                          transaction. Note,

                          these events include those emitted by processing all
                          the messages and those

                          emitted from the ante handler. Whereas Logs contains
                          the events, with

                          additional metadata, emitted only by processing the
                          messages.


                          Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
                        items:
                          description: >-
                            Event allows application developers to attach
                            additional information to

                            ResponseBeginBlock, ResponseEndBlock,
                            ResponseCheckTx and ResponseDeliverTx.

                            Later, transactions may be queried using these
                            events.
                          properties:
                            attributes:
                              items:
                                description: >-
                                  EventAttribute is a single key-value pair,
                                  associated with an event.
                                properties:
                                  index:
                                    type: boolean
                                  key:
                                    format: byte
                                    type: string
                                  value:
                                    format: byte
                                    type: string
                                type: object
                              type: array
                            type:
                              type: string
                          type: object
                        type: array
                      gas_used:
                        description: Amount of gas consumed by transaction.
                        format: int64
                        type: string
                      gas_wanted:
                        description: Amount of gas requested for transaction.
                        format: int64
                        type: string
                      height:
                        format: int64
                        title: The block height
                        type: string
                      info:
                        description: Additional information. May be non-deterministic.
                        type: string
                      logs:
                        description: >-
                          The output of the application's logger (typed). May be
                          non-deterministic.
                        items:
                          description: >-
                            ABCIMessageLog defines a structure containing an
                            indexed tx ABCI message log.
                          properties:
                            events:
                              description: >-
                                Events contains a slice of Event objects that
                                were emitted during some

                                execution.
                              items:
                                description: >-
                                  StringEvent defines en Event object wrapper
                                  where all the attributes

                                  contain key/value pairs that are strings
                                  instead of raw bytes.
                                properties:
                                  attributes:
                                    items:
                                      description: >-
                                        Attribute defines an attribute wrapper
                                        where the key and value are

                                        strings instead of raw bytes.
                                      properties:
                                        key:
                                          type: string
                                        value:
                                          type: string
                                      type: object
                                    type: array
                                  type:
                                    type: string
                                type: object
                              type: array
                            log:
                              type: string
                            msg_index:
                              format: int64
                              type: integer
                          type: object
                        type: array
                      raw_log:
                        description: >-
                          The output of the application's logger (raw string).
                          May be

                          non-deterministic.
                        type: string
                      timestamp:
                        description: >-
                          Time of the previous block. For heights > 1, it's the
                          weighted median of

                          the timestamps of the valid votes in the
                          block.LastCommit. For height == 1,

                          it's genesis time.
                        type: string
                      tx:
                        description: >-
                          `Any` contains an arbitrary serialized protocol buffer
                          message along with a

                          URL that describes the type of the serialized message.


                          Protobuf library provides support to pack/unpack Any
                          values in the form

                          of utility functions or additional generated methods
                          of the Any type.


                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }

                           Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                           Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := anypb.New(foo)
                               if err != nil {
                                 ...
                               }
                               ...
                               foo := &pb.Foo{}
                               if err := any.UnmarshalTo(foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by
                          default use

                          'type.googleapis.com/full.type.name' as the type URL
                          and the unpack

                          methods only use the fully qualified type name after
                          the last '/'

                          in the type URL, for example "foo.bar.com/x/y.z" will
                          yield type

                          name "y.z".



                          JSON

                          ====

                          The JSON representation of an `Any` value uses the
                          regular

                          representation of the deserialized, embedded message,
                          with an

                          additional field `@type` which contains the type URL.
                          Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a
                          custom JSON

                          representation, that representation will be embedded
                          adding a field

                          `value` which holds the custom JSON in addition to the
                          `@type`

                          field. Example (for message
                          [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                        properties:
                          type_url:
                            description: >-
                              A URL/resource name that uniquely identifies the
                              type of the serialized

                              protocol buffer message. This string must contain
                              at least

                              one "/" character. The last segment of the URL's
                              path must represent

                              the fully qualified name of the type (as in

                              `path/google.protobuf.Duration`). The name should
                              be in a canonical form

                              (e.g., leading "." is not accepted).


                              In practice, teams usually precompile into the
                              binary all types that they

                              expect it to use in the context of Any. However,
                              for URLs which use the

                              scheme `http`, `https`, or no scheme, one can
                              optionally set up a type

                              server that maps type URLs to message definitions
                              as follows:


                              * If no scheme is provided, `https` is assumed.

                              * An HTTP GET on the URL must yield a
                              [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results
                              based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently
                              available in the official

                              protobuf release, and it is not used for type URLs
                              beginning with

                              type.googleapis.com.


                              Schemes other than `http`, `https` (or the empty
                              scheme) might be

                              used with implementation specific semantics.
                            type: string
                          value:
                            description: >-
                              Must be a valid serialized protocol buffer of the
                              above specified type.
                            format: byte
                            type: string
                        type: object
                      txhash:
                        description: The transaction hash.
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: BroadcastTx broadcast transaction.
      tags:
        - cosmos/tx/v1beta1
  /cosmos/tx/v1beta1/txs/block/{height}:
    get:
      description: 'Since: cosmos-sdk 0.45.2'
      operationId: GetBlockWithTxs
      parameters:
        - description: height is the height of the block to query.
          in: path
          name: height
          required: true
          schema:
            format: int64
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  GetBlockWithTxsResponse is the response type for the
                  Service.GetBlockWithTxs method.


                  Since: cosmos-sdk 0.45.2
                properties:
                  block:
                    properties:
                      data:
                        properties:
                          txs:
                            description: >-
                              Txs that will be applied by state @
                              block.Height+1.

                              NOTE: not all txs here are valid.  We're just
                              agreeing on the order first.

                              This means that block.AppHash does not include
                              these txs.
                            items:
                              format: byte
                              type: string
                            type: array
                        title: >-
                          Data contains the set of transactions included in the
                          block
                        type: object
                      evidence:
                        properties:
                          evidence:
                            items:
                              properties:
                                duplicate_vote_evidence:
                                  description: >-
                                    DuplicateVoteEvidence contains evidence of a
                                    validator signed two conflicting votes.
                                  properties:
                                    timestamp:
                                      format: date-time
                                      type: string
                                    total_voting_power:
                                      format: int64
                                      type: string
                                    validator_power:
                                      format: int64
                                      type: string
                                    vote_a:
                                      description: >-
                                        Vote represents a prevote, precommit, or
                                        commit vote from validators for

                                        consensus.
                                      properties:
                                        block_id:
                                          properties:
                                            hash:
                                              format: byte
                                              type: string
                                            part_set_header:
                                              properties:
                                                hash:
                                                  format: byte
                                                  type: string
                                                total:
                                                  format: int64
                                                  type: integer
                                              title: PartsetHeader
                                              type: object
                                          title: BlockID
                                          type: object
                                        height:
                                          format: int64
                                          type: string
                                        round:
                                          format: int32
                                          type: integer
                                        signature:
                                          format: byte
                                          type: string
                                        timestamp:
                                          format: date-time
                                          type: string
                                        type:
                                          default: SIGNED_MSG_TYPE_UNKNOWN
                                          description: >-
                                            SignedMsgType is a type of signed
                                            message in the consensus.

                                             - SIGNED_MSG_TYPE_PREVOTE: Votes
                                             - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                          enum:
                                            - SIGNED_MSG_TYPE_UNKNOWN
                                            - SIGNED_MSG_TYPE_PREVOTE
                                            - SIGNED_MSG_TYPE_PRECOMMIT
                                            - SIGNED_MSG_TYPE_PROPOSAL
                                          type: string
                                        validator_address:
                                          format: byte
                                          type: string
                                        validator_index:
                                          format: int32
                                          type: integer
                                      type: object
                                    vote_b:
                                      description: >-
                                        Vote represents a prevote, precommit, or
                                        commit vote from validators for

                                        consensus.
                                      properties:
                                        block_id:
                                          properties:
                                            hash:
                                              format: byte
                                              type: string
                                            part_set_header:
                                              properties:
                                                hash:
                                                  format: byte
                                                  type: string
                                                total:
                                                  format: int64
                                                  type: integer
                                              title: PartsetHeader
                                              type: object
                                          title: BlockID
                                          type: object
                                        height:
                                          format: int64
                                          type: string
                                        round:
                                          format: int32
                                          type: integer
                                        signature:
                                          format: byte
                                          type: string
                                        timestamp:
                                          format: date-time
                                          type: string
                                        type:
                                          default: SIGNED_MSG_TYPE_UNKNOWN
                                          description: >-
                                            SignedMsgType is a type of signed
                                            message in the consensus.

                                             - SIGNED_MSG_TYPE_PREVOTE: Votes
                                             - SIGNED_MSG_TYPE_PROPOSAL: Proposals
                                          enum:
                                            - SIGNED_MSG_TYPE_UNKNOWN
                                            - SIGNED_MSG_TYPE_PREVOTE
                                            - SIGNED_MSG_TYPE_PRECOMMIT
                                            - SIGNED_MSG_TYPE_PROPOSAL
                                          type: string
                                        validator_address:
                                          format: byte
                                          type: string
                                        validator_index:
                                          format: int32
                                          type: integer
                                      type: object
                                  type: object
                                light_client_attack_evidence:
                                  description: >-
                                    LightClientAttackEvidence contains evidence
                                    of a set of validators attempting to mislead
                                    a light client.
                                  properties:
                                    byzantine_validators:
                                      items:
                                        properties:
                                          address:
                                            format: byte
                                            type: string
                                          proposer_priority:
                                            format: int64
                                            type: string
                                          pub_key:
                                            properties:
                                              ed25519:
                                                format: byte
                                                type: string
                                              secp256k1:
                                                format: byte
                                                type: string
                                            title: >-
                                              PublicKey defines the keys available for
                                              use with Validators
                                            type: object
                                          voting_power:
                                            format: int64
                                            type: string
                                        type: object
                                      type: array
                                    common_height:
                                      format: int64
                                      type: string
                                    conflicting_block:
                                      properties:
                                        signed_header:
                                          properties:
                                            commit:
                                              description: >-
                                                Commit contains the evidence that a
                                                block was committed by a set of
                                                validators.
                                              properties:
                                                block_id:
                                                  properties:
                                                    hash:
                                                      format: byte
                                                      type: string
                                                    part_set_header:
                                                      properties:
                                                        hash:
                                                          format: byte
                                                          type: string
                                                        total:
                                                          format: int64
                                                          type: integer
                                                      title: PartsetHeader
                                                      type: object
                                                  title: BlockID
                                                  type: object
                                                height:
                                                  format: int64
                                                  type: string
                                                round:
                                                  format: int32
                                                  type: integer
                                                signatures:
                                                  items:
                                                    description: >-
                                                      CommitSig is a part of the Vote included
                                                      in a Commit.
                                                    properties:
                                                      block_id_flag:
                                                        default: BLOCK_ID_FLAG_UNKNOWN
                                                        enum:
                                                          - BLOCK_ID_FLAG_UNKNOWN
                                                          - BLOCK_ID_FLAG_ABSENT
                                                          - BLOCK_ID_FLAG_COMMIT
                                                          - BLOCK_ID_FLAG_NIL
                                                        title: >-
                                                          BlockIdFlag indicates which BlcokID the
                                                          signature is for
                                                        type: string
                                                      signature:
                                                        format: byte
                                                        type: string
                                                      timestamp:
                                                        format: date-time
                                                        type: string
                                                      validator_address:
                                                        format: byte
                                                        type: string
                                                    type: object
                                                  type: array
                                              type: object
                                            header:
                                              description: >-
                                                Header defines the structure of a block
                                                header.
                                              properties:
                                                app_hash:
                                                  format: byte
                                                  type: string
                                                chain_id:
                                                  type: string
                                                consensus_hash:
                                                  format: byte
                                                  type: string
                                                data_hash:
                                                  format: byte
                                                  type: string
                                                evidence_hash:
                                                  format: byte
                                                  title: consensus info
                                                  type: string
                                                height:
                                                  format: int64
                                                  type: string
                                                last_block_id:
                                                  properties:
                                                    hash:
                                                      format: byte
                                                      type: string
                                                    part_set_header:
                                                      properties:
                                                        hash:
                                                          format: byte
                                                          type: string
                                                        total:
                                                          format: int64
                                                          type: integer
                                                      title: PartsetHeader
                                                      type: object
                                                  title: prev block info
                                                  type: object
                                                last_commit_hash:
                                                  format: byte
                                                  title: hashes of block data
                                                  type: string
                                                last_results_hash:
                                                  format: byte
                                                  type: string
                                                next_validators_hash:
                                                  format: byte
                                                  type: string
                                                proposer_address:
                                                  format: byte
                                                  type: string
                                                time:
                                                  format: date-time
                                                  type: string
                                                validators_hash:
                                                  format: byte
                                                  title: >-
                                                    hashes from the app output from the prev
                                                    block
                                                  type: string
                                                version:
                                                  description: >-
                                                    Consensus captures the consensus rules
                                                    for processing a block in the
                                                    blockchain,

                                                    including all blockchain data structures
                                                    and the rules of the application's

                                                    state transition machine.
                                                  properties:
                                                    app:
                                                      format: uint64
                                                      type: string
                                                    block:
                                                      format: uint64
                                                      type: string
                                                  title: basic block info
                                                  type: object
                                              type: object
                                          type: object
                                        validator_set:
                                          properties:
                                            proposer:
                                              properties:
                                                address:
                                                  format: byte
                                                  type: string
                                                proposer_priority:
                                                  format: int64
                                                  type: string
                                                pub_key:
                                                  properties:
                                                    ed25519:
                                                      format: byte
                                                      type: string
                                                    secp256k1:
                                                      format: byte
                                                      type: string
                                                  title: >-
                                                    PublicKey defines the keys available for
                                                    use with Validators
                                                  type: object
                                                voting_power:
                                                  format: int64
                                                  type: string
                                              type: object
                                            total_voting_power:
                                              format: int64
                                              type: string
                                            validators:
                                              items:
                                                properties:
                                                  address:
                                                    format: byte
                                                    type: string
                                                  proposer_priority:
                                                    format: int64
                                                    type: string
                                                  pub_key:
                                                    properties:
                                                      ed25519:
                                                        format: byte
                                                        type: string
                                                      secp256k1:
                                                        format: byte
                                                        type: string
                                                    title: >-
                                                      PublicKey defines the keys available for
                                                      use with Validators
                                                    type: object
                                                  voting_power:
                                                    format: int64
                                                    type: string
                                                type: object
                                              type: array
                                          type: object
                                      type: object
                                    timestamp:
                                      format: date-time
                                      type: string
                                    total_voting_power:
                                      format: int64
                                      type: string
                                  type: object
                              type: object
                            type: array
                        type: object
                      header:
                        description: Header defines the structure of a block header.
                        properties:
                          app_hash:
                            format: byte
                            type: string
                          chain_id:
                            type: string
                          consensus_hash:
                            format: byte
                            type: string
                          data_hash:
                            format: byte
                            type: string
                          evidence_hash:
                            format: byte
                            title: consensus info
                            type: string
                          height:
                            format: int64
                            type: string
                          last_block_id:
                            properties:
                              hash:
                                format: byte
                                type: string
                              part_set_header:
                                properties:
                                  hash:
                                    format: byte
                                    type: string
                                  total:
                                    format: int64
                                    type: integer
                                title: PartsetHeader
                                type: object
                            title: prev block info
                            type: object
                          last_commit_hash:
                            format: byte
                            title: hashes of block data
                            type: string
                          last_results_hash:
                            format: byte
                            type: string
                          next_validators_hash:
                            format: byte
                            type: string
                          proposer_address:
                            format: byte
                            type: string
                          time:
                            format: date-time
                            type: string
                          validators_hash:
                            format: byte
                            title: hashes from the app output from the prev block
                            type: string
                          version:
                            description: >-
                              Consensus captures the consensus rules for
                              processing a block in the blockchain,

                              including all blockchain data structures and the
                              rules of the application's

                              state transition machine.
                            properties:
                              app:
                                format: uint64
                                type: string
                              block:
                                format: uint64
                                type: string
                            title: basic block info
                            type: object
                        type: object
                      last_commit:
                        description: >-
                          Commit contains the evidence that a block was
                          committed by a set of validators.
                        properties:
                          block_id:
                            properties:
                              hash:
                                format: byte
                                type: string
                              part_set_header:
                                properties:
                                  hash:
                                    format: byte
                                    type: string
                                  total:
                                    format: int64
                                    type: integer
                                title: PartsetHeader
                                type: object
                            title: BlockID
                            type: object
                          height:
                            format: int64
                            type: string
                          round:
                            format: int32
                            type: integer
                          signatures:
                            items:
                              description: >-
                                CommitSig is a part of the Vote included in a
                                Commit.
                              properties:
                                block_id_flag:
                                  default: BLOCK_ID_FLAG_UNKNOWN
                                  enum:
                                    - BLOCK_ID_FLAG_UNKNOWN
                                    - BLOCK_ID_FLAG_ABSENT
                                    - BLOCK_ID_FLAG_COMMIT
                                    - BLOCK_ID_FLAG_NIL
                                  title: >-
                                    BlockIdFlag indicates which BlcokID the
                                    signature is for
                                  type: string
                                signature:
                                  format: byte
                                  type: string
                                timestamp:
                                  format: date-time
                                  type: string
                                validator_address:
                                  format: byte
                                  type: string
                              type: object
                            type: array
                        type: object
                    type: object
                  block_id:
                    properties:
                      hash:
                        format: byte
                        type: string
                      part_set_header:
                        properties:
                          hash:
                            format: byte
                            type: string
                          total:
                            format: int64
                            type: integer
                        title: PartsetHeader
                        type: object
                    title: BlockID
                    type: object
                  pagination:
                    description: pagination defines a pagination for the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                  txs:
                    description: txs are the transactions in the block.
                    items:
                      description: >-
                        Tx is the standard type used for broadcasting
                        transactions.
                      properties:
                        auth_info:
                          description: >-
                            AuthInfo describes the fee and signer modes that are
                            used to sign a

                            transaction.
                          properties:
                            fee:
                              description: >-
                                Fee is the fee and gas limit for the
                                transaction. The first signer is the

                                primary signer and the one which pays the fee.
                                The fee can be calculated

                                based on the cost of evaluating the body and
                                doing signature verification

                                of the signers. This can be estimated via
                                simulation.
                              properties:
                                amount:
                                  items:
                                    description: >-
                                      Coin defines a token with a denomination
                                      and an amount.


                                      NOTE: The amount field is an Int which
                                      implements the custom method

                                      signatures required by gogoproto.
                                    properties:
                                      amount:
                                        type: string
                                      denom:
                                        type: string
                                    type: object
                                  title: >-
                                    amount is the amount of coins to be paid as
                                    a fee
                                  type: array
                                gas_limit:
                                  format: uint64
                                  title: >-
                                    gas_limit is the maximum gas that can be
                                    used in transaction processing

                                    before an out of gas error occurs
                                  type: string
                                granter:
                                  title: >-
                                    if set, the fee payer (either the first
                                    signer or the value of the payer field)
                                    requests that a fee grant be used

                                    to pay fees instead of the fee payer's own
                                    balance. If an appropriate fee grant does
                                    not exist or the chain does

                                    not support fee grants, this will fail
                                  type: string
                                payer:
                                  description: >-
                                    if unset, the first signer is responsible
                                    for paying the fees. If set, the specified
                                    account must pay the fees.

                                    the payer must be a tx signer (and thus have
                                    signed this field in AuthInfo).

                                    setting this field does *not* change the
                                    ordering of required signers for the
                                    transaction.
                                  type: string
                              type: object
                            signer_infos:
                              description: >-
                                signer_infos defines the signing modes for the
                                required signers. The number

                                and order of elements must match the required
                                signers from TxBody's

                                messages. The first element is the primary
                                signer and the one which pays

                                the fee.
                              items:
                                description: >-
                                  SignerInfo describes the public key and
                                  signing mode of a single top-level

                                  signer.
                                properties:
                                  mode_info:
                                    description: >-
                                      ModeInfo describes the signing mode of a
                                      single or nested multisig signer.
                                    properties:
                                      multi:
                                        properties:
                                          bitarray:
                                            description: >-
                                              CompactBitArray is an implementation of
                                              a space efficient bit array.

                                              This is used to ensure that the encoded
                                              data takes up a minimal amount of

                                              space after proto encoding.

                                              This is not thread safe, and is not
                                              intended for concurrent usage.
                                            properties:
                                              elems:
                                                format: byte
                                                type: string
                                              extra_bits_stored:
                                                format: int64
                                                type: integer
                                            title: >-
                                              bitarray specifies which keys within the
                                              multisig are signing
                                            type: object
                                          mode_infos:
                                            items: {}
                                            title: >-
                                              mode_infos is the corresponding modes of
                                              the signers of the multisig

                                              which could include nested multisig
                                              public keys
                                            type: array
                                        title: >-
                                          multi represents a nested multisig
                                          signer
                                        type: object
                                      single:
                                        properties:
                                          mode:
                                            default: SIGN_MODE_UNSPECIFIED
                                            description: >-
                                              SignMode represents a signing mode with
                                              its own security guarantees.

                                               - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
                                              rejected
                                               - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
                                              verified with raw bytes from Tx
                                               - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
                                              human-readable textual representation on
                                              top of the binary representation

                                              from SIGN_MODE_DIRECT
                                               - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
                                              Amino JSON and will be removed in the
                                              future
                                               - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
                                              SDK. Ref:
                                              https://eips.ethereum.org/EIPS/eip-191


                                              Currently, SIGN_MODE_EIP_191 is
                                              registered as a SignMode enum variant,

                                              but is not implemented on the SDK by
                                              default. To enable EIP-191, you need

                                              to pass a custom `TxConfig` that has an
                                              implementation of

                                              `SignModeHandler` for EIP-191. The SDK
                                              may decide to fully support

                                              EIP-191 in the future.


                                              Since: cosmos-sdk 0.45.2
                                            enum:
                                              - SIGN_MODE_UNSPECIFIED
                                              - SIGN_MODE_DIRECT
                                              - SIGN_MODE_TEXTUAL
                                              - SIGN_MODE_LEGACY_AMINO_JSON
                                              - SIGN_MODE_EIP_191
                                            title: >-
                                              mode is the signing mode of the single
                                              signer
                                            type: string
                                        title: single represents a single signer
                                        type: object
                                    title: >-
                                      mode_info describes the signing mode of
                                      the signer and is a nested

                                      structure to support nested multisig
                                      pubkey's
                                    type: object
                                  public_key:
                                    description: >-
                                      `Any` contains an arbitrary serialized
                                      protocol buffer message along with a

                                      URL that describes the type of the
                                      serialized message.


                                      Protobuf library provides support to
                                      pack/unpack Any values in the form

                                      of utility functions or additional
                                      generated methods of the Any type.


                                      Example 1: Pack and unpack a message in
                                      C++.

                                          Foo foo = ...;
                                          Any any;
                                          any.PackFrom(foo);
                                          ...
                                          if (any.UnpackTo(&foo)) {
                                            ...
                                          }

                                      Example 2: Pack and unpack a message in
                                      Java.

                                          Foo foo = ...;
                                          Any any = Any.pack(foo);
                                          ...
                                          if (any.is(Foo.class)) {
                                            foo = any.unpack(Foo.class);
                                          }

                                       Example 3: Pack and unpack a message in Python.

                                          foo = Foo(...)
                                          any = Any()
                                          any.Pack(foo)
                                          ...
                                          if any.Is(Foo.DESCRIPTOR):
                                            any.Unpack(foo)
                                            ...

                                       Example 4: Pack and unpack a message in Go

                                           foo := &pb.Foo{...}
                                           any, err := anypb.New(foo)
                                           if err != nil {
                                             ...
                                           }
                                           ...
                                           foo := &pb.Foo{}
                                           if err := any.UnmarshalTo(foo); err != nil {
                                             ...
                                           }

                                      The pack methods provided by protobuf
                                      library will by default use

                                      'type.googleapis.com/full.type.name' as
                                      the type URL and the unpack

                                      methods only use the fully qualified type
                                      name after the last '/'

                                      in the type URL, for example
                                      "foo.bar.com/x/y.z" will yield type

                                      name "y.z".



                                      JSON

                                      ====

                                      The JSON representation of an `Any` value
                                      uses the regular

                                      representation of the deserialized,
                                      embedded message, with an

                                      additional field `@type` which contains
                                      the type URL. Example:

                                          package google.profile;
                                          message Person {
                                            string first_name = 1;
                                            string last_name = 2;
                                          }

                                          {
                                            "@type": "type.googleapis.com/google.profile.Person",
                                            "firstName": <string>,
                                            "lastName": <string>
                                          }

                                      If the embedded message type is well-known
                                      and has a custom JSON

                                      representation, that representation will
                                      be embedded adding a field

                                      `value` which holds the custom JSON in
                                      addition to the `@type`

                                      field. Example (for message
                                      [google.protobuf.Duration][]):

                                          {
                                            "@type": "type.googleapis.com/google.protobuf.Duration",
                                            "value": "1.212s"
                                          }
                                    properties:
                                      type_url:
                                        description: >-
                                          A URL/resource name that uniquely
                                          identifies the type of the serialized

                                          protocol buffer message. This string
                                          must contain at least

                                          one "/" character. The last segment of
                                          the URL's path must represent

                                          the fully qualified name of the type (as
                                          in

                                          `path/google.protobuf.Duration`). The
                                          name should be in a canonical form

                                          (e.g., leading "." is not accepted).


                                          In practice, teams usually precompile
                                          into the binary all types that they

                                          expect it to use in the context of Any.
                                          However, for URLs which use the

                                          scheme `http`, `https`, or no scheme,
                                          one can optionally set up a type

                                          server that maps type URLs to message
                                          definitions as follows:


                                          * If no scheme is provided, `https` is
                                          assumed.

                                          * An HTTP GET on the URL must yield a
                                          [google.protobuf.Type][]
                                            value in binary format, or produce an error.
                                          * Applications are allowed to cache
                                          lookup results based on the
                                            URL, or have them precompiled into a binary to avoid any
                                            lookup. Therefore, binary compatibility needs to be preserved
                                            on changes to types. (Use versioned type names to manage
                                            breaking changes.)

                                          Note: this functionality is not
                                          currently available in the official

                                          protobuf release, and it is not used for
                                          type URLs beginning with

                                          type.googleapis.com.


                                          Schemes other than `http`, `https` (or
                                          the empty scheme) might be

                                          used with implementation specific
                                          semantics.
                                        type: string
                                      value:
                                        description: >-
                                          Must be a valid serialized protocol
                                          buffer of the above specified type.
                                        format: byte
                                        type: string
                                    type: object
                                  sequence:
                                    description: >-
                                      sequence is the sequence of the account,
                                      which describes the

                                      number of committed transactions signed by
                                      a given address. It is used to

                                      prevent replay attacks.
                                    format: uint64
                                    type: string
                                type: object
                              type: array
                          title: >-
                            auth_info is the authorization related content of
                            the transaction,

                            specifically signers, signer modes and fee
                          type: object
                        body:
                          description: >-
                            TxBody is the body of a transaction that all signers
                            sign over.
                          properties:
                            extension_options:
                              items:
                                description: >-
                                  `Any` contains an arbitrary serialized
                                  protocol buffer message along with a

                                  URL that describes the type of the serialized
                                  message.


                                  Protobuf library provides support to
                                  pack/unpack Any values in the form

                                  of utility functions or additional generated
                                  methods of the Any type.


                                  Example 1: Pack and unpack a message in C++.

                                      Foo foo = ...;
                                      Any any;
                                      any.PackFrom(foo);
                                      ...
                                      if (any.UnpackTo(&foo)) {
                                        ...
                                      }

                                  Example 2: Pack and unpack a message in Java.

                                      Foo foo = ...;
                                      Any any = Any.pack(foo);
                                      ...
                                      if (any.is(Foo.class)) {
                                        foo = any.unpack(Foo.class);
                                      }

                                   Example 3: Pack and unpack a message in Python.

                                      foo = Foo(...)
                                      any = Any()
                                      any.Pack(foo)
                                      ...
                                      if any.Is(Foo.DESCRIPTOR):
                                        any.Unpack(foo)
                                        ...

                                   Example 4: Pack and unpack a message in Go

                                       foo := &pb.Foo{...}
                                       any, err := anypb.New(foo)
                                       if err != nil {
                                         ...
                                       }
                                       ...
                                       foo := &pb.Foo{}
                                       if err := any.UnmarshalTo(foo); err != nil {
                                         ...
                                       }

                                  The pack methods provided by protobuf library
                                  will by default use

                                  'type.googleapis.com/full.type.name' as the
                                  type URL and the unpack

                                  methods only use the fully qualified type name
                                  after the last '/'

                                  in the type URL, for example
                                  "foo.bar.com/x/y.z" will yield type

                                  name "y.z".



                                  JSON

                                  ====

                                  The JSON representation of an `Any` value uses
                                  the regular

                                  representation of the deserialized, embedded
                                  message, with an

                                  additional field `@type` which contains the
                                  type URL. Example:

                                      package google.profile;
                                      message Person {
                                        string first_name = 1;
                                        string last_name = 2;
                                      }

                                      {
                                        "@type": "type.googleapis.com/google.profile.Person",
                                        "firstName": <string>,
                                        "lastName": <string>
                                      }

                                  If the embedded message type is well-known and
                                  has a custom JSON

                                  representation, that representation will be
                                  embedded adding a field

                                  `value` which holds the custom JSON in
                                  addition to the `@type`

                                  field. Example (for message
                                  [google.protobuf.Duration][]):

                                      {
                                        "@type": "type.googleapis.com/google.protobuf.Duration",
                                        "value": "1.212s"
                                      }
                                properties:
                                  type_url:
                                    description: >-
                                      A URL/resource name that uniquely
                                      identifies the type of the serialized

                                      protocol buffer message. This string must
                                      contain at least

                                      one "/" character. The last segment of the
                                      URL's path must represent

                                      the fully qualified name of the type (as
                                      in

                                      `path/google.protobuf.Duration`). The name
                                      should be in a canonical form

                                      (e.g., leading "." is not accepted).


                                      In practice, teams usually precompile into
                                      the binary all types that they

                                      expect it to use in the context of Any.
                                      However, for URLs which use the

                                      scheme `http`, `https`, or no scheme, one
                                      can optionally set up a type

                                      server that maps type URLs to message
                                      definitions as follows:


                                      * If no scheme is provided, `https` is
                                      assumed.

                                      * An HTTP GET on the URL must yield a
                                      [google.protobuf.Type][]
                                        value in binary format, or produce an error.
                                      * Applications are allowed to cache lookup
                                      results based on the
                                        URL, or have them precompiled into a binary to avoid any
                                        lookup. Therefore, binary compatibility needs to be preserved
                                        on changes to types. (Use versioned type names to manage
                                        breaking changes.)

                                      Note: this functionality is not currently
                                      available in the official

                                      protobuf release, and it is not used for
                                      type URLs beginning with

                                      type.googleapis.com.


                                      Schemes other than `http`, `https` (or the
                                      empty scheme) might be

                                      used with implementation specific
                                      semantics.
                                    type: string
                                  value:
                                    description: >-
                                      Must be a valid serialized protocol buffer
                                      of the above specified type.
                                    format: byte
                                    type: string
                                type: object
                              title: >-
                                extension_options are arbitrary options that can
                                be added by chains

                                when the default options are not sufficient. If
                                any of these are present

                                and can't be handled, the transaction will be
                                rejected
                              type: array
                            memo:
                              description: >-
                                memo is any arbitrary note/comment to be added
                                to the transaction.

                                WARNING: in clients, any publicly exposed text
                                should not be called memo,

                                but should be called `note` instead (see
                                https://github.com/cosmos/cosmos-sdk/issues/9122).
                              type: string
                            messages:
                              description: >-
                                messages is a list of messages to be executed.
                                The required signers of

                                those messages define the number and order of
                                elements in AuthInfo's

                                signer_infos and Tx's signatures. Each required
                                signer address is added to

                                the list only the first time it occurs.

                                By convention, the first required signer
                                (usually from the first message)

                                is referred to as the primary signer and pays
                                the fee for the whole

                                transaction.
                              items:
                                description: >-
                                  `Any` contains an arbitrary serialized
                                  protocol buffer message along with a

                                  URL that describes the type of the serialized
                                  message.


                                  Protobuf library provides support to
                                  pack/unpack Any values in the form

                                  of utility functions or additional generated
                                  methods of the Any type.


                                  Example 1: Pack and unpack a message in C++.

                                      Foo foo = ...;
                                      Any any;
                                      any.PackFrom(foo);
                                      ...
                                      if (any.UnpackTo(&foo)) {
                                        ...
                                      }

                                  Example 2: Pack and unpack a message in Java.

                                      Foo foo = ...;
                                      Any any = Any.pack(foo);
                                      ...
                                      if (any.is(Foo.class)) {
                                        foo = any.unpack(Foo.class);
                                      }

                                   Example 3: Pack and unpack a message in Python.

                                      foo = Foo(...)
                                      any = Any()
                                      any.Pack(foo)
                                      ...
                                      if any.Is(Foo.DESCRIPTOR):
                                        any.Unpack(foo)
                                        ...

                                   Example 4: Pack and unpack a message in Go

                                       foo := &pb.Foo{...}
                                       any, err := anypb.New(foo)
                                       if err != nil {
                                         ...
                                       }
                                       ...
                                       foo := &pb.Foo{}
                                       if err := any.UnmarshalTo(foo); err != nil {
                                         ...
                                       }

                                  The pack methods provided by protobuf library
                                  will by default use

                                  'type.googleapis.com/full.type.name' as the
                                  type URL and the unpack

                                  methods only use the fully qualified type name
                                  after the last '/'

                                  in the type URL, for example
                                  "foo.bar.com/x/y.z" will yield type

                                  name "y.z".



                                  JSON

                                  ====

                                  The JSON representation of an `Any` value uses
                                  the regular

                                  representation of the deserialized, embedded
                                  message, with an

                                  additional field `@type` which contains the
                                  type URL. Example:

                                      package google.profile;
                                      message Person {
                                        string first_name = 1;
                                        string last_name = 2;
                                      }

                                      {
                                        "@type": "type.googleapis.com/google.profile.Person",
                                        "firstName": <string>,
                                        "lastName": <string>
                                      }

                                  If the embedded message type is well-known and
                                  has a custom JSON

                                  representation, that representation will be
                                  embedded adding a field

                                  `value` which holds the custom JSON in
                                  addition to the `@type`

                                  field. Example (for message
                                  [google.protobuf.Duration][]):

                                      {
                                        "@type": "type.googleapis.com/google.protobuf.Duration",
                                        "value": "1.212s"
                                      }
                                properties:
                                  type_url:
                                    description: >-
                                      A URL/resource name that uniquely
                                      identifies the type of the serialized

                                      protocol buffer message. This string must
                                      contain at least

                                      one "/" character. The last segment of the
                                      URL's path must represent

                                      the fully qualified name of the type (as
                                      in

                                      `path/google.protobuf.Duration`). The name
                                      should be in a canonical form

                                      (e.g., leading "." is not accepted).


                                      In practice, teams usually precompile into
                                      the binary all types that they

                                      expect it to use in the context of Any.
                                      However, for URLs which use the

                                      scheme `http`, `https`, or no scheme, one
                                      can optionally set up a type

                                      server that maps type URLs to message
                                      definitions as follows:


                                      * If no scheme is provided, `https` is
                                      assumed.

                                      * An HTTP GET on the URL must yield a
                                      [google.protobuf.Type][]
                                        value in binary format, or produce an error.
                                      * Applications are allowed to cache lookup
                                      results based on the
                                        URL, or have them precompiled into a binary to avoid any
                                        lookup. Therefore, binary compatibility needs to be preserved
                                        on changes to types. (Use versioned type names to manage
                                        breaking changes.)

                                      Note: this functionality is not currently
                                      available in the official

                                      protobuf release, and it is not used for
                                      type URLs beginning with

                                      type.googleapis.com.


                                      Schemes other than `http`, `https` (or the
                                      empty scheme) might be

                                      used with implementation specific
                                      semantics.
                                    type: string
                                  value:
                                    description: >-
                                      Must be a valid serialized protocol buffer
                                      of the above specified type.
                                    format: byte
                                    type: string
                                type: object
                              type: array
                            non_critical_extension_options:
                              items:
                                description: >-
                                  `Any` contains an arbitrary serialized
                                  protocol buffer message along with a

                                  URL that describes the type of the serialized
                                  message.


                                  Protobuf library provides support to
                                  pack/unpack Any values in the form

                                  of utility functions or additional generated
                                  methods of the Any type.


                                  Example 1: Pack and unpack a message in C++.

                                      Foo foo = ...;
                                      Any any;
                                      any.PackFrom(foo);
                                      ...
                                      if (any.UnpackTo(&foo)) {
                                        ...
                                      }

                                  Example 2: Pack and unpack a message in Java.

                                      Foo foo = ...;
                                      Any any = Any.pack(foo);
                                      ...
                                      if (any.is(Foo.class)) {
                                        foo = any.unpack(Foo.class);
                                      }

                                   Example 3: Pack and unpack a message in Python.

                                      foo = Foo(...)
                                      any = Any()
                                      any.Pack(foo)
                                      ...
                                      if any.Is(Foo.DESCRIPTOR):
                                        any.Unpack(foo)
                                        ...

                                   Example 4: Pack and unpack a message in Go

                                       foo := &pb.Foo{...}
                                       any, err := anypb.New(foo)
                                       if err != nil {
                                         ...
                                       }
                                       ...
                                       foo := &pb.Foo{}
                                       if err := any.UnmarshalTo(foo); err != nil {
                                         ...
                                       }

                                  The pack methods provided by protobuf library
                                  will by default use

                                  'type.googleapis.com/full.type.name' as the
                                  type URL and the unpack

                                  methods only use the fully qualified type name
                                  after the last '/'

                                  in the type URL, for example
                                  "foo.bar.com/x/y.z" will yield type

                                  name "y.z".



                                  JSON

                                  ====

                                  The JSON representation of an `Any` value uses
                                  the regular

                                  representation of the deserialized, embedded
                                  message, with an

                                  additional field `@type` which contains the
                                  type URL. Example:

                                      package google.profile;
                                      message Person {
                                        string first_name = 1;
                                        string last_name = 2;
                                      }

                                      {
                                        "@type": "type.googleapis.com/google.profile.Person",
                                        "firstName": <string>,
                                        "lastName": <string>
                                      }

                                  If the embedded message type is well-known and
                                  has a custom JSON

                                  representation, that representation will be
                                  embedded adding a field

                                  `value` which holds the custom JSON in
                                  addition to the `@type`

                                  field. Example (for message
                                  [google.protobuf.Duration][]):

                                      {
                                        "@type": "type.googleapis.com/google.protobuf.Duration",
                                        "value": "1.212s"
                                      }
                                properties:
                                  type_url:
                                    description: >-
                                      A URL/resource name that uniquely
                                      identifies the type of the serialized

                                      protocol buffer message. This string must
                                      contain at least

                                      one "/" character. The last segment of the
                                      URL's path must represent

                                      the fully qualified name of the type (as
                                      in

                                      `path/google.protobuf.Duration`). The name
                                      should be in a canonical form

                                      (e.g., leading "." is not accepted).


                                      In practice, teams usually precompile into
                                      the binary all types that they

                                      expect it to use in the context of Any.
                                      However, for URLs which use the

                                      scheme `http`, `https`, or no scheme, one
                                      can optionally set up a type

                                      server that maps type URLs to message
                                      definitions as follows:


                                      * If no scheme is provided, `https` is
                                      assumed.

                                      * An HTTP GET on the URL must yield a
                                      [google.protobuf.Type][]
                                        value in binary format, or produce an error.
                                      * Applications are allowed to cache lookup
                                      results based on the
                                        URL, or have them precompiled into a binary to avoid any
                                        lookup. Therefore, binary compatibility needs to be preserved
                                        on changes to types. (Use versioned type names to manage
                                        breaking changes.)

                                      Note: this functionality is not currently
                                      available in the official

                                      protobuf release, and it is not used for
                                      type URLs beginning with

                                      type.googleapis.com.


                                      Schemes other than `http`, `https` (or the
                                      empty scheme) might be

                                      used with implementation specific
                                      semantics.
                                    type: string
                                  value:
                                    description: >-
                                      Must be a valid serialized protocol buffer
                                      of the above specified type.
                                    format: byte
                                    type: string
                                type: object
                              title: >-
                                extension_options are arbitrary options that can
                                be added by chains

                                when the default options are not sufficient. If
                                any of these are present

                                and can't be handled, they will be ignored
                              type: array
                            timeout_height:
                              format: uint64
                              title: >-
                                timeout is the block height after which this
                                transaction will not

                                be processed by the chain
                              type: string
                          title: body is the processable content of the transaction
                          type: object
                        signatures:
                          description: >-
                            signatures is a list of signatures that matches the
                            length and order of

                            AuthInfo's signer_infos to allow connecting
                            signature meta information like

                            public key and signing mode by position.
                          items:
                            format: byte
                            type: string
                          type: array
                      type: object
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: GetBlockWithTxs fetches a block with decoded txs.
      tags:
        - cosmos/tx/v1beta1
  /cosmos/tx/v1beta1/txs/{hash}:
    get:
      operationId: GetTx
      parameters:
        - description: hash is the tx hash to query, encoded as a hex string.
          in: path
          name: hash
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  GetTxResponse is the response type for the Service.GetTx
                  method.
                properties:
                  tx:
                    description: >-
                      Tx is the standard type used for broadcasting
                      transactions.
                    properties:
                      auth_info:
                        description: >-
                          AuthInfo describes the fee and signer modes that are
                          used to sign a

                          transaction.
                        properties:
                          fee:
                            description: >-
                              Fee is the fee and gas limit for the transaction.
                              The first signer is the

                              primary signer and the one which pays the fee. The
                              fee can be calculated

                              based on the cost of evaluating the body and doing
                              signature verification

                              of the signers. This can be estimated via
                              simulation.
                            properties:
                              amount:
                                items:
                                  description: >-
                                    Coin defines a token with a denomination and
                                    an amount.


                                    NOTE: The amount field is an Int which
                                    implements the custom method

                                    signatures required by gogoproto.
                                  properties:
                                    amount:
                                      type: string
                                    denom:
                                      type: string
                                  type: object
                                title: >-
                                  amount is the amount of coins to be paid as a
                                  fee
                                type: array
                              gas_limit:
                                format: uint64
                                title: >-
                                  gas_limit is the maximum gas that can be used
                                  in transaction processing

                                  before an out of gas error occurs
                                type: string
                              granter:
                                title: >-
                                  if set, the fee payer (either the first signer
                                  or the value of the payer field) requests that
                                  a fee grant be used

                                  to pay fees instead of the fee payer's own
                                  balance. If an appropriate fee grant does not
                                  exist or the chain does

                                  not support fee grants, this will fail
                                type: string
                              payer:
                                description: >-
                                  if unset, the first signer is responsible for
                                  paying the fees. If set, the specified account
                                  must pay the fees.

                                  the payer must be a tx signer (and thus have
                                  signed this field in AuthInfo).

                                  setting this field does *not* change the
                                  ordering of required signers for the
                                  transaction.
                                type: string
                            type: object
                          signer_infos:
                            description: >-
                              signer_infos defines the signing modes for the
                              required signers. The number

                              and order of elements must match the required
                              signers from TxBody's

                              messages. The first element is the primary signer
                              and the one which pays

                              the fee.
                            items:
                              description: >-
                                SignerInfo describes the public key and signing
                                mode of a single top-level

                                signer.
                              properties:
                                mode_info:
                                  description: >-
                                    ModeInfo describes the signing mode of a
                                    single or nested multisig signer.
                                  properties:
                                    multi:
                                      properties:
                                        bitarray:
                                          description: >-
                                            CompactBitArray is an implementation of
                                            a space efficient bit array.

                                            This is used to ensure that the encoded
                                            data takes up a minimal amount of

                                            space after proto encoding.

                                            This is not thread safe, and is not
                                            intended for concurrent usage.
                                          properties:
                                            elems:
                                              format: byte
                                              type: string
                                            extra_bits_stored:
                                              format: int64
                                              type: integer
                                          title: >-
                                            bitarray specifies which keys within the
                                            multisig are signing
                                          type: object
                                        mode_infos:
                                          items: {}
                                          title: >-
                                            mode_infos is the corresponding modes of
                                            the signers of the multisig

                                            which could include nested multisig
                                            public keys
                                          type: array
                                      title: >-
                                        multi represents a nested multisig
                                        signer
                                      type: object
                                    single:
                                      properties:
                                        mode:
                                          default: SIGN_MODE_UNSPECIFIED
                                          description: >-
                                            SignMode represents a signing mode with
                                            its own security guarantees.

                                             - SIGN_MODE_UNSPECIFIED: SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
                                            rejected
                                             - SIGN_MODE_DIRECT: SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
                                            verified with raw bytes from Tx
                                             - SIGN_MODE_TEXTUAL: SIGN_MODE_TEXTUAL is a future signing mode that will verify some
                                            human-readable textual representation on
                                            top of the binary representation

                                            from SIGN_MODE_DIRECT
                                             - SIGN_MODE_LEGACY_AMINO_JSON: SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
                                            Amino JSON and will be removed in the
                                            future
                                             - SIGN_MODE_EIP_191: SIGN_MODE_EIP_191 specifies the sign mode for EIP 191 signing on the Cosmos
                                            SDK. Ref:
                                            https://eips.ethereum.org/EIPS/eip-191


                                            Currently, SIGN_MODE_EIP_191 is
                                            registered as a SignMode enum variant,

                                            but is not implemented on the SDK by
                                            default. To enable EIP-191, you need

                                            to pass a custom `TxConfig` that has an
                                            implementation of

                                            `SignModeHandler` for EIP-191. The SDK
                                            may decide to fully support

                                            EIP-191 in the future.


                                            Since: cosmos-sdk 0.45.2
                                          enum:
                                            - SIGN_MODE_UNSPECIFIED
                                            - SIGN_MODE_DIRECT
                                            - SIGN_MODE_TEXTUAL
                                            - SIGN_MODE_LEGACY_AMINO_JSON
                                            - SIGN_MODE_EIP_191
                                          title: >-
                                            mode is the signing mode of the single
                                            signer
                                          type: string
                                      title: single represents a single signer
                                      type: object
                                  title: >-
                                    mode_info describes the signing mode of the
                                    signer and is a nested

                                    structure to support nested multisig
                                    pubkey's
                                  type: object
                                public_key:
                                  description: >-
                                    `Any` contains an arbitrary serialized
                                    protocol buffer message along with a

                                    URL that describes the type of the
                                    serialized message.


                                    Protobuf library provides support to
                                    pack/unpack Any values in the form

                                    of utility functions or additional generated
                                    methods of the Any type.


                                    Example 1: Pack and unpack a message in C++.

                                        Foo foo = ...;
                                        Any any;
                                        any.PackFrom(foo);
                                        ...
                                        if (any.UnpackTo(&foo)) {
                                          ...
                                        }

                                    Example 2: Pack and unpack a message in
                                    Java.

                                        Foo foo = ...;
                                        Any any = Any.pack(foo);
                                        ...
                                        if (any.is(Foo.class)) {
                                          foo = any.unpack(Foo.class);
                                        }

                                     Example 3: Pack and unpack a message in Python.

                                        foo = Foo(...)
                                        any = Any()
                                        any.Pack(foo)
                                        ...
                                        if any.Is(Foo.DESCRIPTOR):
                                          any.Unpack(foo)
                                          ...

                                     Example 4: Pack and unpack a message in Go

                                         foo := &pb.Foo{...}
                                         any, err := anypb.New(foo)
                                         if err != nil {
                                           ...
                                         }
                                         ...
                                         foo := &pb.Foo{}
                                         if err := any.UnmarshalTo(foo); err != nil {
                                           ...
                                         }

                                    The pack methods provided by protobuf
                                    library will by default use

                                    'type.googleapis.com/full.type.name' as the
                                    type URL and the unpack

                                    methods only use the fully qualified type
                                    name after the last '/'

                                    in the type URL, for example
                                    "foo.bar.com/x/y.z" will yield type

                                    name "y.z".



                                    JSON

                                    ====

                                    The JSON representation of an `Any` value
                                    uses the regular

                                    representation of the deserialized, embedded
                                    message, with an

                                    additional field `@type` which contains the
                                    type URL. Example:

                                        package google.profile;
                                        message Person {
                                          string first_name = 1;
                                          string last_name = 2;
                                        }

                                        {
                                          "@type": "type.googleapis.com/google.profile.Person",
                                          "firstName": <string>,
                                          "lastName": <string>
                                        }

                                    If the embedded message type is well-known
                                    and has a custom JSON

                                    representation, that representation will be
                                    embedded adding a field

                                    `value` which holds the custom JSON in
                                    addition to the `@type`

                                    field. Example (for message
                                    [google.protobuf.Duration][]):

                                        {
                                          "@type": "type.googleapis.com/google.protobuf.Duration",
                                          "value": "1.212s"
                                        }
                                  properties:
                                    type_url:
                                      description: >-
                                        A URL/resource name that uniquely
                                        identifies the type of the serialized

                                        protocol buffer message. This string
                                        must contain at least

                                        one "/" character. The last segment of
                                        the URL's path must represent

                                        the fully qualified name of the type (as
                                        in

                                        `path/google.protobuf.Duration`). The
                                        name should be in a canonical form

                                        (e.g., leading "." is not accepted).


                                        In practice, teams usually precompile
                                        into the binary all types that they

                                        expect it to use in the context of Any.
                                        However, for URLs which use the

                                        scheme `http`, `https`, or no scheme,
                                        one can optionally set up a type

                                        server that maps type URLs to message
                                        definitions as follows:


                                        * If no scheme is provided, `https` is
                                        assumed.

                                        * An HTTP GET on the URL must yield a
                                        [google.protobuf.Type][]
                                          value in binary format, or produce an error.
                                        * Applications are allowed to cache
                                        lookup results based on the
                                          URL, or have them precompiled into a binary to avoid any
                                          lookup. Therefore, binary compatibility needs to be preserved
                                          on changes to types. (Use versioned type names to manage
                                          breaking changes.)

                                        Note: this functionality is not
                                        currently available in the official

                                        protobuf release, and it is not used for
                                        type URLs beginning with

                                        type.googleapis.com.


                                        Schemes other than `http`, `https` (or
                                        the empty scheme) might be

                                        used with implementation specific
                                        semantics.
                                      type: string
                                    value:
                                      description: >-
                                        Must be a valid serialized protocol
                                        buffer of the above specified type.
                                      format: byte
                                      type: string
                                  type: object
                                sequence:
                                  description: >-
                                    sequence is the sequence of the account,
                                    which describes the

                                    number of committed transactions signed by a
                                    given address. It is used to

                                    prevent replay attacks.
                                  format: uint64
                                  type: string
                              type: object
                            type: array
                        title: >-
                          auth_info is the authorization related content of the
                          transaction,

                          specifically signers, signer modes and fee
                        type: object
                      body:
                        description: >-
                          TxBody is the body of a transaction that all signers
                          sign over.
                        properties:
                          extension_options:
                            items:
                              description: >-
                                `Any` contains an arbitrary serialized protocol
                                buffer message along with a

                                URL that describes the type of the serialized
                                message.


                                Protobuf library provides support to pack/unpack
                                Any values in the form

                                of utility functions or additional generated
                                methods of the Any type.


                                Example 1: Pack and unpack a message in C++.

                                    Foo foo = ...;
                                    Any any;
                                    any.PackFrom(foo);
                                    ...
                                    if (any.UnpackTo(&foo)) {
                                      ...
                                    }

                                Example 2: Pack and unpack a message in Java.

                                    Foo foo = ...;
                                    Any any = Any.pack(foo);
                                    ...
                                    if (any.is(Foo.class)) {
                                      foo = any.unpack(Foo.class);
                                    }

                                 Example 3: Pack and unpack a message in Python.

                                    foo = Foo(...)
                                    any = Any()
                                    any.Pack(foo)
                                    ...
                                    if any.Is(Foo.DESCRIPTOR):
                                      any.Unpack(foo)
                                      ...

                                 Example 4: Pack and unpack a message in Go

                                     foo := &pb.Foo{...}
                                     any, err := anypb.New(foo)
                                     if err != nil {
                                       ...
                                     }
                                     ...
                                     foo := &pb.Foo{}
                                     if err := any.UnmarshalTo(foo); err != nil {
                                       ...
                                     }

                                The pack methods provided by protobuf library
                                will by default use

                                'type.googleapis.com/full.type.name' as the type
                                URL and the unpack

                                methods only use the fully qualified type name
                                after the last '/'

                                in the type URL, for example "foo.bar.com/x/y.z"
                                will yield type

                                name "y.z".



                                JSON

                                ====

                                The JSON representation of an `Any` value uses
                                the regular

                                representation of the deserialized, embedded
                                message, with an

                                additional field `@type` which contains the type
                                URL. Example:

                                    package google.profile;
                                    message Person {
                                      string first_name = 1;
                                      string last_name = 2;
                                    }

                                    {
                                      "@type": "type.googleapis.com/google.profile.Person",
                                      "firstName": <string>,
                                      "lastName": <string>
                                    }

                                If the embedded message type is well-known and
                                has a custom JSON

                                representation, that representation will be
                                embedded adding a field

                                `value` which holds the custom JSON in addition
                                to the `@type`

                                field. Example (for message
                                [google.protobuf.Duration][]):

                                    {
                                      "@type": "type.googleapis.com/google.protobuf.Duration",
                                      "value": "1.212s"
                                    }
                              properties:
                                type_url:
                                  description: >-
                                    A URL/resource name that uniquely identifies
                                    the type of the serialized

                                    protocol buffer message. This string must
                                    contain at least

                                    one "/" character. The last segment of the
                                    URL's path must represent

                                    the fully qualified name of the type (as in

                                    `path/google.protobuf.Duration`). The name
                                    should be in a canonical form

                                    (e.g., leading "." is not accepted).


                                    In practice, teams usually precompile into
                                    the binary all types that they

                                    expect it to use in the context of Any.
                                    However, for URLs which use the

                                    scheme `http`, `https`, or no scheme, one
                                    can optionally set up a type

                                    server that maps type URLs to message
                                    definitions as follows:


                                    * If no scheme is provided, `https` is
                                    assumed.

                                    * An HTTP GET on the URL must yield a
                                    [google.protobuf.Type][]
                                      value in binary format, or produce an error.
                                    * Applications are allowed to cache lookup
                                    results based on the
                                      URL, or have them precompiled into a binary to avoid any
                                      lookup. Therefore, binary compatibility needs to be preserved
                                      on changes to types. (Use versioned type names to manage
                                      breaking changes.)

                                    Note: this functionality is not currently
                                    available in the official

                                    protobuf release, and it is not used for
                                    type URLs beginning with

                                    type.googleapis.com.


                                    Schemes other than `http`, `https` (or the
                                    empty scheme) might be

                                    used with implementation specific semantics.
                                  type: string
                                value:
                                  description: >-
                                    Must be a valid serialized protocol buffer
                                    of the above specified type.
                                  format: byte
                                  type: string
                              type: object
                            title: >-
                              extension_options are arbitrary options that can
                              be added by chains

                              when the default options are not sufficient. If
                              any of these are present

                              and can't be handled, the transaction will be
                              rejected
                            type: array
                          memo:
                            description: >-
                              memo is any arbitrary note/comment to be added to
                              the transaction.

                              WARNING: in clients, any publicly exposed text
                              should not be called memo,

                              but should be called `note` instead (see
                              https://github.com/cosmos/cosmos-sdk/issues/9122).
                            type: string
                          messages:
                            description: >-
                              messages is a list of messages to be executed. The
                              required signers of

                              those messages define the number and order of
                              elements in AuthInfo's

                              signer_infos and Tx's signatures. Each required
                              signer address is added to

                              the list only the first time it occurs.

                              By convention, the first required signer (usually
                              from the first message)

                              is referred to as the primary signer and pays the
                              fee for the whole

                              transaction.
                            items:
                              description: >-
                                `Any` contains an arbitrary serialized protocol
                                buffer message along with a

                                URL that describes the type of the serialized
                                message.


                                Protobuf library provides support to pack/unpack
                                Any values in the form

                                of utility functions or additional generated
                                methods of the Any type.


                                Example 1: Pack and unpack a message in C++.

                                    Foo foo = ...;
                                    Any any;
                                    any.PackFrom(foo);
                                    ...
                                    if (any.UnpackTo(&foo)) {
                                      ...
                                    }

                                Example 2: Pack and unpack a message in Java.

                                    Foo foo = ...;
                                    Any any = Any.pack(foo);
                                    ...
                                    if (any.is(Foo.class)) {
                                      foo = any.unpack(Foo.class);
                                    }

                                 Example 3: Pack and unpack a message in Python.

                                    foo = Foo(...)
                                    any = Any()
                                    any.Pack(foo)
                                    ...
                                    if any.Is(Foo.DESCRIPTOR):
                                      any.Unpack(foo)
                                      ...

                                 Example 4: Pack and unpack a message in Go

                                     foo := &pb.Foo{...}
                                     any, err := anypb.New(foo)
                                     if err != nil {
                                       ...
                                     }
                                     ...
                                     foo := &pb.Foo{}
                                     if err := any.UnmarshalTo(foo); err != nil {
                                       ...
                                     }

                                The pack methods provided by protobuf library
                                will by default use

                                'type.googleapis.com/full.type.name' as the type
                                URL and the unpack

                                methods only use the fully qualified type name
                                after the last '/'

                                in the type URL, for example "foo.bar.com/x/y.z"
                                will yield type

                                name "y.z".



                                JSON

                                ====

                                The JSON representation of an `Any` value uses
                                the regular

                                representation of the deserialized, embedded
                                message, with an

                                additional field `@type` which contains the type
                                URL. Example:

                                    package google.profile;
                                    message Person {
                                      string first_name = 1;
                                      string last_name = 2;
                                    }

                                    {
                                      "@type": "type.googleapis.com/google.profile.Person",
                                      "firstName": <string>,
                                      "lastName": <string>
                                    }

                                If the embedded message type is well-known and
                                has a custom JSON

                                representation, that representation will be
                                embedded adding a field

                                `value` which holds the custom JSON in addition
                                to the `@type`

                                field. Example (for message
                                [google.protobuf.Duration][]):

                                    {
                                      "@type": "type.googleapis.com/google.protobuf.Duration",
                                      "value": "1.212s"
                                    }
                              properties:
                                type_url:
                                  description: >-
                                    A URL/resource name that uniquely identifies
                                    the type of the serialized

                                    protocol buffer message. This string must
                                    contain at least

                                    one "/" character. The last segment of the
                                    URL's path must represent

                                    the fully qualified name of the type (as in

                                    `path/google.protobuf.Duration`). The name
                                    should be in a canonical form

                                    (e.g., leading "." is not accepted).


                                    In practice, teams usually precompile into
                                    the binary all types that they

                                    expect it to use in the context of Any.
                                    However, for URLs which use the

                                    scheme `http`, `https`, or no scheme, one
                                    can optionally set up a type

                                    server that maps type URLs to message
                                    definitions as follows:


                                    * If no scheme is provided, `https` is
                                    assumed.

                                    * An HTTP GET on the URL must yield a
                                    [google.protobuf.Type][]
                                      value in binary format, or produce an error.
                                    * Applications are allowed to cache lookup
                                    results based on the
                                      URL, or have them precompiled into a binary to avoid any
                                      lookup. Therefore, binary compatibility needs to be preserved
                                      on changes to types. (Use versioned type names to manage
                                      breaking changes.)

                                    Note: this functionality is not currently
                                    available in the official

                                    protobuf release, and it is not used for
                                    type URLs beginning with

                                    type.googleapis.com.


                                    Schemes other than `http`, `https` (or the
                                    empty scheme) might be

                                    used with implementation specific semantics.
                                  type: string
                                value:
                                  description: >-
                                    Must be a valid serialized protocol buffer
                                    of the above specified type.
                                  format: byte
                                  type: string
                              type: object
                            type: array
                          non_critical_extension_options:
                            items:
                              description: >-
                                `Any` contains an arbitrary serialized protocol
                                buffer message along with a

                                URL that describes the type of the serialized
                                message.


                                Protobuf library provides support to pack/unpack
                                Any values in the form

                                of utility functions or additional generated
                                methods of the Any type.


                                Example 1: Pack and unpack a message in C++.

                                    Foo foo = ...;
                                    Any any;
                                    any.PackFrom(foo);
                                    ...
                                    if (any.UnpackTo(&foo)) {
                                      ...
                                    }

                                Example 2: Pack and unpack a message in Java.

                                    Foo foo = ...;
                                    Any any = Any.pack(foo);
                                    ...
                                    if (any.is(Foo.class)) {
                                      foo = any.unpack(Foo.class);
                                    }

                                 Example 3: Pack and unpack a message in Python.

                                    foo = Foo(...)
                                    any = Any()
                                    any.Pack(foo)
                                    ...
                                    if any.Is(Foo.DESCRIPTOR):
                                      any.Unpack(foo)
                                      ...

                                 Example 4: Pack and unpack a message in Go

                                     foo := &pb.Foo{...}
                                     any, err := anypb.New(foo)
                                     if err != nil {
                                       ...
                                     }
                                     ...
                                     foo := &pb.Foo{}
                                     if err := any.UnmarshalTo(foo); err != nil {
                                       ...
                                     }

                                The pack methods provided by protobuf library
                                will by default use

                                'type.googleapis.com/full.type.name' as the type
                                URL and the unpack

                                methods only use the fully qualified type name
                                after the last '/'

                                in the type URL, for example "foo.bar.com/x/y.z"
                                will yield type

                                name "y.z".



                                JSON

                                ====

                                The JSON representation of an `Any` value uses
                                the regular

                                representation of the deserialized, embedded
                                message, with an

                                additional field `@type` which contains the type
                                URL. Example:

                                    package google.profile;
                                    message Person {
                                      string first_name = 1;
                                      string last_name = 2;
                                    }

                                    {
                                      "@type": "type.googleapis.com/google.profile.Person",
                                      "firstName": <string>,
                                      "lastName": <string>
                                    }

                                If the embedded message type is well-known and
                                has a custom JSON

                                representation, that representation will be
                                embedded adding a field

                                `value` which holds the custom JSON in addition
                                to the `@type`

                                field. Example (for message
                                [google.protobuf.Duration][]):

                                    {
                                      "@type": "type.googleapis.com/google.protobuf.Duration",
                                      "value": "1.212s"
                                    }
                              properties:
                                type_url:
                                  description: >-
                                    A URL/resource name that uniquely identifies
                                    the type of the serialized

                                    protocol buffer message. This string must
                                    contain at least

                                    one "/" character. The last segment of the
                                    URL's path must represent

                                    the fully qualified name of the type (as in

                                    `path/google.protobuf.Duration`). The name
                                    should be in a canonical form

                                    (e.g., leading "." is not accepted).


                                    In practice, teams usually precompile into
                                    the binary all types that they

                                    expect it to use in the context of Any.
                                    However, for URLs which use the

                                    scheme `http`, `https`, or no scheme, one
                                    can optionally set up a type

                                    server that maps type URLs to message
                                    definitions as follows:


                                    * If no scheme is provided, `https` is
                                    assumed.

                                    * An HTTP GET on the URL must yield a
                                    [google.protobuf.Type][]
                                      value in binary format, or produce an error.
                                    * Applications are allowed to cache lookup
                                    results based on the
                                      URL, or have them precompiled into a binary to avoid any
                                      lookup. Therefore, binary compatibility needs to be preserved
                                      on changes to types. (Use versioned type names to manage
                                      breaking changes.)

                                    Note: this functionality is not currently
                                    available in the official

                                    protobuf release, and it is not used for
                                    type URLs beginning with

                                    type.googleapis.com.


                                    Schemes other than `http`, `https` (or the
                                    empty scheme) might be

                                    used with implementation specific semantics.
                                  type: string
                                value:
                                  description: >-
                                    Must be a valid serialized protocol buffer
                                    of the above specified type.
                                  format: byte
                                  type: string
                              type: object
                            title: >-
                              extension_options are arbitrary options that can
                              be added by chains

                              when the default options are not sufficient. If
                              any of these are present

                              and can't be handled, they will be ignored
                            type: array
                          timeout_height:
                            format: uint64
                            title: >-
                              timeout is the block height after which this
                              transaction will not

                              be processed by the chain
                            type: string
                        title: body is the processable content of the transaction
                        type: object
                      signatures:
                        description: >-
                          signatures is a list of signatures that matches the
                          length and order of

                          AuthInfo's signer_infos to allow connecting signature
                          meta information like

                          public key and signing mode by position.
                        items:
                          format: byte
                          type: string
                        type: array
                    type: object
                  tx_response:
                    description: >-
                      TxResponse defines a structure containing relevant tx data
                      and metadata. The

                      tags are stringified and the log is JSON decoded.
                    properties:
                      code:
                        description: Response code.
                        format: int64
                        type: integer
                      codespace:
                        title: Namespace for the Code
                        type: string
                      data:
                        description: Result bytes, if any.
                        type: string
                      events:
                        description: >-
                          Events defines all the events emitted by processing a
                          transaction. Note,

                          these events include those emitted by processing all
                          the messages and those

                          emitted from the ante handler. Whereas Logs contains
                          the events, with

                          additional metadata, emitted only by processing the
                          messages.


                          Since: cosmos-sdk 0.42.11, 0.44.5, 0.45
                        items:
                          description: >-
                            Event allows application developers to attach
                            additional information to

                            ResponseBeginBlock, ResponseEndBlock,
                            ResponseCheckTx and ResponseDeliverTx.

                            Later, transactions may be queried using these
                            events.
                          properties:
                            attributes:
                              items:
                                description: >-
                                  EventAttribute is a single key-value pair,
                                  associated with an event.
                                properties:
                                  index:
                                    type: boolean
                                  key:
                                    format: byte
                                    type: string
                                  value:
                                    format: byte
                                    type: string
                                type: object
                              type: array
                            type:
                              type: string
                          type: object
                        type: array
                      gas_used:
                        description: Amount of gas consumed by transaction.
                        format: int64
                        type: string
                      gas_wanted:
                        description: Amount of gas requested for transaction.
                        format: int64
                        type: string
                      height:
                        format: int64
                        title: The block height
                        type: string
                      info:
                        description: Additional information. May be non-deterministic.
                        type: string
                      logs:
                        description: >-
                          The output of the application's logger (typed). May be
                          non-deterministic.
                        items:
                          description: >-
                            ABCIMessageLog defines a structure containing an
                            indexed tx ABCI message log.
                          properties:
                            events:
                              description: >-
                                Events contains a slice of Event objects that
                                were emitted during some

                                execution.
                              items:
                                description: >-
                                  StringEvent defines en Event object wrapper
                                  where all the attributes

                                  contain key/value pairs that are strings
                                  instead of raw bytes.
                                properties:
                                  attributes:
                                    items:
                                      description: >-
                                        Attribute defines an attribute wrapper
                                        where the key and value are

                                        strings instead of raw bytes.
                                      properties:
                                        key:
                                          type: string
                                        value:
                                          type: string
                                      type: object
                                    type: array
                                  type:
                                    type: string
                                type: object
                              type: array
                            log:
                              type: string
                            msg_index:
                              format: int64
                              type: integer
                          type: object
                        type: array
                      raw_log:
                        description: >-
                          The output of the application's logger (raw string).
                          May be

                          non-deterministic.
                        type: string
                      timestamp:
                        description: >-
                          Time of the previous block. For heights > 1, it's the
                          weighted median of

                          the timestamps of the valid votes in the
                          block.LastCommit. For height == 1,

                          it's genesis time.
                        type: string
                      tx:
                        description: >-
                          `Any` contains an arbitrary serialized protocol buffer
                          message along with a

                          URL that describes the type of the serialized message.


                          Protobuf library provides support to pack/unpack Any
                          values in the form

                          of utility functions or additional generated methods
                          of the Any type.


                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }

                           Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                           Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := anypb.New(foo)
                               if err != nil {
                                 ...
                               }
                               ...
                               foo := &pb.Foo{}
                               if err := any.UnmarshalTo(foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by
                          default use

                          'type.googleapis.com/full.type.name' as the type URL
                          and the unpack

                          methods only use the fully qualified type name after
                          the last '/'

                          in the type URL, for example "foo.bar.com/x/y.z" will
                          yield type

                          name "y.z".



                          JSON

                          ====

                          The JSON representation of an `Any` value uses the
                          regular

                          representation of the deserialized, embedded message,
                          with an

                          additional field `@type` which contains the type URL.
                          Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a
                          custom JSON

                          representation, that representation will be embedded
                          adding a field

                          `value` which holds the custom JSON in addition to the
                          `@type`

                          field. Example (for message
                          [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                        properties:
                          type_url:
                            description: >-
                              A URL/resource name that uniquely identifies the
                              type of the serialized

                              protocol buffer message. This string must contain
                              at least

                              one "/" character. The last segment of the URL's
                              path must represent

                              the fully qualified name of the type (as in

                              `path/google.protobuf.Duration`). The name should
                              be in a canonical form

                              (e.g., leading "." is not accepted).


                              In practice, teams usually precompile into the
                              binary all types that they

                              expect it to use in the context of Any. However,
                              for URLs which use the

                              scheme `http`, `https`, or no scheme, one can
                              optionally set up a type

                              server that maps type URLs to message definitions
                              as follows:


                              * If no scheme is provided, `https` is assumed.

                              * An HTTP GET on the URL must yield a
                              [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results
                              based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently
                              available in the official

                              protobuf release, and it is not used for type URLs
                              beginning with

                              type.googleapis.com.


                              Schemes other than `http`, `https` (or the empty
                              scheme) might be

                              used with implementation specific semantics.
                            type: string
                          value:
                            description: >-
                              Must be a valid serialized protocol buffer of the
                              above specified type.
                            format: byte
                            type: string
                        type: object
                      txhash:
                        description: The transaction hash.
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: GetTx fetches a tx by hash.
      tags:
        - cosmos/tx/v1beta1
  /cosmos/upgrade/v1beta1/applied_plan/{name}:
    get:
      operationId: AppliedPlan
      parameters:
        - description: name is the name of the applied plan to query for.
          in: path
          name: name
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryAppliedPlanResponse is the response type for the
                  Query/AppliedPlan RPC

                  method.
                properties:
                  height:
                    description: height is the block height at which the plan was applied.
                    format: int64
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: AppliedPlan queries a previously applied upgrade plan by its name.
      tags:
        - cosmos/upgrade/v1beta1
  /cosmos/upgrade/v1beta1/current_plan:
    get:
      operationId: CurrentPlan
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryCurrentPlanResponse is the response type for the
                  Query/CurrentPlan RPC

                  method.
                properties:
                  plan:
                    description: plan is the current upgrade plan.
                    properties:
                      height:
                        description: |-
                          The height at which the upgrade must be performed.
                          Only used if Time is not set.
                        format: int64
                        type: string
                      info:
                        title: >-
                          Any application specific upgrade info to be included
                          on-chain

                          such as a git commit that validators could
                          automatically upgrade to
                        type: string
                      name:
                        description: >-
                          Sets the name for the upgrade. This name will be used
                          by the upgraded

                          version of the software to apply any special
                          "on-upgrade" commands during

                          the first BeginBlock method after the upgrade is
                          applied. It is also used

                          to detect whether a software version can handle a
                          given upgrade. If no

                          upgrade handler with this name has been set in the
                          software, it will be

                          assumed that the software is out-of-date when the
                          upgrade Time or Height is

                          reached and the software will exit.
                        type: string
                      time:
                        description: >-
                          Deprecated: Time based upgrades have been deprecated.
                          Time based upgrade logic

                          has been removed from the SDK.

                          If this field is not empty, an error will be thrown.
                        format: date-time
                        type: string
                      upgraded_client_state:
                        description: >-
                          `Any` contains an arbitrary serialized protocol buffer
                          message along with a

                          URL that describes the type of the serialized message.


                          Protobuf library provides support to pack/unpack Any
                          values in the form

                          of utility functions or additional generated methods
                          of the Any type.


                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }

                           Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                           Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := anypb.New(foo)
                               if err != nil {
                                 ...
                               }
                               ...
                               foo := &pb.Foo{}
                               if err := any.UnmarshalTo(foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by
                          default use

                          'type.googleapis.com/full.type.name' as the type URL
                          and the unpack

                          methods only use the fully qualified type name after
                          the last '/'

                          in the type URL, for example "foo.bar.com/x/y.z" will
                          yield type

                          name "y.z".



                          JSON

                          ====

                          The JSON representation of an `Any` value uses the
                          regular

                          representation of the deserialized, embedded message,
                          with an

                          additional field `@type` which contains the type URL.
                          Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a
                          custom JSON

                          representation, that representation will be embedded
                          adding a field

                          `value` which holds the custom JSON in addition to the
                          `@type`

                          field. Example (for message
                          [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                        properties:
                          type_url:
                            description: >-
                              A URL/resource name that uniquely identifies the
                              type of the serialized

                              protocol buffer message. This string must contain
                              at least

                              one "/" character. The last segment of the URL's
                              path must represent

                              the fully qualified name of the type (as in

                              `path/google.protobuf.Duration`). The name should
                              be in a canonical form

                              (e.g., leading "." is not accepted).


                              In practice, teams usually precompile into the
                              binary all types that they

                              expect it to use in the context of Any. However,
                              for URLs which use the

                              scheme `http`, `https`, or no scheme, one can
                              optionally set up a type

                              server that maps type URLs to message definitions
                              as follows:


                              * If no scheme is provided, `https` is assumed.

                              * An HTTP GET on the URL must yield a
                              [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results
                              based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently
                              available in the official

                              protobuf release, and it is not used for type URLs
                              beginning with

                              type.googleapis.com.


                              Schemes other than `http`, `https` (or the empty
                              scheme) might be

                              used with implementation specific semantics.
                            type: string
                          value:
                            description: >-
                              Must be a valid serialized protocol buffer of the
                              above specified type.
                            format: byte
                            type: string
                        type: object
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: CurrentPlan queries the current upgrade plan.
      tags:
        - cosmos/upgrade/v1beta1
  /cosmos/upgrade/v1beta1/module_versions:
    get:
      description: 'Since: cosmos-sdk 0.43'
      operationId: ModuleVersions
      parameters:
        - description: |-
            module_name is a field to query a specific module
            consensus version from state. Leaving this empty will
            fetch the full list of module versions from state.
          in: query
          name: module_name
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryModuleVersionsResponse is the response type for the
                  Query/ModuleVersions

                  RPC method.


                  Since: cosmos-sdk 0.43
                properties:
                  module_versions:
                    description: >-
                      module_versions is a list of module names with their
                      consensus versions.
                    items:
                      description: >-
                        ModuleVersion specifies a module and its consensus
                        version.


                        Since: cosmos-sdk 0.43
                      properties:
                        name:
                          title: name of the app module
                          type: string
                        version:
                          format: uint64
                          title: consensus version of the app module
                          type: string
                      type: object
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: ModuleVersions queries the list of module versions from state.
      tags:
        - cosmos/upgrade/v1beta1
  /cosmos/upgrade/v1beta1/upgraded_consensus_state/{last_height}:
    get:
      operationId: UpgradedConsensusState
      parameters:
        - description: |-
            last height of the current chain must be sent in request
            as this is the height under which next consensus state is stored
          in: path
          name: last_height
          required: true
          schema:
            format: int64
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryUpgradedConsensusStateResponse is the response type for
                  the Query/UpgradedConsensusState

                  RPC method.
                properties:
                  upgraded_consensus_state:
                    format: byte
                    title: 'Since: cosmos-sdk 0.43'
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        UpgradedConsensusState queries the consensus state that will serve

        as a trusted kernel for the next version of this chain. It will only be

        stored at the last height of this chain.

        UpgradedConsensusState RPC not supported with legacy querier

        This rpc is deprecated now that IBC has its own replacement

        (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)
      tags:
        - cosmos/upgrade/v1beta1
  /cosmwasm/wasm/v1/code:
    get:
      operationId: Codes
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  code_infos:
                    items:
                      properties:
                        code_id:
                          format: uint64
                          type: string
                        creator:
                          type: string
                        data_hash:
                          format: byte
                          type: string
                        instantiate_permission:
                          description: AccessConfig access control type.
                          properties:
                            address:
                              title: |-
                                Address
                                Deprecated: replaced by addresses
                              type: string
                            addresses:
                              items:
                                type: string
                              type: array
                            permission:
                              default: ACCESS_TYPE_UNSPECIFIED
                              description: >-
                                - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified
                                placeholder for empty value
                                 - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
                                 - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
                                Deprecated: use AccessTypeAnyOfAddresses instead
                                 - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
                                 - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
                              enum:
                                - ACCESS_TYPE_UNSPECIFIED
                                - ACCESS_TYPE_NOBODY
                                - ACCESS_TYPE_ONLY_ADDRESS
                                - ACCESS_TYPE_EVERYBODY
                                - ACCESS_TYPE_ANY_OF_ADDRESSES
                              title: AccessType permission types
                              type: string
                          type: object
                      title: CodeInfoResponse contains code meta data from CodeInfo
                      type: object
                    type: array
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                title: >-
                  QueryCodesResponse is the response type for the Query/Codes
                  RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Codes gets the metadata for all stored wasm codes
      tags:
        - cosmwasm/wasm/v1
  /cosmwasm/wasm/v1/code/{code_id}:
    get:
      operationId: Code
      parameters:
        - in: path
          name: code_id
          required: true
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  code_info:
                    properties:
                      code_id:
                        format: uint64
                        type: string
                      creator:
                        type: string
                      data_hash:
                        format: byte
                        type: string
                      instantiate_permission:
                        description: AccessConfig access control type.
                        properties:
                          address:
                            title: |-
                              Address
                              Deprecated: replaced by addresses
                            type: string
                          addresses:
                            items:
                              type: string
                            type: array
                          permission:
                            default: ACCESS_TYPE_UNSPECIFIED
                            description: >-
                              - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified
                              placeholder for empty value
                               - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
                               - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
                              Deprecated: use AccessTypeAnyOfAddresses instead
                               - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
                               - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
                            enum:
                              - ACCESS_TYPE_UNSPECIFIED
                              - ACCESS_TYPE_NOBODY
                              - ACCESS_TYPE_ONLY_ADDRESS
                              - ACCESS_TYPE_EVERYBODY
                              - ACCESS_TYPE_ANY_OF_ADDRESSES
                            title: AccessType permission types
                            type: string
                        type: object
                    title: CodeInfoResponse contains code meta data from CodeInfo
                    type: object
                  data:
                    format: byte
                    type: string
                title: >-
                  QueryCodeResponse is the response type for the Query/Code RPC
                  method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Code gets the binary code and metadata for a singe wasm code
      tags:
        - cosmwasm/wasm/v1
  /cosmwasm/wasm/v1/code/{code_id}/contracts:
    get:
      operationId: ContractsByCode
      parameters:
        - in: path
          name: code_id
          required: true
          schema:
            format: uint64
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  contracts:
                    items:
                      type: string
                    title: contracts are a set of contract addresses
                    type: array
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                title: |-
                  QueryContractsByCodeResponse is the response type for the
                  Query/ContractsByCode RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: ContractsByCode lists all smart contracts for a code id
      tags:
        - cosmwasm/wasm/v1
  /cosmwasm/wasm/v1/codes/params:
    get:
      operationId: Params
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryParamsResponse is the response type for the Query/Params
                  RPC method.
                properties:
                  params:
                    description: params defines the parameters of the module.
                    properties:
                      code_upload_access:
                        description: AccessConfig access control type.
                        properties:
                          address:
                            title: |-
                              Address
                              Deprecated: replaced by addresses
                            type: string
                          addresses:
                            items:
                              type: string
                            type: array
                          permission:
                            default: ACCESS_TYPE_UNSPECIFIED
                            description: >-
                              - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified
                              placeholder for empty value
                               - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
                               - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
                              Deprecated: use AccessTypeAnyOfAddresses instead
                               - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
                               - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
                            enum:
                              - ACCESS_TYPE_UNSPECIFIED
                              - ACCESS_TYPE_NOBODY
                              - ACCESS_TYPE_ONLY_ADDRESS
                              - ACCESS_TYPE_EVERYBODY
                              - ACCESS_TYPE_ANY_OF_ADDRESSES
                            title: AccessType permission types
                            type: string
                        type: object
                      instantiate_default_permission:
                        default: ACCESS_TYPE_UNSPECIFIED
                        description: >-
                          - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified
                          placeholder for empty value
                           - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden
                           - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to a single address
                          Deprecated: use AccessTypeAnyOfAddresses instead
                           - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
                           - ACCESS_TYPE_ANY_OF_ADDRESSES: AccessTypeAnyOfAddresses allow any of the addresses
                        enum:
                          - ACCESS_TYPE_UNSPECIFIED
                          - ACCESS_TYPE_NOBODY
                          - ACCESS_TYPE_ONLY_ADDRESS
                          - ACCESS_TYPE_EVERYBODY
                          - ACCESS_TYPE_ANY_OF_ADDRESSES
                        title: AccessType permission types
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Params gets the module params
      tags:
        - cosmwasm/wasm/v1
  /cosmwasm/wasm/v1/codes/pinned:
    get:
      operationId: PinnedCodes
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  code_ids:
                    items:
                      format: uint64
                      type: string
                    type: array
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                title: |-
                  QueryPinnedCodesResponse is the response type for the
                  Query/PinnedCodes RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: PinnedCodes gets the pinned code ids
      tags:
        - cosmwasm/wasm/v1
  /cosmwasm/wasm/v1/contract/{address}:
    get:
      operationId: ContractInfo
      parameters:
        - description: address is the address of the contract to query
          in: path
          name: address
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  address:
                    title: address is the address of the contract
                    type: string
                  contract_info:
                    properties:
                      admin:
                        title: >-
                          Admin is an optional address that can execute
                          migrations
                        type: string
                      code_id:
                        format: uint64
                        title: CodeID is the reference to the stored Wasm code
                        type: string
                      created:
                        description: >-
                          Created Tx position when the contract was
                          instantiated.
                        properties:
                          block_height:
                            format: uint64
                            title: >-
                              BlockHeight is the block the contract was created
                              at
                            type: string
                          tx_index:
                            format: uint64
                            title: >-
                              TxIndex is a monotonic counter within the block
                              (actual transaction index,

                              or gas consumed)
                            type: string
                        type: object
                      creator:
                        title: >-
                          Creator address who initially instantiated the
                          contract
                        type: string
                      extension:
                        description: >-
                          `Any` contains an arbitrary serialized protocol buffer
                          message along with a

                          URL that describes the type of the serialized message.


                          Protobuf library provides support to pack/unpack Any
                          values in the form

                          of utility functions or additional generated methods
                          of the Any type.


                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }

                           Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                           Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := anypb.New(foo)
                               if err != nil {
                                 ...
                               }
                               ...
                               foo := &pb.Foo{}
                               if err := any.UnmarshalTo(foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by
                          default use

                          'type.googleapis.com/full.type.name' as the type URL
                          and the unpack

                          methods only use the fully qualified type name after
                          the last '/'

                          in the type URL, for example "foo.bar.com/x/y.z" will
                          yield type

                          name "y.z".



                          JSON

                          ====

                          The JSON representation of an `Any` value uses the
                          regular

                          representation of the deserialized, embedded message,
                          with an

                          additional field `@type` which contains the type URL.
                          Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a
                          custom JSON

                          representation, that representation will be embedded
                          adding a field

                          `value` which holds the custom JSON in addition to the
                          `@type`

                          field. Example (for message
                          [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                        properties:
                          type_url:
                            description: >-
                              A URL/resource name that uniquely identifies the
                              type of the serialized

                              protocol buffer message. This string must contain
                              at least

                              one "/" character. The last segment of the URL's
                              path must represent

                              the fully qualified name of the type (as in

                              `path/google.protobuf.Duration`). The name should
                              be in a canonical form

                              (e.g., leading "." is not accepted).


                              In practice, teams usually precompile into the
                              binary all types that they

                              expect it to use in the context of Any. However,
                              for URLs which use the

                              scheme `http`, `https`, or no scheme, one can
                              optionally set up a type

                              server that maps type URLs to message definitions
                              as follows:


                              * If no scheme is provided, `https` is assumed.

                              * An HTTP GET on the URL must yield a
                              [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results
                              based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently
                              available in the official

                              protobuf release, and it is not used for type URLs
                              beginning with

                              type.googleapis.com.


                              Schemes other than `http`, `https` (or the empty
                              scheme) might be

                              used with implementation specific semantics.
                            type: string
                          value:
                            description: >-
                              Must be a valid serialized protocol buffer of the
                              above specified type.
                            format: byte
                            type: string
                        type: object
                      ibc_port_id:
                        type: string
                      label:
                        description: >-
                          Label is optional metadata to be stored with a
                          contract instance.
                        type: string
                    title: ContractInfo stores a WASM contract instance
                    type: object
                title: >-
                  QueryContractInfoResponse is the response type for the
                  Query/ContractInfo RPC

                  method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: ContractInfo gets the contract meta data
      tags:
        - cosmwasm/wasm/v1
  /cosmwasm/wasm/v1/contract/{address}/history:
    get:
      operationId: ContractHistory
      parameters:
        - description: address is the address of the contract to query
          in: path
          name: address
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  entries:
                    items:
                      description: ContractCodeHistoryEntry metadata to a contract.
                      properties:
                        code_id:
                          format: uint64
                          title: CodeID is the reference to the stored WASM code
                          type: string
                        msg:
                          format: byte
                          type: string
                        operation:
                          default: CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
                          description: >-
                            - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED:
                            ContractCodeHistoryOperationTypeUnspecified
                            placeholder for empty value
                             - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT: ContractCodeHistoryOperationTypeInit on chain contract instantiation
                             - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE: ContractCodeHistoryOperationTypeMigrate code migration
                             - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS: ContractCodeHistoryOperationTypeGenesis based on genesis data
                          enum:
                            - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED
                            - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT
                            - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE
                            - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS
                          title: >-
                            ContractCodeHistoryOperationType actions that caused
                            a code change
                          type: string
                        updated:
                          description: Updated Tx position when the operation was executed.
                          properties:
                            block_height:
                              format: uint64
                              title: >-
                                BlockHeight is the block the contract was
                                created at
                              type: string
                            tx_index:
                              format: uint64
                              title: >-
                                TxIndex is a monotonic counter within the block
                                (actual transaction index,

                                or gas consumed)
                              type: string
                          type: object
                      type: object
                    type: array
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                title: |-
                  QueryContractHistoryResponse is the response type for the
                  Query/ContractHistory RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: ContractHistory gets the contract code history
      tags:
        - cosmwasm/wasm/v1
  /cosmwasm/wasm/v1/contract/{address}/raw/{query_data}:
    get:
      operationId: RawContractState
      parameters:
        - description: address is the address of the contract
          in: path
          name: address
          required: true
          schema:
            type: string
        - in: path
          name: query_data
          required: true
          schema:
            format: byte
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    format: byte
                    title: Data contains the raw store data
                    type: string
                title: |-
                  QueryRawContractStateResponse is the response type for the
                  Query/RawContractState RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: RawContractState gets single key from the raw store data of a contract
      tags:
        - cosmwasm/wasm/v1
  /cosmwasm/wasm/v1/contract/{address}/smart/{query_data}:
    get:
      operationId: SmartContractState
      parameters:
        - description: address is the address of the contract
          in: path
          name: address
          required: true
          schema:
            type: string
        - description: QueryData contains the query data passed to the contract
          in: path
          name: query_data
          required: true
          schema:
            format: byte
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    format: byte
                    title: >-
                      Data contains the json data returned from the smart
                      contract
                    type: string
                title: |-
                  QuerySmartContractStateResponse is the response type for the
                  Query/SmartContractState RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: SmartContractState get smart query result from the contract
      tags:
        - cosmwasm/wasm/v1
  /cosmwasm/wasm/v1/contract/{address}/state:
    get:
      operationId: AllContractState
      parameters:
        - description: address is the address of the contract
          in: path
          name: address
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  models:
                    items:
                      properties:
                        key:
                          format: byte
                          title: >-
                            hex-encode key to read it better (this is often
                            ascii)
                          type: string
                        value:
                          format: byte
                          title: base64-encode raw value
                          type: string
                      title: Model is a struct that holds a KV pair
                      type: object
                    type: array
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                title: |-
                  QueryAllContractStateResponse is the response type for the
                  Query/AllContractState RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: AllContractState gets all raw store data for a single contract
      tags:
        - cosmwasm/wasm/v1
  /cosmwasm/wasm/v1/contracts/creator/{creator_address}:
    get:
      operationId: ContractsByCreator
      parameters:
        - description: CreatorAddress is the address of contract creator
          in: path
          name: creator_address
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: |-
                  QueryContractsByCreatorResponse is the response type for the
                  Query/ContractsByCreator RPC method.
                properties:
                  contract_addresses:
                    items:
                      type: string
                    title: ContractAddresses result set
                    type: array
                  pagination:
                    description: Pagination defines the pagination in the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: ContractsByCreator gets the contracts by creator
      tags:
        - cosmwasm/wasm/v1
  /ethermint/evm/v1/account/{address}:
    get:
      operationId: Account
      parameters:
        - description: address is the ethereum hex address to query the account for.
          in: path
          name: address
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryAccountResponse is the response type for the
                  Query/Account RPC method.
                properties:
                  balance:
                    description: balance is the balance of the EVM denomination.
                    type: string
                  code_hash:
                    description: code hash is the hex-formatted code bytes from the EOA.
                    type: string
                  nonce:
                    description: nonce is the account's sequence number.
                    format: uint64
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Account queries an Ethereum account.
      tags:
        - ethermint/evm/v1
  /ethermint/evm/v1/balances/{address}:
    get:
      operationId: Balance
      parameters:
        - description: address is the ethereum hex address to query the balance for.
          in: path
          name: address
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryBalanceResponse is the response type for the
                  Query/Balance RPC method.
                properties:
                  balance:
                    description: balance is the balance of the EVM denomination.
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: |-
        Balance queries the balance of a the EVM denomination for a single
        EthAccount.
      tags:
        - ethermint/evm/v1
  /ethermint/evm/v1/base_fee:
    get:
      operationId: BaseFee
      responses:
        '200':
          content:
            application/json:
              schema:
                description: BaseFeeResponse returns the EIP1559 base fee.
                properties:
                  base_fee:
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        BaseFee queries the base fee of the parent block of the current block,

        it's similar to feemarket module's method, but also checks london
        hardfork status.
      tags:
        - ethermint/evm/v1
  /ethermint/evm/v1/codes/{address}:
    get:
      operationId: Code
      parameters:
        - description: address is the ethereum hex address to query the code for.
          in: path
          name: address
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: |-
                  QueryCodeResponse is the response type for the Query/Code RPC
                  method.
                properties:
                  code:
                    description: code represents the code bytes from an ethereum address.
                    format: byte
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Code queries the balance of all coins for a single account.
      tags:
        - ethermint/evm/v1
  /ethermint/evm/v1/cosmos_account/{address}:
    get:
      operationId: CosmosAccount
      parameters:
        - description: address is the ethereum hex address to query the account for.
          in: path
          name: address
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryCosmosAccountResponse is the response type for the
                  Query/CosmosAccount

                  RPC method.
                properties:
                  account_number:
                    format: uint64
                    title: account_number is the account numbert
                    type: string
                  cosmos_address:
                    description: cosmos_address is the cosmos address of the account.
                    type: string
                  sequence:
                    description: sequence is the account's sequence number.
                    format: uint64
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: CosmosAccount queries an Ethereum account's Cosmos Address.
      tags:
        - ethermint/evm/v1
  /ethermint/evm/v1/estimate_gas:
    get:
      operationId: EstimateGas
      parameters:
        - description: same json format as the json rpc api.
          in: query
          name: args
          required: false
          schema:
            format: byte
            type: string
        - description: the default gas cap to be used.
          in: query
          name: gas_cap
          required: false
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  gas:
                    format: uint64
                    title: the estimated gas
                    type: string
                title: EstimateGasResponse defines EstimateGas response
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: EstimateGas implements the `eth_estimateGas` rpc api
      tags:
        - ethermint/evm/v1
  /ethermint/evm/v1/eth_call:
    get:
      operationId: EthCall
      parameters:
        - description: same json format as the json rpc api.
          in: query
          name: args
          required: false
          schema:
            format: byte
            type: string
        - description: the default gas cap to be used.
          in: query
          name: gas_cap
          required: false
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  MsgEthereumTxResponse defines the Msg/EthereumTx response
                  type.
                properties:
                  gas_used:
                    format: uint64
                    title: gas consumed by the transaction
                    type: string
                  hash:
                    title: >-
                      ethereum transaction hash in hex format. This hash differs
                      from the

                      Tendermint sha256 hash of the transaction bytes. See

                      https://github.com/tendermint/tendermint/issues/6539 for
                      reference
                    type: string
                  logs:
                    description: >-
                      logs contains the transaction hash and the
                      proto-compatible ethereum

                      logs.
                    items:
                      description: >-
                        Log represents an protobuf compatible Ethereum Log that
                        defines a contract

                        log event. These events are generated by the LOG opcode
                        and stored/indexed by

                        the node.
                      properties:
                        address:
                          title: address of the contract that generated the event
                          type: string
                        block_hash:
                          title: >-
                            hash of the block in which the transaction was
                            included
                          type: string
                        block_number:
                          format: uint64
                          title: block in which the transaction was included
                          type: string
                        data:
                          format: byte
                          title: supplied by the contract, usually ABI-encoded
                          type: string
                        index:
                          format: uint64
                          title: index of the log in the block
                          type: string
                        removed:
                          description: >-
                            The Removed field is true if this log was reverted
                            due to a chain

                            reorganisation. You must pay attention to this field
                            if you receive logs

                            through a filter query.
                          type: boolean
                        topics:
                          description: list of topics provided by the contract.
                          items:
                            type: string
                          type: array
                        tx_hash:
                          title: hash of the transaction
                          type: string
                        tx_index:
                          format: uint64
                          title: index of the transaction in the block
                          type: string
                      type: object
                    type: array
                  ret:
                    format: byte
                    title: >-
                      returned data from evm function (result or data supplied
                      with revert

                      opcode)
                    type: string
                  vm_error:
                    title: vm error is the error returned by vm execution
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: EthCall implements the `eth_call` rpc api
      tags:
        - ethermint/evm/v1
  /ethermint/evm/v1/params:
    get:
      operationId: Params
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryParamsResponse defines the response type for querying
                  x/evm parameters.
                properties:
                  params:
                    description: params define the evm module parameters.
                    properties:
                      allow_unprotected_txs:
                        description: >-
                          Allow unprotected transactions defines if
                          replay-protected (i.e non EIP155 

                          signed) transactions can be executed on the state
                          machine.
                        type: boolean
                      chain_config:
                        description: >-
                          ChainConfig defines the Ethereum ChainConfig
                          parameters using *sdk.Int values

                          instead of *big.Int.
                        properties:
                          arrow_glacier_block:
                            title: >-
                              Eip-4345 (bomb delay) switch block (nil = no fork,
                              0 = already activated)
                            type: string
                          berlin_block:
                            title: >-
                              Berlin switch block (nil = no fork, 0 = already on
                              berlin)
                            type: string
                          byzantium_block:
                            title: >-
                              Byzantium switch block (nil no fork, 0 = already
                              on byzantium)
                            type: string
                          constantinople_block:
                            title: >-
                              Constantinople switch block (nil no fork, 0 =
                              already activated)
                            type: string
                          dao_fork_block:
                            title: TheDAO hard-fork switch block (nil no fork)
                            type: string
                          dao_fork_support:
                            title: >-
                              Whether the nodes supports or opposes the DAO
                              hard-fork
                            type: boolean
                          eip150_block:
                            title: >-
                              EIP150 implements the Gas price changes

                              (https://github.com/ethereum/EIPs/issues/150)
                              EIP150 HF block (nil no fork)
                            type: string
                          eip150_hash:
                            title: >-
                              EIP150 HF hash (needed for header only clients as
                              only gas pricing changed)
                            type: string
                          eip155_block:
                            title: EIP155Block HF block
                            type: string
                          eip158_block:
                            title: EIP158 HF block
                            type: string
                          gray_glacier_block:
                            title: >-
                              EIP-5133 (bomb delay) switch block (nil = no fork,
                              0 = already activated)
                            type: string
                          homestead_block:
                            title: >-
                              Homestead switch block (nil no fork, 0 = already
                              homestead)
                            type: string
                          istanbul_block:
                            title: >-
                              Istanbul switch block (nil no fork, 0 = already on
                              istanbul)
                            type: string
                          london_block:
                            title: >-
                              London switch block (nil = no fork, 0 = already on
                              london)
                            type: string
                          merge_netsplit_block:
                            title: >-
                              Virtual fork after The Merge to use as a network
                              splitter
                            type: string
                          muir_glacier_block:
                            title: >-
                              Eip-2384 (bomb delay) switch block (nil no fork, 0
                              = already activated)
                            type: string
                          petersburg_block:
                            title: >-
                              Petersburg switch block (nil same as
                              Constantinople)
                            type: string
                        title: >-
                          chain config defines the EVM chain configuration
                          parameters
                        type: object
                      enable_call:
                        title: >-
                          enable call toggles state transitions that use the
                          vm.Call function
                        type: boolean
                      enable_create:
                        title: >-
                          enable create toggles state transitions that use the
                          vm.Create function
                        type: boolean
                      evm_denom:
                        description: >-
                          evm denom represents the token denomination used to
                          run the EVM state

                          transitions.
                        type: string
                      extra_eips:
                        items:
                          format: int64
                          type: string
                        title: >-
                          extra eips defines the additional EIPs for the
                          vm.Config
                        type: array
                    title: Params defines the EVM module parameters
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Params queries the parameters of x/evm module.
      tags:
        - ethermint/evm/v1
  /ethermint/evm/v1/storage/{address}/{key}:
    get:
      operationId: Storage
      parameters:
        - description: >-
            / address is the ethereum hex address to query the storage state
            for.
          in: path
          name: address
          required: true
          schema:
            type: string
        - description: key defines the key of the storage state
          in: path
          name: key
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryStorageResponse is the response type for the
                  Query/Storage RPC

                  method.
                properties:
                  value:
                    description: >-
                      key defines the storage state value hash associated with
                      the given key.
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Storage queries the balance of all coins for a single account.
      tags:
        - ethermint/evm/v1
  /ethermint/evm/v1/trace_block:
    get:
      operationId: TraceBlock
      parameters:
        - description: custom javascript tracer.
          in: query
          name: trace_config.tracer
          required: false
          schema:
            type: string
        - description: >-
            overrides the default timeout of 5 seconds for JavaScript-based
            tracing

            calls.
          in: query
          name: trace_config.timeout
          required: false
          schema:
            type: string
        - description: number of blocks the tracer is willing to go back.
          in: query
          name: trace_config.reexec
          required: false
          schema:
            format: uint64
            type: string
        - description: disable stack capture.
          in: query
          name: trace_config.disable_stack
          required: false
          schema:
            type: boolean
        - description: disable storage capture.
          in: query
          name: trace_config.disable_storage
          required: false
          schema:
            type: boolean
        - description: print output during capture end.
          in: query
          name: trace_config.debug
          required: false
          schema:
            type: boolean
        - description: maximum length of output, but zero means unlimited.
          in: query
          name: trace_config.limit
          required: false
          schema:
            format: int32
            type: integer
        - description: Homestead switch block (nil no fork, 0 = already homestead).
          in: query
          name: trace_config.overrides.homestead_block
          required: false
          schema:
            type: string
        - description: TheDAO hard-fork switch block (nil no fork).
          in: query
          name: trace_config.overrides.dao_fork_block
          required: false
          schema:
            type: string
        - description: Whether the nodes supports or opposes the DAO hard-fork.
          in: query
          name: trace_config.overrides.dao_fork_support
          required: false
          schema:
            type: boolean
        - description: >-
            EIP150 implements the Gas price changes

            (https://github.com/ethereum/EIPs/issues/150) EIP150 HF block (nil
            no fork).
          in: query
          name: trace_config.overrides.eip150_block
          required: false
          schema:
            type: string
        - description: >-
            EIP150 HF hash (needed for header only clients as only gas pricing
            changed).
          in: query
          name: trace_config.overrides.eip150_hash
          required: false
          schema:
            type: string
        - description: EIP155Block HF block.
          in: query
          name: trace_config.overrides.eip155_block
          required: false
          schema:
            type: string
        - description: EIP158 HF block.
          in: query
          name: trace_config.overrides.eip158_block
          required: false
          schema:
            type: string
        - description: Byzantium switch block (nil no fork, 0 = already on byzantium).
          in: query
          name: trace_config.overrides.byzantium_block
          required: false
          schema:
            type: string
        - description: Constantinople switch block (nil no fork, 0 = already activated).
          in: query
          name: trace_config.overrides.constantinople_block
          required: false
          schema:
            type: string
        - description: Petersburg switch block (nil same as Constantinople).
          in: query
          name: trace_config.overrides.petersburg_block
          required: false
          schema:
            type: string
        - description: Istanbul switch block (nil no fork, 0 = already on istanbul).
          in: query
          name: trace_config.overrides.istanbul_block
          required: false
          schema:
            type: string
        - description: >-
            Eip-2384 (bomb delay) switch block (nil no fork, 0 = already
            activated).
          in: query
          name: trace_config.overrides.muir_glacier_block
          required: false
          schema:
            type: string
        - description: Berlin switch block (nil = no fork, 0 = already on berlin).
          in: query
          name: trace_config.overrides.berlin_block
          required: false
          schema:
            type: string
        - description: London switch block (nil = no fork, 0 = already on london).
          in: query
          name: trace_config.overrides.london_block
          required: false
          schema:
            type: string
        - description: >-
            Eip-4345 (bomb delay) switch block (nil = no fork, 0 = already
            activated).
          in: query
          name: trace_config.overrides.arrow_glacier_block
          required: false
          schema:
            type: string
        - description: >-
            EIP-5133 (bomb delay) switch block (nil = no fork, 0 = already
            activated).
          in: query
          name: trace_config.overrides.gray_glacier_block
          required: false
          schema:
            type: string
        - description: Virtual fork after The Merge to use as a network splitter.
          in: query
          name: trace_config.overrides.merge_netsplit_block
          required: false
          schema:
            type: string
        - description: enable memory capture.
          in: query
          name: trace_config.enable_memory
          required: false
          schema:
            type: boolean
        - description: enable return data capture.
          in: query
          name: trace_config.enable_return_data
          required: false
          schema:
            type: boolean
        - description: block number.
          in: query
          name: block_number
          required: false
          schema:
            format: int64
            type: string
        - description: block hex hash.
          in: query
          name: block_hash
          required: false
          schema:
            type: string
        - description: block time.
          in: query
          name: block_time
          required: false
          schema:
            format: date-time
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    format: byte
                    type: string
                title: QueryTraceBlockResponse defines TraceBlock response
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        TraceBlock implements the `debug_traceBlockByNumber` and
        `debug_traceBlockByHash` rpc api
      tags:
        - ethermint/evm/v1
  /ethermint/evm/v1/trace_tx:
    get:
      operationId: TraceTx
      parameters:
        - description: >-
            A URL/resource name that uniquely identifies the type of the
            serialized

            protocol buffer message. This string must contain at least

            one "/" character. The last segment of the URL's path must represent

            the fully qualified name of the type (as in

            `path/google.protobuf.Duration`). The name should be in a canonical
            form

            (e.g., leading "." is not accepted).


            In practice, teams usually precompile into the binary all types that
            they

            expect it to use in the context of Any. However, for URLs which use
            the

            scheme `http`, `https`, or no scheme, one can optionally set up a
            type

            server that maps type URLs to message definitions as follows:


            * If no scheme is provided, `https` is assumed.

            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official

            protobuf release, and it is not used for type URLs beginning with

            type.googleapis.com.


            Schemes other than `http`, `https` (or the empty scheme) might be

            used with implementation specific semantics.
          in: query
          name: msg.data.type_url
          required: false
          schema:
            type: string
        - description: >-
            Must be a valid serialized protocol buffer of the above specified
            type.
          in: query
          name: msg.data.value
          required: false
          schema:
            format: byte
            type: string
        - description: 'DEPRECATED: encoded storage size of the transaction.'
          in: query
          name: msg.size
          required: false
          schema:
            format: double
            type: number
        - description: transaction hash in hex format.
          in: query
          name: msg.hash
          required: false
          schema:
            type: string
        - description: |-
            ethereum signer address in hex format. This address value is checked
            against the address derived from the signature (V, R, S) using the
            secp256k1 elliptic curve.
          in: query
          name: msg.from
          required: false
          schema:
            type: string
        - description: custom javascript tracer.
          in: query
          name: trace_config.tracer
          required: false
          schema:
            type: string
        - description: >-
            overrides the default timeout of 5 seconds for JavaScript-based
            tracing

            calls.
          in: query
          name: trace_config.timeout
          required: false
          schema:
            type: string
        - description: number of blocks the tracer is willing to go back.
          in: query
          name: trace_config.reexec
          required: false
          schema:
            format: uint64
            type: string
        - description: disable stack capture.
          in: query
          name: trace_config.disable_stack
          required: false
          schema:
            type: boolean
        - description: disable storage capture.
          in: query
          name: trace_config.disable_storage
          required: false
          schema:
            type: boolean
        - description: print output during capture end.
          in: query
          name: trace_config.debug
          required: false
          schema:
            type: boolean
        - description: maximum length of output, but zero means unlimited.
          in: query
          name: trace_config.limit
          required: false
          schema:
            format: int32
            type: integer
        - description: Homestead switch block (nil no fork, 0 = already homestead).
          in: query
          name: trace_config.overrides.homestead_block
          required: false
          schema:
            type: string
        - description: TheDAO hard-fork switch block (nil no fork).
          in: query
          name: trace_config.overrides.dao_fork_block
          required: false
          schema:
            type: string
        - description: Whether the nodes supports or opposes the DAO hard-fork.
          in: query
          name: trace_config.overrides.dao_fork_support
          required: false
          schema:
            type: boolean
        - description: >-
            EIP150 implements the Gas price changes

            (https://github.com/ethereum/EIPs/issues/150) EIP150 HF block (nil
            no fork).
          in: query
          name: trace_config.overrides.eip150_block
          required: false
          schema:
            type: string
        - description: >-
            EIP150 HF hash (needed for header only clients as only gas pricing
            changed).
          in: query
          name: trace_config.overrides.eip150_hash
          required: false
          schema:
            type: string
        - description: EIP155Block HF block.
          in: query
          name: trace_config.overrides.eip155_block
          required: false
          schema:
            type: string
        - description: EIP158 HF block.
          in: query
          name: trace_config.overrides.eip158_block
          required: false
          schema:
            type: string
        - description: Byzantium switch block (nil no fork, 0 = already on byzantium).
          in: query
          name: trace_config.overrides.byzantium_block
          required: false
          schema:
            type: string
        - description: Constantinople switch block (nil no fork, 0 = already activated).
          in: query
          name: trace_config.overrides.constantinople_block
          required: false
          schema:
            type: string
        - description: Petersburg switch block (nil same as Constantinople).
          in: query
          name: trace_config.overrides.petersburg_block
          required: false
          schema:
            type: string
        - description: Istanbul switch block (nil no fork, 0 = already on istanbul).
          in: query
          name: trace_config.overrides.istanbul_block
          required: false
          schema:
            type: string
        - description: >-
            Eip-2384 (bomb delay) switch block (nil no fork, 0 = already
            activated).
          in: query
          name: trace_config.overrides.muir_glacier_block
          required: false
          schema:
            type: string
        - description: Berlin switch block (nil = no fork, 0 = already on berlin).
          in: query
          name: trace_config.overrides.berlin_block
          required: false
          schema:
            type: string
        - description: London switch block (nil = no fork, 0 = already on london).
          in: query
          name: trace_config.overrides.london_block
          required: false
          schema:
            type: string
        - description: >-
            Eip-4345 (bomb delay) switch block (nil = no fork, 0 = already
            activated).
          in: query
          name: trace_config.overrides.arrow_glacier_block
          required: false
          schema:
            type: string
        - description: >-
            EIP-5133 (bomb delay) switch block (nil = no fork, 0 = already
            activated).
          in: query
          name: trace_config.overrides.gray_glacier_block
          required: false
          schema:
            type: string
        - description: Virtual fork after The Merge to use as a network splitter.
          in: query
          name: trace_config.overrides.merge_netsplit_block
          required: false
          schema:
            type: string
        - description: enable memory capture.
          in: query
          name: trace_config.enable_memory
          required: false
          schema:
            type: boolean
        - description: enable return data capture.
          in: query
          name: trace_config.enable_return_data
          required: false
          schema:
            type: boolean
        - description: block number of requested transaction.
          in: query
          name: block_number
          required: false
          schema:
            format: int64
            type: string
        - description: block hex hash of requested transaction.
          in: query
          name: block_hash
          required: false
          schema:
            type: string
        - description: block time of requested transaction.
          in: query
          name: block_time
          required: false
          schema:
            format: date-time
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  data:
                    format: byte
                    title: response serialized in bytes
                    type: string
                title: QueryTraceTxResponse defines TraceTx response
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: TraceTx implements the `debug_traceTransaction` rpc api
      tags:
        - ethermint/evm/v1
  /ethermint/evm/v1/validator_account/{cons_address}:
    get:
      operationId: ValidatorAccount
      parameters:
        - description: cons_address is the validator cons address to query the account for.
          in: path
          name: cons_address
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: |-
                  QueryValidatorAccountResponse is the response type for the
                  Query/ValidatorAccount RPC method.
                properties:
                  account_address:
                    description: >-
                      account_address is the cosmos address of the account in
                      bech32 format.
                    type: string
                  account_number:
                    format: uint64
                    title: account_number is the account number
                    type: string
                  sequence:
                    description: sequence is the account's sequence number.
                    format: uint64
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        ValidatorAccount queries an Ethereum account's from a validator
        consensus

        Address.
      tags:
        - ethermint/evm/v1
  /ethermint/feemarket/v1/base_fee:
    get:
      operationId: BaseFee
      responses:
        '200':
          content:
            application/json:
              schema:
                description: BaseFeeResponse returns the EIP1559 base fee.
                properties:
                  base_fee:
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: BaseFee queries the base fee of the parent block of the current block.
      tags:
        - ethermint/feemarket/v1
  /ethermint/feemarket/v1/block_gas:
    get:
      operationId: BlockGas
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryBlockGasResponse returns block gas used for a given
                  height.
                properties:
                  gas:
                    format: int64
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: BlockGas queries the gas used at a given block height
      tags:
        - ethermint/feemarket/v1
  /ethermint/feemarket/v1/params:
    get:
      operationId: Params
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryParamsResponse defines the response type for querying
                  x/evm parameters.
                properties:
                  params:
                    description: params define the evm module parameters.
                    properties:
                      base_fee:
                        description: base fee for EIP-1559 blocks.
                        type: string
                      base_fee_change_denominator:
                        description: >-
                          base fee change denominator bounds the amount the base
                          fee can change

                          between blocks.
                        format: int64
                        type: integer
                      elasticity_multiplier:
                        description: >-
                          elasticity multiplier bounds the maximum gas limit an
                          EIP-1559 block may

                          have.
                        format: int64
                        type: integer
                      enable_height:
                        description: height at which the base fee calculation is enabled.
                        format: int64
                        type: string
                      min_gas_multiplier:
                        title: >-
                          min gas denominator bounds the minimum gasUsed to be
                          charged

                          to senders based on GasLimit
                        type: string
                      min_gas_price:
                        title: >-
                          min_gas_price defines the minimum gas price value for
                          cosmos and eth transactions
                        type: string
                      no_base_fee:
                        title: >-
                          no base fee forces the EIP-1559 base fee to 0 (needed
                          for 0 price calls)
                        type: boolean
                    title: Params defines the EVM module parameters
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Params queries the parameters of x/feemarket module.
      tags:
        - ethermint/feemarket/v1
  /ibc/apps/fee/v1/channels/{channel_id}/ports/{port_id}/fee_enabled:
    get:
      operationId: FeeEnabledChannel
      parameters:
        - description: unique channel identifier
          in: path
          name: channel_id
          required: true
          schema:
            type: string
        - description: unique port identifier
          in: path
          name: port_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  fee_enabled:
                    title: boolean flag representing the fee enabled channel status
                    type: boolean
                title: >-
                  QueryFeeEnabledChannelResponse defines the response type for
                  the FeeEnabledChannel rpc
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        FeeEnabledChannel returns true if the provided port and channel
        identifiers belong to a fee enabled channel
      tags:
        - ibc/apps/fee
  /ibc/apps/fee/v1/channels/{channel_id}/ports/{port_id}/incentivized_packets:
    get:
      operationId: IncentivizedPacketsForChannel
      parameters:
        - in: path
          name: channel_id
          required: true
          schema:
            type: string
        - in: path
          name: port_id
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
        - description: Height to query at.
          in: query
          name: query_height
          required: false
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  incentivized_packets:
                    items:
                      properties:
                        packet_fees:
                          items:
                            properties:
                              fee:
                                properties:
                                  ack_fee:
                                    items:
                                      description: >-
                                        Coin defines a token with a denomination
                                        and an amount.


                                        NOTE: The amount field is an Int which
                                        implements the custom method

                                        signatures required by gogoproto.
                                      properties:
                                        amount:
                                          type: string
                                        denom:
                                          type: string
                                      type: object
                                    title: the packet acknowledgement fee
                                    type: array
                                  recv_fee:
                                    items:
                                      description: >-
                                        Coin defines a token with a denomination
                                        and an amount.


                                        NOTE: The amount field is an Int which
                                        implements the custom method

                                        signatures required by gogoproto.
                                      properties:
                                        amount:
                                          type: string
                                        denom:
                                          type: string
                                      type: object
                                    title: the packet receive fee
                                    type: array
                                  timeout_fee:
                                    items:
                                      description: >-
                                        Coin defines a token with a denomination
                                        and an amount.


                                        NOTE: The amount field is an Int which
                                        implements the custom method

                                        signatures required by gogoproto.
                                      properties:
                                        amount:
                                          type: string
                                        denom:
                                          type: string
                                      type: object
                                    title: the packet timeout fee
                                    type: array
                                title: >-
                                  fee encapsulates the recv, ack and timeout
                                  fees associated with an IBC packet
                                type: object
                              refund_address:
                                title: the refund address for unspent fees
                                type: string
                              relayers:
                                items:
                                  type: string
                                title: >-
                                  optional list of relayers permitted to receive
                                  fees
                                type: array
                            title: >-
                              PacketFee contains ICS29 relayer fees, refund
                              address and optional list of permitted relayers
                            type: object
                          title: list of packet fees
                          type: array
                        packet_id:
                          properties:
                            channel_id:
                              title: channel unique identifier
                              type: string
                            port_id:
                              title: channel port identifier
                              type: string
                            sequence:
                              format: uint64
                              title: packet sequence
                              type: string
                          title: >-
                            unique packet identifier comprised of the channel
                            ID, port ID and sequence
                          type: object
                      title: >-
                        IdentifiedPacketFees contains a list of type PacketFee
                        and associated PacketId
                      type: object
                    title: Map of all incentivized_packets
                    type: array
                title: >-
                  QueryIncentivizedPacketsResponse defines the response type for
                  the incentivized packets RPC
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Gets all incentivized packets for a specific channel
      tags:
        - ibc/apps/fee
  /ibc/apps/fee/v1/channels/{channel_id}/relayers/{relayer}/counterparty_payee:
    get:
      operationId: CounterpartyPayee
      parameters:
        - description: unique channel identifier
          in: path
          name: channel_id
          required: true
          schema:
            type: string
        - description: the relayer address to which the counterparty is registered
          in: path
          name: relayer
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  counterparty_payee:
                    title: >-
                      the counterparty payee address used to compensate forward
                      relaying
                    type: string
                title: >-
                  QueryCounterpartyPayeeResponse defines the response type for
                  the CounterpartyPayee rpc
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        CounterpartyPayee returns the registered counterparty payee for forward
        relaying
      tags:
        - ibc/apps/fee
  /ibc/apps/fee/v1/channels/{channel_id}/relayers/{relayer}/payee:
    get:
      operationId: Payee
      parameters:
        - description: unique channel identifier
          in: path
          name: channel_id
          required: true
          schema:
            type: string
        - description: the relayer address to which the distribution address is registered
          in: path
          name: relayer
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  payee_address:
                    title: the payee address to which packet fees are paid out
                    type: string
                title: QueryPayeeResponse defines the response type for the Payee rpc
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        Payee returns the registered payee address for a specific channel given
        the relayer address
      tags:
        - ibc/apps/fee
  /ibc/apps/fee/v1/channels/{packet_id.channel_id}/ports/{packet_id.port_id}/sequences/{packet_id.sequence}/incentivized_packet:
    get:
      operationId: IncentivizedPacket
      parameters:
        - description: channel unique identifier
          in: path
          name: packet_id.channel_id
          required: true
          schema:
            type: string
        - description: channel port identifier
          in: path
          name: packet_id.port_id
          required: true
          schema:
            type: string
        - description: packet sequence
          in: path
          name: packet_id.sequence
          required: true
          schema:
            format: uint64
            type: string
        - description: block height at which to query.
          in: query
          name: query_height
          required: false
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  incentivized_packet:
                    properties:
                      packet_fees:
                        items:
                          properties:
                            fee:
                              properties:
                                ack_fee:
                                  items:
                                    description: >-
                                      Coin defines a token with a denomination
                                      and an amount.


                                      NOTE: The amount field is an Int which
                                      implements the custom method

                                      signatures required by gogoproto.
                                    properties:
                                      amount:
                                        type: string
                                      denom:
                                        type: string
                                    type: object
                                  title: the packet acknowledgement fee
                                  type: array
                                recv_fee:
                                  items:
                                    description: >-
                                      Coin defines a token with a denomination
                                      and an amount.


                                      NOTE: The amount field is an Int which
                                      implements the custom method

                                      signatures required by gogoproto.
                                    properties:
                                      amount:
                                        type: string
                                      denom:
                                        type: string
                                    type: object
                                  title: the packet receive fee
                                  type: array
                                timeout_fee:
                                  items:
                                    description: >-
                                      Coin defines a token with a denomination
                                      and an amount.


                                      NOTE: The amount field is an Int which
                                      implements the custom method

                                      signatures required by gogoproto.
                                    properties:
                                      amount:
                                        type: string
                                      denom:
                                        type: string
                                    type: object
                                  title: the packet timeout fee
                                  type: array
                              title: >-
                                fee encapsulates the recv, ack and timeout fees
                                associated with an IBC packet
                              type: object
                            refund_address:
                              title: the refund address for unspent fees
                              type: string
                            relayers:
                              items:
                                type: string
                              title: >-
                                optional list of relayers permitted to receive
                                fees
                              type: array
                          title: >-
                            PacketFee contains ICS29 relayer fees, refund
                            address and optional list of permitted relayers
                          type: object
                        title: list of packet fees
                        type: array
                      packet_id:
                        properties:
                          channel_id:
                            title: channel unique identifier
                            type: string
                          port_id:
                            title: channel port identifier
                            type: string
                          sequence:
                            format: uint64
                            title: packet sequence
                            type: string
                        title: >-
                          unique packet identifier comprised of the channel ID,
                          port ID and sequence
                        type: object
                    title: >-
                      IdentifiedPacketFees contains a list of type PacketFee and
                      associated PacketId
                    type: object
                title: >-
                  QueryIncentivizedPacketsResponse defines the response type for
                  the IncentivizedPacket rpc
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        IncentivizedPacket returns all packet fees for a packet given its
        identifier
      tags:
        - ibc/apps/fee
  /ibc/apps/fee/v1/channels/{packet_id.channel_id}/ports/{packet_id.port_id}/sequences/{packet_id.sequence}/total_ack_fees:
    get:
      operationId: TotalAckFees
      parameters:
        - description: channel unique identifier
          in: path
          name: packet_id.channel_id
          required: true
          schema:
            type: string
        - description: channel port identifier
          in: path
          name: packet_id.port_id
          required: true
          schema:
            type: string
        - description: packet sequence
          in: path
          name: packet_id.sequence
          required: true
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  ack_fees:
                    items:
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    title: the total packet acknowledgement fees
                    type: array
                title: >-
                  QueryTotalAckFeesResponse defines the response type for the
                  TotalAckFees rpc
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        TotalAckFees returns the total acknowledgement fees for a packet given
        its identifier
      tags:
        - ibc/apps/fee
  /ibc/apps/fee/v1/channels/{packet_id.channel_id}/ports/{packet_id.port_id}/sequences/{packet_id.sequence}/total_recv_fees:
    get:
      operationId: TotalRecvFees
      parameters:
        - description: channel unique identifier
          in: path
          name: packet_id.channel_id
          required: true
          schema:
            type: string
        - description: channel port identifier
          in: path
          name: packet_id.port_id
          required: true
          schema:
            type: string
        - description: packet sequence
          in: path
          name: packet_id.sequence
          required: true
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  recv_fees:
                    items:
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    title: the total packet receive fees
                    type: array
                title: >-
                  QueryTotalRecvFeesResponse defines the response type for the
                  TotalRecvFees rpc
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        TotalRecvFees returns the total receive fees for a packet given its
        identifier
      tags:
        - ibc/apps/fee
  /ibc/apps/fee/v1/channels/{packet_id.channel_id}/ports/{packet_id.port_id}/sequences/{packet_id.sequence}/total_timeout_fees:
    get:
      operationId: TotalTimeoutFees
      parameters:
        - description: channel unique identifier
          in: path
          name: packet_id.channel_id
          required: true
          schema:
            type: string
        - description: channel port identifier
          in: path
          name: packet_id.port_id
          required: true
          schema:
            type: string
        - description: packet sequence
          in: path
          name: packet_id.sequence
          required: true
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  timeout_fees:
                    items:
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    title: the total packet timeout fees
                    type: array
                title: >-
                  QueryTotalTimeoutFeesResponse defines the response type for
                  the TotalTimeoutFees rpc
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        TotalTimeoutFees returns the total timeout fees for a packet given its
        identifier
      tags:
        - ibc/apps/fee
  /ibc/apps/fee/v1/fee_enabled:
    get:
      operationId: FeeEnabledChannels
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
        - description: block height at which to query.
          in: query
          name: query_height
          required: false
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  fee_enabled_channels:
                    items:
                      properties:
                        channel_id:
                          title: unique channel identifier
                          type: string
                        port_id:
                          title: unique port identifier
                          type: string
                      title: >-
                        FeeEnabledChannel contains the PortID & ChannelID for a
                        fee enabled channel
                      type: object
                    title: list of fee enabled channels
                    type: array
                title: >-
                  QueryFeeEnabledChannelsResponse defines the response type for
                  the FeeEnabledChannels rpc
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: FeeEnabledChannels returns a list of all fee enabled channels
      tags:
        - ibc/apps/fee
  /ibc/apps/fee/v1/incentivized_packets:
    get:
      operationId: IncentivizedPackets
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
        - description: block height at which to query.
          in: query
          name: query_height
          required: false
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  incentivized_packets:
                    items:
                      properties:
                        packet_fees:
                          items:
                            properties:
                              fee:
                                properties:
                                  ack_fee:
                                    items:
                                      description: >-
                                        Coin defines a token with a denomination
                                        and an amount.


                                        NOTE: The amount field is an Int which
                                        implements the custom method

                                        signatures required by gogoproto.
                                      properties:
                                        amount:
                                          type: string
                                        denom:
                                          type: string
                                      type: object
                                    title: the packet acknowledgement fee
                                    type: array
                                  recv_fee:
                                    items:
                                      description: >-
                                        Coin defines a token with a denomination
                                        and an amount.


                                        NOTE: The amount field is an Int which
                                        implements the custom method

                                        signatures required by gogoproto.
                                      properties:
                                        amount:
                                          type: string
                                        denom:
                                          type: string
                                      type: object
                                    title: the packet receive fee
                                    type: array
                                  timeout_fee:
                                    items:
                                      description: >-
                                        Coin defines a token with a denomination
                                        and an amount.


                                        NOTE: The amount field is an Int which
                                        implements the custom method

                                        signatures required by gogoproto.
                                      properties:
                                        amount:
                                          type: string
                                        denom:
                                          type: string
                                      type: object
                                    title: the packet timeout fee
                                    type: array
                                title: >-
                                  fee encapsulates the recv, ack and timeout
                                  fees associated with an IBC packet
                                type: object
                              refund_address:
                                title: the refund address for unspent fees
                                type: string
                              relayers:
                                items:
                                  type: string
                                title: >-
                                  optional list of relayers permitted to receive
                                  fees
                                type: array
                            title: >-
                              PacketFee contains ICS29 relayer fees, refund
                              address and optional list of permitted relayers
                            type: object
                          title: list of packet fees
                          type: array
                        packet_id:
                          properties:
                            channel_id:
                              title: channel unique identifier
                              type: string
                            port_id:
                              title: channel port identifier
                              type: string
                            sequence:
                              format: uint64
                              title: packet sequence
                              type: string
                          title: >-
                            unique packet identifier comprised of the channel
                            ID, port ID and sequence
                          type: object
                      title: >-
                        IdentifiedPacketFees contains a list of type PacketFee
                        and associated PacketId
                      type: object
                    title: list of identified fees for incentivized packets
                    type: array
                title: >-
                  QueryIncentivizedPacketsResponse defines the response type for
                  the IncentivizedPackets rpc
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        IncentivizedPackets returns all incentivized packets and their
        associated fees
      tags:
        - ibc/apps/fee
  /ibc/apps/interchain_accounts/controller/v1/owners/{owner}/connections/{connection_id}:
    get:
      operationId: InterchainAccount
      parameters:
        - in: path
          name: owner
          required: true
          schema:
            type: string
        - in: path
          name: connection_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryInterchainAccountResponse the response type for the
                  Query/InterchainAccount RPC method.
                properties:
                  address:
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        InterchainAccount returns the interchain account address for a given
        owner address on a given connection
      tags:
        - ibc/apps/interchain_accounts
  /ibc/apps/interchain_accounts/controller/v1/params:
    get:
      operationId: Params
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryParamsResponse is the response type for the Query/Params
                  RPC method.
                properties:
                  params:
                    description: params defines the parameters of the module.
                    properties:
                      controller_enabled:
                        description: >-
                          controller_enabled enables or disables the controller
                          submodule.
                        type: boolean
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Params queries all parameters of the ICA controller submodule.
      tags:
        - ibc/apps/interchain_accounts
  /ibc/apps/interchain_accounts/host/v1/params:
    get:
      operationId: Params
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryParamsResponse is the response type for the Query/Params
                  RPC method.
                properties:
                  params:
                    description: params defines the parameters of the module.
                    properties:
                      allow_messages:
                        description: >-
                          allow_messages defines a list of sdk message typeURLs
                          allowed to be executed on a host chain.
                        items:
                          type: string
                        type: array
                      host_enabled:
                        description: host_enabled enables or disables the host submodule.
                        type: boolean
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Params queries all parameters of the ICA host submodule.
      tags:
        - ibc/apps/interchain_accounts
  /ibc/apps/router/v1/params:
    get:
      operationId: Params
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryParamsResponse is the response type for the Query/Params
                  RPC method.
                properties:
                  params:
                    description: params defines the parameters of the module.
                    properties:
                      fee_percentage:
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Params queries all parameters of the router module.
      tags:
        - ibc/apps/router
  /ibc/apps/transfer/v1/channels/{channel_id}/ports/{port_id}/escrow_address:
    get:
      operationId: EscrowAddress
      parameters:
        - description: unique channel identifier
          in: path
          name: channel_id
          required: true
          schema:
            type: string
        - description: unique port identifier
          in: path
          name: port_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryEscrowAddressResponse is the response type of the
                  EscrowAddress RPC method.
                properties:
                  escrow_address:
                    title: the escrow account address
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        EscrowAddress returns the escrow address for a particular port and
        channel id.
      tags:
        - ibc/apps/transfer
  /ibc/apps/transfer/v1/denom_hashes/{trace}:
    get:
      operationId: DenomHash
      parameters:
        - description: The denomination trace ([port_id]/[channel_id])+/[denom]
          in: path
          name: trace
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryDenomHashResponse is the response type for the
                  Query/DenomHash RPC

                  method.
                properties:
                  hash:
                    description: >-
                      hash (in hex format) of the denomination trace
                      information.
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: DenomHash queries a denomination hash information.
      tags:
        - ibc/apps/transfer
  /ibc/apps/transfer/v1/denom_traces:
    get:
      operationId: DenomTraces
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryConnectionsResponse is the response type for the
                  Query/DenomTraces RPC

                  method.
                properties:
                  denom_traces:
                    description: denom_traces returns all denominations trace information.
                    items:
                      description: >-
                        DenomTrace contains the base denomination for ICS20
                        fungible tokens and the

                        source tracing information path.
                      properties:
                        base_denom:
                          description: base denomination of the relayed fungible token.
                          type: string
                        path:
                          description: >-
                            path defines the chain of port/channel identifiers
                            used for tracing the

                            source of the fungible token.
                          type: string
                      type: object
                    type: array
                  pagination:
                    description: pagination defines the pagination in the response.
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: DenomTraces queries all denomination traces.
      tags:
        - ibc/apps/transfer
  /ibc/apps/transfer/v1/denom_traces/{hash}:
    get:
      operationId: DenomTrace
      parameters:
        - description: >-
            hash (in hex format) or denom (full denom with ibc prefix) of the
            denomination trace information.
          in: path
          name: hash
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryDenomTraceResponse is the response type for the
                  Query/DenomTrace RPC

                  method.
                properties:
                  denom_trace:
                    description: >-
                      DenomTrace contains the base denomination for ICS20
                      fungible tokens and the

                      source tracing information path.
                    properties:
                      base_denom:
                        description: base denomination of the relayed fungible token.
                        type: string
                      path:
                        description: >-
                          path defines the chain of port/channel identifiers
                          used for tracing the

                          source of the fungible token.
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: DenomTrace queries a denomination trace information.
      tags:
        - ibc/apps/transfer
  /ibc/apps/transfer/v1/params:
    get:
      operationId: Params
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryParamsResponse is the response type for the Query/Params
                  RPC method.
                properties:
                  params:
                    description: params defines the parameters of the module.
                    properties:
                      receive_enabled:
                        description: >-
                          receive_enabled enables or disables all cross-chain
                          token transfers to this

                          chain.
                        type: boolean
                      send_enabled:
                        description: >-
                          send_enabled enables or disables all cross-chain token
                          transfers from this

                          chain.
                        type: boolean
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Params queries all parameters of the ibc-transfer module.
      tags:
        - ibc/apps/transfer
  /ibc/client/v1/params:
    get:
      operationId: ClientParams
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryClientParamsResponse is the response type for the
                  Query/ClientParams RPC

                  method.
                properties:
                  params:
                    description: params defines the parameters of the module.
                    properties:
                      allowed_clients:
                        description: >-
                          allowed_clients defines the list of allowed client
                          state types.
                        items:
                          type: string
                        type: array
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: ClientParams queries all parameters of the ibc client.
      tags:
        - ibc/client/v1
  /ibc/core/channel/v1/channels:
    get:
      operationId: Channels
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryChannelsResponse is the response type for the
                  Query/Channels RPC method.
                properties:
                  channels:
                    description: list of stored channels of the chain.
                    items:
                      description: >-
                        IdentifiedChannel defines a channel with additional port
                        and channel

                        identifier fields.
                      properties:
                        channel_id:
                          title: channel identifier
                          type: string
                        connection_hops:
                          items:
                            type: string
                          title: >-
                            list of connection identifiers, in order, along
                            which packets sent on

                            this channel will travel
                          type: array
                        counterparty:
                          properties:
                            channel_id:
                              title: channel end on the counterparty chain
                              type: string
                            port_id:
                              description: >-
                                port on the counterparty chain which owns the
                                other end of the channel.
                              type: string
                          title: counterparty channel end
                          type: object
                        ordering:
                          default: ORDER_NONE_UNSPECIFIED
                          description: >-
                            - ORDER_NONE_UNSPECIFIED: zero-value for channel
                            ordering
                             - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                            which they were sent.
                             - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                          enum:
                            - ORDER_NONE_UNSPECIFIED
                            - ORDER_UNORDERED
                            - ORDER_ORDERED
                          title: whether the channel is ordered or unordered
                          type: string
                        port_id:
                          title: port identifier
                          type: string
                        state:
                          default: STATE_UNINITIALIZED_UNSPECIFIED
                          description: >-
                            State defines if a channel is in one of the
                            following states:

                            CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                             - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                             - STATE_INIT: A channel has just started the opening handshake.
                             - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                             - STATE_OPEN: A channel has completed the handshake. Open channels are
                            ready to send and receive packets.
                             - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                            packets.
                          enum:
                            - STATE_UNINITIALIZED_UNSPECIFIED
                            - STATE_INIT
                            - STATE_TRYOPEN
                            - STATE_OPEN
                            - STATE_CLOSED
                          title: current state of the channel end
                          type: string
                        version:
                          title: >-
                            opaque channel version, which is agreed upon during
                            the handshake
                          type: string
                      type: object
                    type: array
                  height:
                    description: >-
                      Normally the RevisionHeight is incremented at each height
                      while keeping

                      RevisionNumber the same. However some consensus algorithms
                      may choose to

                      reset the height in certain conditions e.g. hard forks,
                      state-machine

                      breaking changes In these cases, the RevisionNumber is
                      incremented so that

                      height continues to be monitonically increasing even as
                      the RevisionHeight

                      gets reset
                    properties:
                      revision_height:
                        format: uint64
                        title: the height within the given revision
                        type: string
                      revision_number:
                        format: uint64
                        title: the revision that the client is currently on
                        type: string
                    title: query block height
                    type: object
                  pagination:
                    description: >-
                      PageResponse is to be embedded in gRPC response messages
                      where the

                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    title: pagination response
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Channels queries all the IBC channels of a chain.
      tags:
        - ibc/core/channel
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}:
    get:
      operationId: Channel
      parameters:
        - description: channel unique identifier
          in: path
          name: channel_id
          required: true
          schema:
            type: string
        - description: port unique identifier
          in: path
          name: port_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryChannelResponse is the response type for the
                  Query/Channel RPC method.

                  Besides the Channel end, it includes a proof and the height
                  from which the

                  proof was retrieved.
                properties:
                  channel:
                    description: >-
                      Channel defines pipeline for exactly-once packet delivery
                      between specific

                      modules on separate blockchains, which has at least one
                      end capable of

                      sending packets and one end capable of receiving packets.
                    properties:
                      connection_hops:
                        items:
                          type: string
                        title: >-
                          list of connection identifiers, in order, along which
                          packets sent on

                          this channel will travel
                        type: array
                      counterparty:
                        properties:
                          channel_id:
                            title: channel end on the counterparty chain
                            type: string
                          port_id:
                            description: >-
                              port on the counterparty chain which owns the
                              other end of the channel.
                            type: string
                        title: counterparty channel end
                        type: object
                      ordering:
                        default: ORDER_NONE_UNSPECIFIED
                        description: >-
                          - ORDER_NONE_UNSPECIFIED: zero-value for channel
                          ordering
                           - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                          which they were sent.
                           - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                        enum:
                          - ORDER_NONE_UNSPECIFIED
                          - ORDER_UNORDERED
                          - ORDER_ORDERED
                        title: whether the channel is ordered or unordered
                        type: string
                      state:
                        default: STATE_UNINITIALIZED_UNSPECIFIED
                        description: >-
                          State defines if a channel is in one of the following
                          states:

                          CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                           - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                           - STATE_INIT: A channel has just started the opening handshake.
                           - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                           - STATE_OPEN: A channel has completed the handshake. Open channels are
                          ready to send and receive packets.
                           - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                          packets.
                        enum:
                          - STATE_UNINITIALIZED_UNSPECIFIED
                          - STATE_INIT
                          - STATE_TRYOPEN
                          - STATE_OPEN
                          - STATE_CLOSED
                        title: current state of the channel end
                        type: string
                      version:
                        title: >-
                          opaque channel version, which is agreed upon during
                          the handshake
                        type: string
                    title: channel associated with the request identifiers
                    type: object
                  proof:
                    format: byte
                    title: merkle proof of existence
                    type: string
                  proof_height:
                    description: >-
                      Normally the RevisionHeight is incremented at each height
                      while keeping

                      RevisionNumber the same. However some consensus algorithms
                      may choose to

                      reset the height in certain conditions e.g. hard forks,
                      state-machine

                      breaking changes In these cases, the RevisionNumber is
                      incremented so that

                      height continues to be monitonically increasing even as
                      the RevisionHeight

                      gets reset
                    properties:
                      revision_height:
                        format: uint64
                        title: the height within the given revision
                        type: string
                      revision_number:
                        format: uint64
                        title: the revision that the client is currently on
                        type: string
                    title: height at which the proof was retrieved
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Channel queries an IBC Channel.
      tags:
        - ibc/core/channel
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/client_state:
    get:
      operationId: ChannelClientState
      parameters:
        - description: channel unique identifier
          in: path
          name: channel_id
          required: true
          schema:
            type: string
        - description: port unique identifier
          in: path
          name: port_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  identified_client_state:
                    description: >-
                      IdentifiedClientState defines a client state with an
                      additional client

                      identifier field.
                    properties:
                      client_id:
                        title: client identifier
                        type: string
                      client_state:
                        description: >-
                          `Any` contains an arbitrary serialized protocol buffer
                          message along with a

                          URL that describes the type of the serialized message.


                          Protobuf library provides support to pack/unpack Any
                          values in the form

                          of utility functions or additional generated methods
                          of the Any type.


                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }

                           Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                           Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := anypb.New(foo)
                               if err != nil {
                                 ...
                               }
                               ...
                               foo := &pb.Foo{}
                               if err := any.UnmarshalTo(foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by
                          default use

                          'type.googleapis.com/full.type.name' as the type URL
                          and the unpack

                          methods only use the fully qualified type name after
                          the last '/'

                          in the type URL, for example "foo.bar.com/x/y.z" will
                          yield type

                          name "y.z".



                          JSON

                          ====

                          The JSON representation of an `Any` value uses the
                          regular

                          representation of the deserialized, embedded message,
                          with an

                          additional field `@type` which contains the type URL.
                          Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a
                          custom JSON

                          representation, that representation will be embedded
                          adding a field

                          `value` which holds the custom JSON in addition to the
                          `@type`

                          field. Example (for message
                          [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                        properties:
                          type_url:
                            description: >-
                              A URL/resource name that uniquely identifies the
                              type of the serialized

                              protocol buffer message. This string must contain
                              at least

                              one "/" character. The last segment of the URL's
                              path must represent

                              the fully qualified name of the type (as in

                              `path/google.protobuf.Duration`). The name should
                              be in a canonical form

                              (e.g., leading "." is not accepted).


                              In practice, teams usually precompile into the
                              binary all types that they

                              expect it to use in the context of Any. However,
                              for URLs which use the

                              scheme `http`, `https`, or no scheme, one can
                              optionally set up a type

                              server that maps type URLs to message definitions
                              as follows:


                              * If no scheme is provided, `https` is assumed.

                              * An HTTP GET on the URL must yield a
                              [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results
                              based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently
                              available in the official

                              protobuf release, and it is not used for type URLs
                              beginning with

                              type.googleapis.com.


                              Schemes other than `http`, `https` (or the empty
                              scheme) might be

                              used with implementation specific semantics.
                            type: string
                          value:
                            description: >-
                              Must be a valid serialized protocol buffer of the
                              above specified type.
                            format: byte
                            type: string
                        title: client state
                        type: object
                    title: client state associated with the channel
                    type: object
                  proof:
                    format: byte
                    title: merkle proof of existence
                    type: string
                  proof_height:
                    description: >-
                      Normally the RevisionHeight is incremented at each height
                      while keeping

                      RevisionNumber the same. However some consensus algorithms
                      may choose to

                      reset the height in certain conditions e.g. hard forks,
                      state-machine

                      breaking changes In these cases, the RevisionNumber is
                      incremented so that

                      height continues to be monitonically increasing even as
                      the RevisionHeight

                      gets reset
                    properties:
                      revision_height:
                        format: uint64
                        title: the height within the given revision
                        type: string
                      revision_number:
                        format: uint64
                        title: the revision that the client is currently on
                        type: string
                    title: height at which the proof was retrieved
                    type: object
                title: |-
                  QueryChannelClientStateResponse is the Response type for the
                  Query/QueryChannelClientState RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        ChannelClientState queries for the client state for the channel
        associated

        with the provided channel identifiers.
      tags:
        - ibc/core/channel
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/consensus_state/revision/{revision_number}/height/{revision_height}:
    get:
      operationId: ChannelConsensusState
      parameters:
        - description: channel unique identifier
          in: path
          name: channel_id
          required: true
          schema:
            type: string
        - description: port unique identifier
          in: path
          name: port_id
          required: true
          schema:
            type: string
        - description: revision number of the consensus state
          in: path
          name: revision_number
          required: true
          schema:
            format: uint64
            type: string
        - description: revision height of the consensus state
          in: path
          name: revision_height
          required: true
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  client_id:
                    title: client ID associated with the consensus state
                    type: string
                  consensus_state:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    title: consensus state associated with the channel
                    type: object
                  proof:
                    format: byte
                    title: merkle proof of existence
                    type: string
                  proof_height:
                    description: >-
                      Normally the RevisionHeight is incremented at each height
                      while keeping

                      RevisionNumber the same. However some consensus algorithms
                      may choose to

                      reset the height in certain conditions e.g. hard forks,
                      state-machine

                      breaking changes In these cases, the RevisionNumber is
                      incremented so that

                      height continues to be monitonically increasing even as
                      the RevisionHeight

                      gets reset
                    properties:
                      revision_height:
                        format: uint64
                        title: the height within the given revision
                        type: string
                      revision_number:
                        format: uint64
                        title: the revision that the client is currently on
                        type: string
                    title: height at which the proof was retrieved
                    type: object
                title: |-
                  QueryChannelClientStateResponse is the Response type for the
                  Query/QueryChannelClientState RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: |-
        ChannelConsensusState queries for the consensus state for the channel
        associated with the provided channel identifiers.
      tags:
        - ibc/core/channel
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/next_sequence:
    get:
      operationId: NextSequenceReceive
      parameters:
        - description: channel unique identifier
          in: path
          name: channel_id
          required: true
          schema:
            type: string
        - description: port unique identifier
          in: path
          name: port_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  next_sequence_receive:
                    format: uint64
                    title: next sequence receive number
                    type: string
                  proof:
                    format: byte
                    title: merkle proof of existence
                    type: string
                  proof_height:
                    description: >-
                      Normally the RevisionHeight is incremented at each height
                      while keeping

                      RevisionNumber the same. However some consensus algorithms
                      may choose to

                      reset the height in certain conditions e.g. hard forks,
                      state-machine

                      breaking changes In these cases, the RevisionNumber is
                      incremented so that

                      height continues to be monitonically increasing even as
                      the RevisionHeight

                      gets reset
                    properties:
                      revision_height:
                        format: uint64
                        title: the height within the given revision
                        type: string
                      revision_number:
                        format: uint64
                        title: the revision that the client is currently on
                        type: string
                    title: height at which the proof was retrieved
                    type: object
                title: |-
                  QuerySequenceResponse is the request type for the
                  Query/QueryNextSequenceReceiveResponse RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        NextSequenceReceive returns the next receive sequence for a given
        channel.
      tags:
        - ibc/core/channel
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_acknowledgements:
    get:
      operationId: PacketAcknowledgements
      parameters:
        - description: channel unique identifier
          in: path
          name: channel_id
          required: true
          schema:
            type: string
        - description: port unique identifier
          in: path
          name: port_id
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
        - description: list of packet sequences.
          explode: true
          in: query
          name: packet_commitment_sequences
          required: false
          schema:
            items:
              format: uint64
              type: string
            type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  acknowledgements:
                    items:
                      description: >-
                        PacketState defines the generic type necessary to
                        retrieve and store

                        packet commitments, acknowledgements, and receipts.

                        Caller is responsible for knowing the context necessary
                        to interpret this

                        state as a commitment, acknowledgement, or a receipt.
                      properties:
                        channel_id:
                          description: channel unique identifier.
                          type: string
                        data:
                          description: embedded data that represents packet state.
                          format: byte
                          type: string
                        port_id:
                          description: channel port identifier.
                          type: string
                        sequence:
                          description: packet sequence.
                          format: uint64
                          type: string
                      type: object
                    type: array
                  height:
                    description: >-
                      Normally the RevisionHeight is incremented at each height
                      while keeping

                      RevisionNumber the same. However some consensus algorithms
                      may choose to

                      reset the height in certain conditions e.g. hard forks,
                      state-machine

                      breaking changes In these cases, the RevisionNumber is
                      incremented so that

                      height continues to be monitonically increasing even as
                      the RevisionHeight

                      gets reset
                    properties:
                      revision_height:
                        format: uint64
                        title: the height within the given revision
                        type: string
                      revision_number:
                        format: uint64
                        title: the revision that the client is currently on
                        type: string
                    title: query block height
                    type: object
                  pagination:
                    description: >-
                      PageResponse is to be embedded in gRPC response messages
                      where the

                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    title: pagination response
                    type: object
                title: |-
                  QueryPacketAcknowledgemetsResponse is the request type for the
                  Query/QueryPacketAcknowledgements RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        PacketAcknowledgements returns all the packet acknowledgements
        associated

        with a channel.
      tags:
        - ibc/core/channel
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_acks/{sequence}:
    get:
      operationId: PacketAcknowledgement
      parameters:
        - description: channel unique identifier
          in: path
          name: channel_id
          required: true
          schema:
            type: string
        - description: port unique identifier
          in: path
          name: port_id
          required: true
          schema:
            type: string
        - description: packet sequence
          in: path
          name: sequence
          required: true
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  acknowledgement:
                    format: byte
                    title: packet associated with the request fields
                    type: string
                  proof:
                    format: byte
                    title: merkle proof of existence
                    type: string
                  proof_height:
                    description: >-
                      Normally the RevisionHeight is incremented at each height
                      while keeping

                      RevisionNumber the same. However some consensus algorithms
                      may choose to

                      reset the height in certain conditions e.g. hard forks,
                      state-machine

                      breaking changes In these cases, the RevisionNumber is
                      incremented so that

                      height continues to be monitonically increasing even as
                      the RevisionHeight

                      gets reset
                    properties:
                      revision_height:
                        format: uint64
                        title: the height within the given revision
                        type: string
                      revision_number:
                        format: uint64
                        title: the revision that the client is currently on
                        type: string
                    title: height at which the proof was retrieved
                    type: object
                title: >-
                  QueryPacketAcknowledgementResponse defines the client query
                  response for a

                  packet which also includes a proof and the height from which
                  the

                  proof was retrieved
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: PacketAcknowledgement queries a stored packet acknowledgement hash.
      tags:
        - ibc/core/channel
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments:
    get:
      operationId: PacketCommitments
      parameters:
        - description: channel unique identifier
          in: path
          name: channel_id
          required: true
          schema:
            type: string
        - description: port unique identifier
          in: path
          name: port_id
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  commitments:
                    items:
                      description: >-
                        PacketState defines the generic type necessary to
                        retrieve and store

                        packet commitments, acknowledgements, and receipts.

                        Caller is responsible for knowing the context necessary
                        to interpret this

                        state as a commitment, acknowledgement, or a receipt.
                      properties:
                        channel_id:
                          description: channel unique identifier.
                          type: string
                        data:
                          description: embedded data that represents packet state.
                          format: byte
                          type: string
                        port_id:
                          description: channel port identifier.
                          type: string
                        sequence:
                          description: packet sequence.
                          format: uint64
                          type: string
                      type: object
                    type: array
                  height:
                    description: >-
                      Normally the RevisionHeight is incremented at each height
                      while keeping

                      RevisionNumber the same. However some consensus algorithms
                      may choose to

                      reset the height in certain conditions e.g. hard forks,
                      state-machine

                      breaking changes In these cases, the RevisionNumber is
                      incremented so that

                      height continues to be monitonically increasing even as
                      the RevisionHeight

                      gets reset
                    properties:
                      revision_height:
                        format: uint64
                        title: the height within the given revision
                        type: string
                      revision_number:
                        format: uint64
                        title: the revision that the client is currently on
                        type: string
                    title: query block height
                    type: object
                  pagination:
                    description: >-
                      PageResponse is to be embedded in gRPC response messages
                      where the

                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    title: pagination response
                    type: object
                title: |-
                  QueryPacketCommitmentsResponse is the request type for the
                  Query/QueryPacketCommitments RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: |-
        PacketCommitments returns all the packet commitments hashes associated
        with a channel.
      tags:
        - ibc/core/channel
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments/{packet_ack_sequences}/unreceived_acks:
    get:
      operationId: UnreceivedAcks
      parameters:
        - description: channel unique identifier
          in: path
          name: channel_id
          required: true
          schema:
            type: string
        - description: port unique identifier
          in: path
          name: port_id
          required: true
          schema:
            type: string
        - description: list of acknowledgement sequences
          in: path
          name: packet_ack_sequences
          required: true
          schema:
            items:
              format: uint64
              type: string
            minItems: 1
            type: array
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  height:
                    description: >-
                      Normally the RevisionHeight is incremented at each height
                      while keeping

                      RevisionNumber the same. However some consensus algorithms
                      may choose to

                      reset the height in certain conditions e.g. hard forks,
                      state-machine

                      breaking changes In these cases, the RevisionNumber is
                      incremented so that

                      height continues to be monitonically increasing even as
                      the RevisionHeight

                      gets reset
                    properties:
                      revision_height:
                        format: uint64
                        title: the height within the given revision
                        type: string
                      revision_number:
                        format: uint64
                        title: the revision that the client is currently on
                        type: string
                    title: query block height
                    type: object
                  sequences:
                    items:
                      format: uint64
                      type: string
                    title: list of unreceived acknowledgement sequences
                    type: array
                title: |-
                  QueryUnreceivedAcksResponse is the response type for the
                  Query/UnreceivedAcks RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        UnreceivedAcks returns all the unreceived IBC acknowledgements
        associated

        with a channel and sequences.
      tags:
        - ibc/core/channel
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments/{packet_commitment_sequences}/unreceived_packets:
    get:
      operationId: UnreceivedPackets
      parameters:
        - description: channel unique identifier
          in: path
          name: channel_id
          required: true
          schema:
            type: string
        - description: port unique identifier
          in: path
          name: port_id
          required: true
          schema:
            type: string
        - description: list of packet sequences
          in: path
          name: packet_commitment_sequences
          required: true
          schema:
            items:
              format: uint64
              type: string
            minItems: 1
            type: array
          style: simple
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  height:
                    description: >-
                      Normally the RevisionHeight is incremented at each height
                      while keeping

                      RevisionNumber the same. However some consensus algorithms
                      may choose to

                      reset the height in certain conditions e.g. hard forks,
                      state-machine

                      breaking changes In these cases, the RevisionNumber is
                      incremented so that

                      height continues to be monitonically increasing even as
                      the RevisionHeight

                      gets reset
                    properties:
                      revision_height:
                        format: uint64
                        title: the height within the given revision
                        type: string
                      revision_number:
                        format: uint64
                        title: the revision that the client is currently on
                        type: string
                    title: query block height
                    type: object
                  sequences:
                    items:
                      format: uint64
                      type: string
                    title: list of unreceived packet sequences
                    type: array
                title: |-
                  QueryUnreceivedPacketsResponse is the response type for the
                  Query/UnreceivedPacketCommitments RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        UnreceivedPackets returns all the unreceived IBC packets associated with
        a

        channel and sequences.
      tags:
        - ibc/core/channel
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments/{sequence}:
    get:
      operationId: PacketCommitment
      parameters:
        - description: channel unique identifier
          in: path
          name: channel_id
          required: true
          schema:
            type: string
        - description: port unique identifier
          in: path
          name: port_id
          required: true
          schema:
            type: string
        - description: packet sequence
          in: path
          name: sequence
          required: true
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  commitment:
                    format: byte
                    title: packet associated with the request fields
                    type: string
                  proof:
                    format: byte
                    title: merkle proof of existence
                    type: string
                  proof_height:
                    description: >-
                      Normally the RevisionHeight is incremented at each height
                      while keeping

                      RevisionNumber the same. However some consensus algorithms
                      may choose to

                      reset the height in certain conditions e.g. hard forks,
                      state-machine

                      breaking changes In these cases, the RevisionNumber is
                      incremented so that

                      height continues to be monitonically increasing even as
                      the RevisionHeight

                      gets reset
                    properties:
                      revision_height:
                        format: uint64
                        title: the height within the given revision
                        type: string
                      revision_number:
                        format: uint64
                        title: the revision that the client is currently on
                        type: string
                    title: height at which the proof was retrieved
                    type: object
                title: >-
                  QueryPacketCommitmentResponse defines the client query
                  response for a packet

                  which also includes a proof and the height from which the
                  proof was

                  retrieved
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: PacketCommitment queries a stored packet commitment hash.
      tags:
        - ibc/core/channel
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_receipts/{sequence}:
    get:
      operationId: PacketReceipt
      parameters:
        - description: channel unique identifier
          in: path
          name: channel_id
          required: true
          schema:
            type: string
        - description: port unique identifier
          in: path
          name: port_id
          required: true
          schema:
            type: string
        - description: packet sequence
          in: path
          name: sequence
          required: true
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  proof:
                    format: byte
                    title: merkle proof of existence
                    type: string
                  proof_height:
                    description: >-
                      Normally the RevisionHeight is incremented at each height
                      while keeping

                      RevisionNumber the same. However some consensus algorithms
                      may choose to

                      reset the height in certain conditions e.g. hard forks,
                      state-machine

                      breaking changes In these cases, the RevisionNumber is
                      incremented so that

                      height continues to be monitonically increasing even as
                      the RevisionHeight

                      gets reset
                    properties:
                      revision_height:
                        format: uint64
                        title: the height within the given revision
                        type: string
                      revision_number:
                        format: uint64
                        title: the revision that the client is currently on
                        type: string
                    title: height at which the proof was retrieved
                    type: object
                  received:
                    title: success flag for if receipt exists
                    type: boolean
                title: >-
                  QueryPacketReceiptResponse defines the client query response
                  for a packet

                  receipt which also includes a proof, and the height from which
                  the proof was

                  retrieved
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        PacketReceipt queries if a given packet sequence has been received on
        the

        queried chain
      tags:
        - ibc/core/channel
  /ibc/core/channel/v1/connections/{connection}/channels:
    get:
      operationId: ConnectionChannels
      parameters:
        - description: connection unique identifier
          in: path
          name: connection
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  channels:
                    description: list of channels associated with a connection.
                    items:
                      description: >-
                        IdentifiedChannel defines a channel with additional port
                        and channel

                        identifier fields.
                      properties:
                        channel_id:
                          title: channel identifier
                          type: string
                        connection_hops:
                          items:
                            type: string
                          title: >-
                            list of connection identifiers, in order, along
                            which packets sent on

                            this channel will travel
                          type: array
                        counterparty:
                          properties:
                            channel_id:
                              title: channel end on the counterparty chain
                              type: string
                            port_id:
                              description: >-
                                port on the counterparty chain which owns the
                                other end of the channel.
                              type: string
                          title: counterparty channel end
                          type: object
                        ordering:
                          default: ORDER_NONE_UNSPECIFIED
                          description: >-
                            - ORDER_NONE_UNSPECIFIED: zero-value for channel
                            ordering
                             - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                            which they were sent.
                             - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                          enum:
                            - ORDER_NONE_UNSPECIFIED
                            - ORDER_UNORDERED
                            - ORDER_ORDERED
                          title: whether the channel is ordered or unordered
                          type: string
                        port_id:
                          title: port identifier
                          type: string
                        state:
                          default: STATE_UNINITIALIZED_UNSPECIFIED
                          description: >-
                            State defines if a channel is in one of the
                            following states:

                            CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                             - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                             - STATE_INIT: A channel has just started the opening handshake.
                             - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                             - STATE_OPEN: A channel has completed the handshake. Open channels are
                            ready to send and receive packets.
                             - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                            packets.
                          enum:
                            - STATE_UNINITIALIZED_UNSPECIFIED
                            - STATE_INIT
                            - STATE_TRYOPEN
                            - STATE_OPEN
                            - STATE_CLOSED
                          title: current state of the channel end
                          type: string
                        version:
                          title: >-
                            opaque channel version, which is agreed upon during
                            the handshake
                          type: string
                      type: object
                    type: array
                  height:
                    description: >-
                      Normally the RevisionHeight is incremented at each height
                      while keeping

                      RevisionNumber the same. However some consensus algorithms
                      may choose to

                      reset the height in certain conditions e.g. hard forks,
                      state-machine

                      breaking changes In these cases, the RevisionNumber is
                      incremented so that

                      height continues to be monitonically increasing even as
                      the RevisionHeight

                      gets reset
                    properties:
                      revision_height:
                        format: uint64
                        title: the height within the given revision
                        type: string
                      revision_number:
                        format: uint64
                        title: the revision that the client is currently on
                        type: string
                    title: query block height
                    type: object
                  pagination:
                    description: >-
                      PageResponse is to be embedded in gRPC response messages
                      where the

                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    title: pagination response
                    type: object
                title: |-
                  QueryConnectionChannelsResponse is the Response type for the
                  Query/QueryConnectionChannels RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: |-
        ConnectionChannels queries all the channels associated with a connection
        end.
      tags:
        - ibc/core/channel
  /ibc/core/client/v1/client_states:
    get:
      operationId: ClientStates
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryClientStatesResponse is the response type for the
                  Query/ClientStates RPC

                  method.
                properties:
                  client_states:
                    description: list of stored ClientStates of the chain.
                    items:
                      description: >-
                        IdentifiedClientState defines a client state with an
                        additional client

                        identifier field.
                      properties:
                        client_id:
                          title: client identifier
                          type: string
                        client_state:
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized
                            message.


                            Protobuf library provides support to pack/unpack Any
                            values in the form

                            of utility functions or additional generated methods
                            of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := anypb.New(foo)
                                 if err != nil {
                                   ...
                                 }
                                 ...
                                 foo := &pb.Foo{}
                                 if err := any.UnmarshalTo(foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will
                            by default use

                            'type.googleapis.com/full.type.name' as the type URL
                            and the unpack

                            methods only use the fully qualified type name after
                            the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z"
                            will yield type

                            name "y.z".



                            JSON

                            ====

                            The JSON representation of an `Any` value uses the
                            regular

                            representation of the deserialized, embedded
                            message, with an

                            additional field `@type` which contains the type
                            URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a
                            custom JSON

                            representation, that representation will be embedded
                            adding a field

                            `value` which holds the custom JSON in addition to
                            the `@type`

                            field. Example (for message
                            [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                          properties:
                            type_url:
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must
                                contain at least

                                one "/" character. The last segment of the URL's
                                path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name
                                should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the
                                binary all types that they

                                expect it to use in the context of Any. However,
                                for URLs which use the

                                scheme `http`, `https`, or no scheme, one can
                                optionally set up a type

                                server that maps type URLs to message
                                definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a
                                [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup
                                results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently
                                available in the official

                                protobuf release, and it is not used for type
                                URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty
                                scheme) might be

                                used with implementation specific semantics.
                              type: string
                            value:
                              description: >-
                                Must be a valid serialized protocol buffer of
                                the above specified type.
                              format: byte
                              type: string
                          title: client state
                          type: object
                      type: object
                    type: array
                  pagination:
                    description: >-
                      PageResponse is to be embedded in gRPC response messages
                      where the

                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    title: pagination response
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: ClientStates queries all the IBC light clients of a chain.
      tags:
        - ibc/core/client
  /ibc/core/client/v1/client_states/{client_id}:
    get:
      operationId: ClientState
      parameters:
        - description: client state unique identifier
          in: path
          name: client_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryClientStateResponse is the response type for the
                  Query/ClientState RPC

                  method. Besides the client state, it includes a proof and the
                  height from

                  which the proof was retrieved.
                properties:
                  client_state:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    title: client state associated with the request identifier
                    type: object
                  proof:
                    format: byte
                    title: merkle proof of existence
                    type: string
                  proof_height:
                    description: >-
                      Normally the RevisionHeight is incremented at each height
                      while keeping

                      RevisionNumber the same. However some consensus algorithms
                      may choose to

                      reset the height in certain conditions e.g. hard forks,
                      state-machine

                      breaking changes In these cases, the RevisionNumber is
                      incremented so that

                      height continues to be monitonically increasing even as
                      the RevisionHeight

                      gets reset
                    properties:
                      revision_height:
                        format: uint64
                        title: the height within the given revision
                        type: string
                      revision_number:
                        format: uint64
                        title: the revision that the client is currently on
                        type: string
                    title: height at which the proof was retrieved
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: ClientState queries an IBC light client.
      tags:
        - ibc/core/client
  /ibc/core/client/v1/client_status/{client_id}:
    get:
      operationId: ClientStatus
      parameters:
        - description: client unique identifier
          in: path
          name: client_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryClientStatusResponse is the response type for the
                  Query/ClientStatus RPC

                  method. It returns the current status of the IBC client.
                properties:
                  status:
                    type: string
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Status queries the status of an IBC client.
      tags:
        - ibc/core/client
  /ibc/core/client/v1/consensus_states/{client_id}:
    get:
      operationId: ConsensusStates
      parameters:
        - description: client identifier
          in: path
          name: client_id
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  consensus_states:
                    items:
                      description: >-
                        ConsensusStateWithHeight defines a consensus state with
                        an additional height

                        field.
                      properties:
                        consensus_state:
                          description: >-
                            `Any` contains an arbitrary serialized protocol
                            buffer message along with a

                            URL that describes the type of the serialized
                            message.


                            Protobuf library provides support to pack/unpack Any
                            values in the form

                            of utility functions or additional generated methods
                            of the Any type.


                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := anypb.New(foo)
                                 if err != nil {
                                   ...
                                 }
                                 ...
                                 foo := &pb.Foo{}
                                 if err := any.UnmarshalTo(foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will
                            by default use

                            'type.googleapis.com/full.type.name' as the type URL
                            and the unpack

                            methods only use the fully qualified type name after
                            the last '/'

                            in the type URL, for example "foo.bar.com/x/y.z"
                            will yield type

                            name "y.z".



                            JSON

                            ====

                            The JSON representation of an `Any` value uses the
                            regular

                            representation of the deserialized, embedded
                            message, with an

                            additional field `@type` which contains the type
                            URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a
                            custom JSON

                            representation, that representation will be embedded
                            adding a field

                            `value` which holds the custom JSON in addition to
                            the `@type`

                            field. Example (for message
                            [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                          properties:
                            type_url:
                              description: >-
                                A URL/resource name that uniquely identifies the
                                type of the serialized

                                protocol buffer message. This string must
                                contain at least

                                one "/" character. The last segment of the URL's
                                path must represent

                                the fully qualified name of the type (as in

                                `path/google.protobuf.Duration`). The name
                                should be in a canonical form

                                (e.g., leading "." is not accepted).


                                In practice, teams usually precompile into the
                                binary all types that they

                                expect it to use in the context of Any. However,
                                for URLs which use the

                                scheme `http`, `https`, or no scheme, one can
                                optionally set up a type

                                server that maps type URLs to message
                                definitions as follows:


                                * If no scheme is provided, `https` is assumed.

                                * An HTTP GET on the URL must yield a
                                [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup
                                results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently
                                available in the official

                                protobuf release, and it is not used for type
                                URLs beginning with

                                type.googleapis.com.


                                Schemes other than `http`, `https` (or the empty
                                scheme) might be

                                used with implementation specific semantics.
                              type: string
                            value:
                              description: >-
                                Must be a valid serialized protocol buffer of
                                the above specified type.
                              format: byte
                              type: string
                          title: consensus state
                          type: object
                        height:
                          description: >-
                            Normally the RevisionHeight is incremented at each
                            height while keeping

                            RevisionNumber the same. However some consensus
                            algorithms may choose to

                            reset the height in certain conditions e.g. hard
                            forks, state-machine

                            breaking changes In these cases, the RevisionNumber
                            is incremented so that

                            height continues to be monitonically increasing even
                            as the RevisionHeight

                            gets reset
                          properties:
                            revision_height:
                              format: uint64
                              title: the height within the given revision
                              type: string
                            revision_number:
                              format: uint64
                              title: the revision that the client is currently on
                              type: string
                          title: consensus state height
                          type: object
                      type: object
                    title: consensus states associated with the identifier
                    type: array
                  pagination:
                    description: >-
                      PageResponse is to be embedded in gRPC response messages
                      where the

                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    title: pagination response
                    type: object
                title: |-
                  QueryConsensusStatesResponse is the response type for the
                  Query/ConsensusStates RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: |-
        ConsensusStates queries all the consensus state associated with a given
        client.
      tags:
        - ibc/core/client
  /ibc/core/client/v1/consensus_states/{client_id}/heights:
    get:
      operationId: ConsensusStateHeights
      parameters:
        - description: client identifier
          in: path
          name: client_id
          required: true
          schema:
            type: string
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  consensus_state_heights:
                    items:
                      description: >-
                        Normally the RevisionHeight is incremented at each
                        height while keeping

                        RevisionNumber the same. However some consensus
                        algorithms may choose to

                        reset the height in certain conditions e.g. hard forks,
                        state-machine

                        breaking changes In these cases, the RevisionNumber is
                        incremented so that

                        height continues to be monitonically increasing even as
                        the RevisionHeight

                        gets reset
                      properties:
                        revision_height:
                          format: uint64
                          title: the height within the given revision
                          type: string
                        revision_number:
                          format: uint64
                          title: the revision that the client is currently on
                          type: string
                      title: >-
                        Height is a monotonically increasing data type

                        that can be compared against another Height for the
                        purposes of updating and

                        freezing clients
                      type: object
                    title: consensus state heights
                    type: array
                  pagination:
                    description: >-
                      PageResponse is to be embedded in gRPC response messages
                      where the

                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    title: pagination response
                    type: object
                title: >-
                  QueryConsensusStateHeightsResponse is the response type for
                  the

                  Query/ConsensusStateHeights RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        ConsensusStateHeights queries the height of every consensus states
        associated with a given client.
      tags:
        - ibc/core/client
  /ibc/core/client/v1/consensus_states/{client_id}/revision/{revision_number}/height/{revision_height}:
    get:
      operationId: ConsensusState
      parameters:
        - description: client identifier
          in: path
          name: client_id
          required: true
          schema:
            type: string
        - description: consensus state revision number
          in: path
          name: revision_number
          required: true
          schema:
            format: uint64
            type: string
        - description: consensus state revision height
          in: path
          name: revision_height
          required: true
          schema:
            format: uint64
            type: string
        - description: >-
            latest_height overrrides the height field and queries the latest
            stored

            ConsensusState.
          in: query
          name: latest_height
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  consensus_state:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    title: >-
                      consensus state associated with the client identifier at
                      the given height
                    type: object
                  proof:
                    format: byte
                    title: merkle proof of existence
                    type: string
                  proof_height:
                    description: >-
                      Normally the RevisionHeight is incremented at each height
                      while keeping

                      RevisionNumber the same. However some consensus algorithms
                      may choose to

                      reset the height in certain conditions e.g. hard forks,
                      state-machine

                      breaking changes In these cases, the RevisionNumber is
                      incremented so that

                      height continues to be monitonically increasing even as
                      the RevisionHeight

                      gets reset
                    properties:
                      revision_height:
                        format: uint64
                        title: the height within the given revision
                        type: string
                      revision_number:
                        format: uint64
                        title: the revision that the client is currently on
                        type: string
                    title: >-
                      Height is a monotonically increasing data type

                      that can be compared against another Height for the
                      purposes of updating and

                      freezing clients
                    type: object
                title: >-
                  QueryConsensusStateResponse is the response type for the
                  Query/ConsensusState

                  RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        ConsensusState queries a consensus state associated with a client state
        at

        a given height.
      tags:
        - ibc/core/client
  /ibc/core/client/v1/upgraded_client_states:
    get:
      operationId: UpgradedClientState
      responses:
        '200':
          content:
            application/json:
              schema:
                description: |-
                  QueryUpgradedClientStateResponse is the response type for the
                  Query/UpgradedClientState RPC method.
                properties:
                  upgraded_client_state:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    title: client state associated with the request identifier
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: UpgradedClientState queries an Upgraded IBC light client.
      tags:
        - ibc/core/client
  /ibc/core/client/v1/upgraded_consensus_states:
    get:
      operationId: UpgradedConsensusState
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryUpgradedConsensusStateResponse is the response type for
                  the

                  Query/UpgradedConsensusState RPC method.
                properties:
                  upgraded_consensus_state:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    title: Consensus state associated with the request identifier
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: UpgradedConsensusState queries an Upgraded IBC consensus state.
      tags:
        - ibc/core/client
  /ibc/core/connection/v1/client_connections/{client_id}:
    get:
      operationId: ClientConnections
      parameters:
        - description: client identifier associated with a connection
          in: path
          name: client_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  connection_paths:
                    description: >-
                      slice of all the connection paths associated with a
                      client.
                    items:
                      type: string
                    type: array
                  proof:
                    format: byte
                    title: merkle proof of existence
                    type: string
                  proof_height:
                    description: >-
                      Normally the RevisionHeight is incremented at each height
                      while keeping

                      RevisionNumber the same. However some consensus algorithms
                      may choose to

                      reset the height in certain conditions e.g. hard forks,
                      state-machine

                      breaking changes In these cases, the RevisionNumber is
                      incremented so that

                      height continues to be monitonically increasing even as
                      the RevisionHeight

                      gets reset
                    properties:
                      revision_height:
                        format: uint64
                        title: the height within the given revision
                        type: string
                      revision_number:
                        format: uint64
                        title: the revision that the client is currently on
                        type: string
                    title: >-
                      Height is a monotonically increasing data type

                      that can be compared against another Height for the
                      purposes of updating and

                      freezing clients
                    type: object
                title: |-
                  QueryClientConnectionsResponse is the response type for the
                  Query/ClientConnections RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: |-
        ClientConnections queries the connection paths associated with a client
        state.
      tags:
        - ibc/core/connection
  /ibc/core/connection/v1/connections:
    get:
      operationId: Connections
      parameters:
        - description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          in: query
          name: pagination.key
          required: false
          schema:
            format: byte
            type: string
        - description: >-
            offset is a numeric offset that can be used when key is unavailable.

            It is less efficient than using key. Only one of offset or key
            should

            be set.
          in: query
          name: pagination.offset
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            limit is the total number of results to be returned in the result
            page.

            If left empty it will default to a value to be set by each app.
          in: query
          name: pagination.limit
          required: false
          schema:
            format: uint64
            type: string
        - description: >-
            count_total is set to true  to indicate that the result set should
            include

            a count of the total number of items available for pagination in
            UIs.

            count_total is only respected when offset is used. It is ignored
            when key

            is set.
          in: query
          name: pagination.count_total
          required: false
          schema:
            type: boolean
        - description: >-
            reverse is set to true if results are to be returned in the
            descending order.


            Since: cosmos-sdk 0.43
          in: query
          name: pagination.reverse
          required: false
          schema:
            type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryConnectionsResponse is the response type for the
                  Query/Connections RPC

                  method.
                properties:
                  connections:
                    description: list of stored connections of the chain.
                    items:
                      description: >-
                        IdentifiedConnection defines a connection with
                        additional connection

                        identifier field.
                      properties:
                        client_id:
                          description: client associated with this connection.
                          type: string
                        counterparty:
                          description: counterparty chain associated with this connection.
                          properties:
                            client_id:
                              description: >-
                                identifies the client on the counterparty chain
                                associated with a given

                                connection.
                              type: string
                            connection_id:
                              description: >-
                                identifies the connection end on the
                                counterparty chain associated with a

                                given connection.
                              type: string
                            prefix:
                              description: >-
                                commitment merkle prefix of the counterparty
                                chain.
                              properties:
                                key_prefix:
                                  format: byte
                                  type: string
                              title: >-
                                MerklePrefix is merkle path prefixed to the key.

                                The constructed key from the Path and the key
                                will be append(Path.KeyPath,

                                append(Path.KeyPrefix, key...))
                              type: object
                          type: object
                        delay_period:
                          description: delay period associated with this connection.
                          format: uint64
                          type: string
                        id:
                          description: connection identifier.
                          type: string
                        state:
                          default: STATE_UNINITIALIZED_UNSPECIFIED
                          description: current state of the connection end.
                          enum:
                            - STATE_UNINITIALIZED_UNSPECIFIED
                            - STATE_INIT
                            - STATE_TRYOPEN
                            - STATE_OPEN
                          type: string
                        versions:
                          items:
                            description: >-
                              Version defines the versioning scheme used to
                              negotiate the IBC verison in

                              the connection handshake.
                            properties:
                              features:
                                items:
                                  type: string
                                title: >-
                                  list of features compatible with the specified
                                  identifier
                                type: array
                              identifier:
                                title: unique version identifier
                                type: string
                            type: object
                          title: >-
                            IBC version which can be utilised to determine
                            encodings or protocols for

                            channels or packets utilising this connection
                          type: array
                      type: object
                    type: array
                  height:
                    description: >-
                      Normally the RevisionHeight is incremented at each height
                      while keeping

                      RevisionNumber the same. However some consensus algorithms
                      may choose to

                      reset the height in certain conditions e.g. hard forks,
                      state-machine

                      breaking changes In these cases, the RevisionNumber is
                      incremented so that

                      height continues to be monitonically increasing even as
                      the RevisionHeight

                      gets reset
                    properties:
                      revision_height:
                        format: uint64
                        title: the height within the given revision
                        type: string
                      revision_number:
                        format: uint64
                        title: the revision that the client is currently on
                        type: string
                    title: >-
                      Height is a monotonically increasing data type

                      that can be compared against another Height for the
                      purposes of updating and

                      freezing clients
                    type: object
                  pagination:
                    description: >-
                      PageResponse is to be embedded in gRPC response messages
                      where the

                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                    properties:
                      next_key:
                        format: byte
                        title: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently
                        type: string
                      total:
                        format: uint64
                        title: >-
                          total is total number of results available if
                          PageRequest.count_total

                          was set, its value is undefined otherwise
                        type: string
                    title: pagination response
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Connections queries all the IBC connections of a chain.
      tags:
        - ibc/core/connection
  /ibc/core/connection/v1/connections/{connection_id}:
    get:
      operationId: Connection
      parameters:
        - description: connection unique identifier
          in: path
          name: connection_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryConnectionResponse is the response type for the
                  Query/Connection RPC

                  method. Besides the connection end, it includes a proof and
                  the height from

                  which the proof was retrieved.
                properties:
                  connection:
                    description: >-
                      ConnectionEnd defines a stateful object on a chain
                      connected to another

                      separate one.

                      NOTE: there must only be 2 defined ConnectionEnds to
                      establish

                      a connection between two chains.
                    properties:
                      client_id:
                        description: client associated with this connection.
                        type: string
                      counterparty:
                        description: counterparty chain associated with this connection.
                        properties:
                          client_id:
                            description: >-
                              identifies the client on the counterparty chain
                              associated with a given

                              connection.
                            type: string
                          connection_id:
                            description: >-
                              identifies the connection end on the counterparty
                              chain associated with a

                              given connection.
                            type: string
                          prefix:
                            description: >-
                              commitment merkle prefix of the counterparty
                              chain.
                            properties:
                              key_prefix:
                                format: byte
                                type: string
                            title: >-
                              MerklePrefix is merkle path prefixed to the key.

                              The constructed key from the Path and the key will
                              be append(Path.KeyPath,

                              append(Path.KeyPrefix, key...))
                            type: object
                        type: object
                      delay_period:
                        description: >-
                          delay period that must pass before a consensus state
                          can be used for

                          packet-verification NOTE: delay period logic is only
                          implemented by some

                          clients.
                        format: uint64
                        type: string
                      state:
                        default: STATE_UNINITIALIZED_UNSPECIFIED
                        description: current state of the connection end.
                        enum:
                          - STATE_UNINITIALIZED_UNSPECIFIED
                          - STATE_INIT
                          - STATE_TRYOPEN
                          - STATE_OPEN
                        type: string
                      versions:
                        description: >-
                          IBC version which can be utilised to determine
                          encodings or protocols for

                          channels or packets utilising this connection.
                        items:
                          description: >-
                            Version defines the versioning scheme used to
                            negotiate the IBC verison in

                            the connection handshake.
                          properties:
                            features:
                              items:
                                type: string
                              title: >-
                                list of features compatible with the specified
                                identifier
                              type: array
                            identifier:
                              title: unique version identifier
                              type: string
                          type: object
                        type: array
                    title: connection associated with the request identifier
                    type: object
                  proof:
                    format: byte
                    title: merkle proof of existence
                    type: string
                  proof_height:
                    description: >-
                      Normally the RevisionHeight is incremented at each height
                      while keeping

                      RevisionNumber the same. However some consensus algorithms
                      may choose to

                      reset the height in certain conditions e.g. hard forks,
                      state-machine

                      breaking changes In these cases, the RevisionNumber is
                      incremented so that

                      height continues to be monitonically increasing even as
                      the RevisionHeight

                      gets reset
                    properties:
                      revision_height:
                        format: uint64
                        title: the height within the given revision
                        type: string
                      revision_number:
                        format: uint64
                        title: the revision that the client is currently on
                        type: string
                    title: >-
                      Height is a monotonically increasing data type

                      that can be compared against another Height for the
                      purposes of updating and

                      freezing clients
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Connection queries an IBC connection end.
      tags:
        - ibc/core/connection
  /ibc/core/connection/v1/connections/{connection_id}/client_state:
    get:
      operationId: ConnectionClientState
      parameters:
        - description: connection identifier
          in: path
          name: connection_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  identified_client_state:
                    description: >-
                      IdentifiedClientState defines a client state with an
                      additional client

                      identifier field.
                    properties:
                      client_id:
                        title: client identifier
                        type: string
                      client_state:
                        description: >-
                          `Any` contains an arbitrary serialized protocol buffer
                          message along with a

                          URL that describes the type of the serialized message.


                          Protobuf library provides support to pack/unpack Any
                          values in the form

                          of utility functions or additional generated methods
                          of the Any type.


                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }

                           Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                           Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := anypb.New(foo)
                               if err != nil {
                                 ...
                               }
                               ...
                               foo := &pb.Foo{}
                               if err := any.UnmarshalTo(foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by
                          default use

                          'type.googleapis.com/full.type.name' as the type URL
                          and the unpack

                          methods only use the fully qualified type name after
                          the last '/'

                          in the type URL, for example "foo.bar.com/x/y.z" will
                          yield type

                          name "y.z".



                          JSON

                          ====

                          The JSON representation of an `Any` value uses the
                          regular

                          representation of the deserialized, embedded message,
                          with an

                          additional field `@type` which contains the type URL.
                          Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a
                          custom JSON

                          representation, that representation will be embedded
                          adding a field

                          `value` which holds the custom JSON in addition to the
                          `@type`

                          field. Example (for message
                          [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                        properties:
                          type_url:
                            description: >-
                              A URL/resource name that uniquely identifies the
                              type of the serialized

                              protocol buffer message. This string must contain
                              at least

                              one "/" character. The last segment of the URL's
                              path must represent

                              the fully qualified name of the type (as in

                              `path/google.protobuf.Duration`). The name should
                              be in a canonical form

                              (e.g., leading "." is not accepted).


                              In practice, teams usually precompile into the
                              binary all types that they

                              expect it to use in the context of Any. However,
                              for URLs which use the

                              scheme `http`, `https`, or no scheme, one can
                              optionally set up a type

                              server that maps type URLs to message definitions
                              as follows:


                              * If no scheme is provided, `https` is assumed.

                              * An HTTP GET on the URL must yield a
                              [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results
                              based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently
                              available in the official

                              protobuf release, and it is not used for type URLs
                              beginning with

                              type.googleapis.com.


                              Schemes other than `http`, `https` (or the empty
                              scheme) might be

                              used with implementation specific semantics.
                            type: string
                          value:
                            description: >-
                              Must be a valid serialized protocol buffer of the
                              above specified type.
                            format: byte
                            type: string
                        title: client state
                        type: object
                    title: client state associated with the channel
                    type: object
                  proof:
                    format: byte
                    title: merkle proof of existence
                    type: string
                  proof_height:
                    description: >-
                      Normally the RevisionHeight is incremented at each height
                      while keeping

                      RevisionNumber the same. However some consensus algorithms
                      may choose to

                      reset the height in certain conditions e.g. hard forks,
                      state-machine

                      breaking changes In these cases, the RevisionNumber is
                      incremented so that

                      height continues to be monitonically increasing even as
                      the RevisionHeight

                      gets reset
                    properties:
                      revision_height:
                        format: uint64
                        title: the height within the given revision
                        type: string
                      revision_number:
                        format: uint64
                        title: the revision that the client is currently on
                        type: string
                    title: >-
                      Height is a monotonically increasing data type

                      that can be compared against another Height for the
                      purposes of updating and

                      freezing clients
                    type: object
                title: >-
                  QueryConnectionClientStateResponse is the response type for
                  the

                  Query/ConnectionClientState RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: |-
        ConnectionClientState queries the client state associated with the
        connection.
      tags:
        - ibc/core/connection
  /ibc/core/connection/v1/connections/{connection_id}/consensus_state/revision/{revision_number}/height/{revision_height}:
    get:
      operationId: ConnectionConsensusState
      parameters:
        - description: connection identifier
          in: path
          name: connection_id
          required: true
          schema:
            type: string
        - in: path
          name: revision_number
          required: true
          schema:
            format: uint64
            type: string
        - in: path
          name: revision_height
          required: true
          schema:
            format: uint64
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  client_id:
                    title: client ID associated with the consensus state
                    type: string
                  consensus_state:
                    description: >-
                      `Any` contains an arbitrary serialized protocol buffer
                      message along with a

                      URL that describes the type of the serialized message.


                      Protobuf library provides support to pack/unpack Any
                      values in the form

                      of utility functions or additional generated methods of
                      the Any type.


                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := anypb.New(foo)
                           if err != nil {
                             ...
                           }
                           ...
                           foo := &pb.Foo{}
                           if err := any.UnmarshalTo(foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by
                      default use

                      'type.googleapis.com/full.type.name' as the type URL and
                      the unpack

                      methods only use the fully qualified type name after the
                      last '/'

                      in the type URL, for example "foo.bar.com/x/y.z" will
                      yield type

                      name "y.z".



                      JSON

                      ====

                      The JSON representation of an `Any` value uses the regular

                      representation of the deserialized, embedded message, with
                      an

                      additional field `@type` which contains the type URL.
                      Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a
                      custom JSON

                      representation, that representation will be embedded
                      adding a field

                      `value` which holds the custom JSON in addition to the
                      `@type`

                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                    properties:
                      type_url:
                        description: >-
                          A URL/resource name that uniquely identifies the type
                          of the serialized

                          protocol buffer message. This string must contain at
                          least

                          one "/" character. The last segment of the URL's path
                          must represent

                          the fully qualified name of the type (as in

                          `path/google.protobuf.Duration`). The name should be
                          in a canonical form

                          (e.g., leading "." is not accepted).


                          In practice, teams usually precompile into the binary
                          all types that they

                          expect it to use in the context of Any. However, for
                          URLs which use the

                          scheme `http`, `https`, or no scheme, one can
                          optionally set up a type

                          server that maps type URLs to message definitions as
                          follows:


                          * If no scheme is provided, `https` is assumed.

                          * An HTTP GET on the URL must yield a
                          [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results
                          based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in
                          the official

                          protobuf release, and it is not used for type URLs
                          beginning with

                          type.googleapis.com.


                          Schemes other than `http`, `https` (or the empty
                          scheme) might be

                          used with implementation specific semantics.
                        type: string
                      value:
                        description: >-
                          Must be a valid serialized protocol buffer of the
                          above specified type.
                        format: byte
                        type: string
                    title: consensus state associated with the channel
                    type: object
                  proof:
                    format: byte
                    title: merkle proof of existence
                    type: string
                  proof_height:
                    description: >-
                      Normally the RevisionHeight is incremented at each height
                      while keeping

                      RevisionNumber the same. However some consensus algorithms
                      may choose to

                      reset the height in certain conditions e.g. hard forks,
                      state-machine

                      breaking changes In these cases, the RevisionNumber is
                      incremented so that

                      height continues to be monitonically increasing even as
                      the RevisionHeight

                      gets reset
                    properties:
                      revision_height:
                        format: uint64
                        title: the height within the given revision
                        type: string
                      revision_number:
                        format: uint64
                        title: the revision that the client is currently on
                        type: string
                    title: >-
                      Height is a monotonically increasing data type

                      that can be compared against another Height for the
                      purposes of updating and

                      freezing clients
                    type: object
                title: >-
                  QueryConnectionConsensusStateResponse is the response type for
                  the

                  Query/ConnectionConsensusState RPC method
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: |-
        ConnectionConsensusState queries the consensus state associated with the
        connection.
      tags:
        - ibc/core/connection
  /inter-tx/interchain_account/owner/{owner}/connection/{connection_id}:
    get:
      operationId: InterchainAccount
      parameters:
        - in: path
          name: owner
          required: true
          schema:
            type: string
        - in: path
          name: connection_id
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  interchain_account_address:
                    type: string
                title: >-
                  QueryInterchainAccountResponse the response type for the
                  Query/InterchainAccountAddress RPC
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: >-
        QueryInterchainAccount returns the interchain account for given owner
        address on a given connection pair
      tags:
        - inter-tx/interchain_account/owner
  /xpla/reward/v1beta1/params:
    get:
      operationId: Params
      responses:
        '200':
          content:
            application/json:
              schema:
                description: >-
                  QueryParamsResponse is the response type for the Query/Params
                  RPC method.
                properties:
                  params:
                    description: params defines the parameters of the module.
                    properties:
                      community_pool_rate:
                        type: string
                      fee_pool_rate:
                        type: string
                      reserve_account:
                        type: string
                      reserve_rate:
                        type: string
                      reward_distribute_account:
                        type: string
                    type: object
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Params queries params of the reward module.
      tags:
        - xpla/reward/v1beta1
  /xpla/reward/v1beta1/pool:
    get:
      operationId: Pool
      responses:
        '200':
          content:
            application/json:
              schema:
                description: |-
                  QueryPoolResponse is the response type for the Query/Pool
                  RPC method.
                properties:
                  pool:
                    description: pool defines reward pool's coins.
                    items:
                      description: >-
                        Coin defines a token with a denomination and an amount.


                        NOTE: The amount field is an Int which implements the
                        custom method

                        signatures required by gogoproto.
                      properties:
                        amount:
                          type: string
                        denom:
                          type: string
                      type: object
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      summary: Pool queries the reward module pool coins.
      tags:
        - xpla/reward/v1beta1
  /xpla/volunteer/v1beta1/validators:
    get:
      operationId: VolunteerValidators
      responses:
        '200':
          content:
            application/json:
              schema:
                properties:
                  volunteer_validators:
                    items:
                      type: string
                    type: array
                type: object
          description: A successful response.
        default:
          content:
            application/json:
              schema:
                properties:
                  code:
                    format: int32
                    type: integer
                  details:
                    items:
                      description: >-
                        `Any` contains an arbitrary serialized protocol buffer
                        message along with a

                        URL that describes the type of the serialized message.


                        Protobuf library provides support to pack/unpack Any
                        values in the form

                        of utility functions or additional generated methods of
                        the Any type.


                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := anypb.New(foo)
                             if err != nil {
                               ...
                             }
                             ...
                             foo := &pb.Foo{}
                             if err := any.UnmarshalTo(foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by
                        default use

                        'type.googleapis.com/full.type.name' as the type URL and
                        the unpack

                        methods only use the fully qualified type name after the
                        last '/'

                        in the type URL, for example "foo.bar.com/x/y.z" will
                        yield type

                        name "y.z".



                        JSON

                        ====

                        The JSON representation of an `Any` value uses the
                        regular

                        representation of the deserialized, embedded message,
                        with an

                        additional field `@type` which contains the type URL.
                        Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a
                        custom JSON

                        representation, that representation will be embedded
                        adding a field

                        `value` which holds the custom JSON in addition to the
                        `@type`

                        field. Example (for message
                        [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
                      properties:
                        type_url:
                          description: >-
                            A URL/resource name that uniquely identifies the
                            type of the serialized

                            protocol buffer message. This string must contain at
                            least

                            one "/" character. The last segment of the URL's
                            path must represent

                            the fully qualified name of the type (as in

                            `path/google.protobuf.Duration`). The name should be
                            in a canonical form

                            (e.g., leading "." is not accepted).


                            In practice, teams usually precompile into the
                            binary all types that they

                            expect it to use in the context of Any. However, for
                            URLs which use the

                            scheme `http`, `https`, or no scheme, one can
                            optionally set up a type

                            server that maps type URLs to message definitions as
                            follows:


                            * If no scheme is provided, `https` is assumed.

                            * An HTTP GET on the URL must yield a
                            [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results
                            based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available
                            in the official

                            protobuf release, and it is not used for type URLs
                            beginning with

                            type.googleapis.com.


                            Schemes other than `http`, `https` (or the empty
                            scheme) might be

                            used with implementation specific semantics.
                          type: string
                        value:
                          description: >-
                            Must be a valid serialized protocol buffer of the
                            above specified type.
                          format: byte
                          type: string
                      type: object
                    type: array
                  error:
                    type: string
                  message:
                    type: string
                type: object
          description: An unexpected error response.
      tags:
        - xpla/volunteer/v1beta1
